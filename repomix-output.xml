This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.env.example
.repomixignore
components.json
docker-compose.yml
Dockerfile
eslint.config.js
index.html
package.json
src/api/authService.ts
src/api/config.ts
src/api/gameService.ts
src/api/teamService.ts
src/App.css
src/App.tsx
src/components/ButtonHomeBack.tsx
src/components/Cloud.tsx
src/components/CreateTeamButton.tsx
src/components/ProtectedRoute.tsx
src/components/SelectTeamButton.tsx
src/components/TeamCard.tsx
src/components/ui/button.tsx
src/components/ui/card.tsx
src/components/ui/carousel.tsx
src/components/ui/dialog.tsx
src/components/ui/input.tsx
src/components/ui/separator.tsx
src/constants/teams.ts
src/contexts/AuthContext.tsx
src/index.css
src/lib/utils.ts
src/main.tsx
src/pages/auth/Cadastro/Cadastro.tsx
src/pages/auth/ForgotPassword/ForgotPassword.tsx
src/pages/auth/Login/Login.tsx
src/pages/ChooseTeam/ChooseTeam.tsx
src/pages/Desafio/ApresentacaoDesafio.tsx
src/pages/escolherVeiculo/index.ts
src/pages/escolherVeiculo/VehicleSelectionPage.tsx
src/pages/GameSelection/components/Footer.tsx
src/pages/GameSelection/components/GameCard.tsx
src/pages/GameSelection/components/PixelHeading.tsx
src/pages/GameSelection/GameSelectionPage.tsx
src/pages/Home/HomePage.tsx
src/pages/Home/index.ts
src/pages/mapaRota/FuelModal.tsx
src/pages/mapaRota/MapComponent.tsx
src/pages/mapaRota/routesData.ts
src/pages/PauseMenu/PauseMenu.tsx
src/pages/Perfil/ChangePassword.tsx
src/pages/Perfil/CriarEquipe.tsx
src/pages/Perfil/EditarEquipe.tsx
src/pages/Perfil/EditarPerfil.tsx
src/pages/Perfil/ExcluirEquipe.tsx
src/pages/Perfil/PerfilPage.tsx
src/pages/Ranking/RankingPage.tsx
src/pages/Tutorial/TutorialPage.tsx
src/styles/pixelArt.css
src/types/index.ts
src/types/vehicle.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".env.example">
VITE_API_URL=http://localhost:8000
</file>

<file path=".repomixignore">
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Build outputs
build/
dist/
out/
.next/
.nuxt/
.output/
.vercel/
.netlify/

# Cache directories
.cache/
.parcel-cache/
.tmp/
.temp/
.vite/
.turbo/

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE/Editor files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
logs/
*.log

# Test coverage
coverage/
.nyc_output/
.coverage/

# Package manager lock files (mantém apenas um)
# package-lock.json
# yarn.lock
# pnpm-lock.yaml

# Assets grandes (imagens, vídeos, fontes)
*.png
*.jpg
*.jpeg
*.gif
*.svg
*.ico
*.webp
*.mp4
*.avi
*.mov
*.wmv
*.flv
*.woff
*.woff2
*.ttf
*.eot
*.otf

# Documentação (se não for essencial)
README.md
CHANGELOG.md
LICENSE
*.md

# Configurações não essenciais
.prettierrc*
.eslintrc*
.stylelintrc*
.editorconfig
.gitignore
.gitattributes
tailwind.config.js
postcss.config.js
vite.config.*
webpack.config.*
rollup.config.*
babel.config.*
jest.config.*
cypress.json
playwright.config.*

# Testes (se não quiser incluir)
# __tests__/
# **/*.test.*
# **/*.spec.*
# cypress/
# e2e/

# Storybook
.storybook/
storybook-static/

# Tipos gerados automaticamente
*.d.ts

# Arquivos de exemplo/demo
examples/
demo/
docs/
documentation/

# Mapas de source
*.map

# Arquivos de rotas específicos (dados de path grandes)
src/pages/mapaRota/paths/route1Path.ts
src/pages/mapaRota/paths/route2Path.ts
src/pages/mapaRota/paths/route3Path.ts
src/pages/mapaRota/paths/route4Path.ts

# Ou se quiser ignorar todos os paths dessa pasta:
# src/pages/mapaRota/paths/
</file>

<file path="src/api/teamService.ts">
// src/api/teamService.ts
import api from './config';
import { Team, TeamCreationData } from '../types';

export const TeamService = {
  // Busca a lista de todas as equipes
  async getTeams(): Promise<Team[]> {
    const response = await api.get('/equipes/');
    return response.data;
  },

  // Cria uma nova equipe
  async createTeam(data: TeamCreationData): Promise<Team> {
    const response = await api.post('/equipes/', data);
    return response.data;
  },

  // Faz o usuário atual entrar em uma equipe via código
  async joinTeam(code: string): Promise<{ detail: string }> {
    const response = await api.post('/equipes/entrar/', { codigo: code });
    return response.data;
  }
};
</file>

<file path="src/components/ui/carousel.tsx">
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="src/components/ui/dialog.tsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 opacity-80 transition-all duration-300 ease-in-out
               hover:scale-110 rounded-md text bg-red-600  ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <h1 className="font-pixel text-sm text-white" >X</h1>
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="src/pages/escolherVeiculo/index.ts">
export { VehicleSelectionPage } from './VehicleSelectionPage';
</file>

<file path="src/pages/PauseMenu/PauseMenu.tsx">
import { useNavigate } from "react-router-dom";
import { 
  Play, 
  User, 
  RotateCcw
} from 'lucide-react';

interface PauseMenuProps {
  isVisible: boolean;
  onResume: () => void;
  onGoToProfile?: () => void;
  onRestart?: () => void;
}

export const PauseMenu = ({ 
  isVisible, 
  onResume,
  onGoToProfile,
  onRestart
}: PauseMenuProps) => {
  const navigate = useNavigate();

  if (!isVisible) return null;

  const handleGoToProfile = () => {
    if (onGoToProfile) {
      onGoToProfile();
    } else {
      navigate("/perfil");
    }
  };

  const silkscreenFont = "[font-family:'Silkscreen',Helvetica]";
  const titleStyle = {
    color: "#E3922A",
    textShadow: "2px 3px 0.6px #000"
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
      <div className="w-full h-full [background:linear-gradient(180deg,rgba(57,189,248,0.9)_0%,rgba(154,102,248,0.9)_100%)] relative overflow-hidden flex items-center justify-center">
        
        {}
        <img
          className="w-[300px] h-[120px] absolute top-[100px] left-[50px] object-cover animate-float-right opacity-40"
          alt="Cloud decoration"
          src="/nuvemleft.png"
        />
        <img
          className="w-[350px] h-[140px] absolute bottom-[50px] right-[50px] object-cover animate-float-left opacity-40"
          alt="Cloud decoration"
          src="/nuvemright.png"
        />

        {/* Menu principal */}
        <div className="border-4 border-solid border-black rounded-lg overflow-hidden bg-white shadow-[8px_8px_0px_0px_rgba(0,0,0,1)] max-w-md w-full mx-4 relative z-10">
          <div className="p-6">
            
            {/* Título */}
            <div className="text-center mb-6">
              <h1 className={`${silkscreenFont} text-3xl font-bold`} style={titleStyle}>
                JOGO PAUSADO
              </h1>
              <div className="w-full h-1 bg-black mt-2"></div>
            </div>

            {/* Botões principais */}
            <div className="space-y-4">
              
              {/* Continuar Jogo */}
              <button
                onClick={onResume}
                className={`${silkscreenFont} w-full py-4 text-lg font-bold bg-green-500 hover:bg-green-600 text-white border-2 border-black rounded-md shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] hover:shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] active:shadow-none active:translate-x-[2px] active:translate-y-[2px] transition-all flex items-center justify-center`}
              >
                <Play size={20} className="mr-2" />
                CONTINUAR
              </button>

              {/* Grid de opções */}
              <div className="grid grid-cols-2 gap-4">
                
                {/* Perfil */}
                <button
                  onClick={handleGoToProfile}
                  className={`${silkscreenFont} py-4 text-sm font-bold bg-blue-500 hover:bg-blue-600 text-white border-2 border-black rounded-md shadow-[3px_3px_0px_0px_rgba(0,0,0,1)] hover:shadow-[1px_1px_0px_0px_rgba(0,0,0,1)] active:shadow-none active:translate-x-[2px] active:translate-y-[2px] transition-all flex flex-col items-center`}
                >
                  <User size={20} className="mb-1" />
                  PERFIL
                </button>

                {/* Reiniciar */}
                {onRestart && (
                  <button
                    onClick={onRestart}
                    className={`${silkscreenFont} py-4 text-sm font-bold bg-orange-500 hover:bg-orange-600 text-white border-2 border-black rounded-md shadow-[3px_3px_0px_0px_rgba(0,0,0,1)] hover:shadow-[1px_1px_0px_0px_rgba(0,0,0,1)] active:shadow-none active:translate-x-[2px] active:translate-y-[2px] transition-all flex flex-col items-center`}
                  >
                    <RotateCcw size={20} className="mb-1" />
                    REINICIAR
                  </button>
                )}
              </div>
            </div>

            {/* Dica */}
            <div className="text-center mt-6">
              <p className={`${silkscreenFont} text-xs text-gray-600`}>
                Pressione ESC para pausar/despausar
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PauseMenu;
</file>

<file path="docker-compose.yml">
services:
  frontend:
    build: .
    ports:
      - "5173:5173"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    stdin_open: true
    tty: true
    command: npm run dev -- --host 0.0.0.0
</file>

<file path="Dockerfile">
# Usa a imagem oficial do Node.js
FROM node:23-alpine3.20

# Define o diretório de trabalho dentro do container
WORKDIR /app


# Copia os arquivos de configuração do projeto
COPY package*.json ./
COPY vite.config.ts ./

# Instala as dependências
 RUN npm install

# # Copia o restante dos arquivos do projeto
 COPY . .

# # Expõe a porta que o Vite usa por padrão
 EXPOSE 5173

# # Comando para iniciar o servidor de desenvolvimento
 CMD ["npm", "run", "dev"]
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="src/api/gameService.ts">
// src/api/gameService.ts
import api from './config';
import { Map } from '../types';

interface EventResponse {
  id: number;
  partida: number;
  evento: {
    id: number;
    nome: string;
    descricao: string;
    tipo: 'positivo' | 'negativo';
    chance_base: number;
    opcoes: Array<{
      id: number;
      descricao: string;
      efeitos: any;
    }>;
  };
  momento: string;
  ordem: number;
  opcao_escolhida: null;
}

interface PartidaResponse {
  id: number;
  saldo: number;
  combustivel_atual: number;
  quantidade_carga: number;
  condicao_veiculo: number;
  estresse_motorista: number;
  tempo_real: number;
  pontuacao: number;
  distancia_percorrida: number;
}

interface RespondResponse {
  detail: string;
  partida: PartidaResponse;
}

export const GameService = {
  async getMaps(): Promise<Map[]> {
    const response = await api.get('/jogo1/mapas/');
    return response.data;
  },

  async getVehicles(): Promise<any[]> {
    const response = await api.get('/jogo1/veiculos/');
    return response.data;
  },

  async getNextEvent(): Promise<EventResponse> {
    const response = await api.get<EventResponse>('/jogo1/proximo-evento/');
    return response.data;
  },

  async respondToEvent(optionId: number): Promise<RespondResponse> {
    const response = await api.post<RespondResponse>('/jogo1/eventos/responder/', {
      opcao_id: optionId
    });
    return response.data;
  },

  async getActiveGame(): Promise<PartidaResponse> {
    const response = await api.get<PartidaResponse>('/jogo1/partidas/ativa/');
    return response.data;
  },

  async createGame(gameData: { mapa: number; rota: number; veiculo: number }): Promise<PartidaResponse> {
    const response = await api.post<PartidaResponse>('/jogo1/partidas/', gameData);
    return response.data;
  },

  async pauseGame(): Promise<{ detail: string }> {
    const response = await api.post<{ detail: string }>('/jogo1/partidas/pausar/');
    return response.data;
  },

  async resumeGame(): Promise<{ detail: string }> {
    const response = await api.post<{ detail: string }>('/jogo1/partidas/continuar/');
    return response.data;
  },

  async syncGameProgress(progressData: { tempo_decorrido_segundos: number }): Promise<PartidaResponse> {
    const response = await api.post<PartidaResponse>('/jogo1/partidas/sincronizar/', progressData);
    return response.data;
  }
};
</file>

<file path="src/components/CreateTeamButton.tsx">
import React from 'react';
import { Plus } from 'lucide-react';

interface CreateTeamButtonProps {
  onClick: () => void;
}

const CreateTeamButton: React.FC<CreateTeamButtonProps> = ({ onClick }) => {
  return (
    <div 
      onClick={onClick} 
      className=" bg-white border-2 border-black rounded-lg p-6 flex flex-col items-center justify-center h-22 cursor-pointer 
        hover:shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] transition-all hover:-translate-x-[2px] hover:-translate-y-[2px]"
    >
      <div className="w-8 h-8 rounded-full border-2 border-cyan-400 flex items-center justify-center">
        <Plus size={32} className="text-cyan-400" />
      </div>
      <span className="font-pixel text-cyan-400 text-center mt-4">CRIAR NOVA EQUIPE</span>
    </div>
  );
};

export default CreateTeamButton;
</file>

<file path="src/components/ProtectedRoute.tsx">
import { Navigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { ReactNode } from 'react';

interface ProtectedRouteProps {
  children: ReactNode;
  redirectTo?: string;
}

export const ProtectedRoute: React.FC<ProtectedRouteProps> = ({
  children,
  redirectTo = '/login'
}) => {
  const { isAuthenticated, loading } = useAuth();

  // Se ainda estiver carregando, mostra um indicador de carregamento
  if (loading) {
    return (
      <div className="flex h-screen items-center justify-center bg-gradient-to-b from-sky-300 to-purple-400">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-black mx-auto mb-4"></div>
          <p className="[font-family:'Silkscreen',Helvetica] text-black text-lg">CARREGANDO...</p>
        </div>
      </div>
    );
  }

  // Se não estiver autenticado, redireciona para o login
  if (!isAuthenticated) {
    return <Navigate to={redirectTo} replace />;
  }

  // Se estiver autenticado, renderiza os componentes filhos
  return <>{children}</>;
};

export default ProtectedRoute;
</file>

<file path="src/components/SelectTeamButton.tsx">
import React from 'react';

interface SelectTeamButtonProps {
  onClick: () => void;
}

const SelectTeamButton: React.FC<SelectTeamButtonProps> = ({ onClick }) => {
  return (
    <button 
      onClick={onClick}
      className="w-[500px] mx-auto bg-orange-500 text-black font-bold py-2 px-6 border-2 border-black mb-2
        hover:shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] transition-all 
        hover:-translate-x-[2px] hover:-translate-y-[2px] text-xl"
    >
      ESCOLHER ESSA EQUIPE
    </button>

  );
};

export default SelectTeamButton;
</file>

<file path="src/components/TeamCard.tsx">
import React from 'react';
import { Team } from '../types';
import { Users, Trophy, Truck, ListChecks } from 'lucide-react';
import clsx from 'clsx';

interface TeamCardProps {
  team: Team;
  onClick?: (id: string) => void;
  selected?: boolean;
}

const TeamCard: React.FC<TeamCardProps> = ({ team, onClick, selected }) => {
  return (
    <div 
      className={clsx(
        'p-4 border-2 border-black transition-all cursor-pointer bg-white',
        'hover:shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]',
        'hover:-translate-x-[2px] hover:-translate-y-[2px]',
        selected ? 'ring-4 ring-yellow-400' : ''
      )}
      onClick={() => onClick && onClick(team.id)}
    >
      <div className="flex items-start">
        {/* Main Team Info */}
        <div className="flex items-start space-x-4">
          <div className="w-16 h-16 bg-gray-300 border-2 border-black"></div>
          <div className="flex-1">
            <h3 className="font-pixel text-xl font-bold">{team.name}</h3>
            <div className="flex space-x-4 mt-2">
              <div className="flex items-center space-x-1">
                <Users size={18} />
                <span className="font-pixel">{team.stats.people}</span>
              </div>
              
              <div className="flex items-center space-x-1">
                <Trophy size={18} />
                <span className="font-pixel">{team.stats.trophy}</span>
              </div>
              
              {team.stats.trucks && (
                <div className="flex items-center space-x-1">
                  <Truck size={18} />
                  <span className="font-pixel">{team.stats.trucks}</span>
                </div>
              )}
              
              {team.stats.tasks && (
                <div className="flex items-center space-x-1">
                  <ListChecks size={18} />
                  <span className="font-pixel">{team.stats.tasks}</span>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* History Cards */}
        {team.history && (
          <div className="flex ml-auto gap-2 w-[850px]">
            {team.history.map((historyItem) => (
              <div
                key={historyItem.id}
                className={clsx(
                  'p-2 border-2 border-black flex-1',
                  historyItem.color
                )}
              >
                <h4 className="font-pixel text-sm font-bold mb-2">{historyItem.name}</h4>
                <div className="flex flex-wrap gap-2">
                  <div className="flex items-center space-x-1">
                    <Users size={14} />
                    <span className="font-pixel text-sm">{historyItem.stats.people}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <Trophy size={14} />
                    <span className="font-pixel text-sm">{historyItem.stats.trophy}</span>
                  </div>
                  {historyItem.stats.tasks && (
                    <div className="flex items-center space-x-1">
                      <ListChecks size={14} />
                      <span className="font-pixel text-sm">{historyItem.stats.tasks}</span>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default TeamCard;
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="src/components/ui/separator.tsx">
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="src/constants/teams.ts">
import { Team } from '../types';

export const TEAMS: Team[] = [
  {
    id: 'team1',
    name: 'ENTREGA RÁPIDA',
    stats: {
      people: 4,
      trophy: 25,
    },
    selected: false,
    history: [
      {
        id: 'history1',
        name: 'ENTREGA EFICIENTE',
        stats: {
          people: 3,
          trophy: 15,
          tasks: 4
        },
        color: 'bg-yellow-500'
      },
      {
        id: 'history2',
        name: 'JOGO 2',
        stats: {
          people: 2,
          trophy: 10,
          tasks: 3
        },
        color: 'bg-cyan-500'
      },
      {
        id: 'history3',
        name: 'JOGO 3',
        stats: {
          people: 2,
          trophy: 5,
          tasks: 1
        },
        color: 'bg-emerald-500'
      }
    ]
  },
  {
    id: 'team2',
    name: 'FRUIT VALE',
    stats: {
      people: 4,
      trophy: 5,
      trucks: 3
    },
    selected: false,
    history: [
      {
        id: 'history1',
        name: 'ENTREGA EFICIENTE',
        stats: {
          people: 3,
          trophy: 15,
          tasks: 4
        },
        color: 'bg-yellow-500'
      },
      {
        id: 'history2',
        name: 'JOGO 2',
        stats: {
          people: 2,
          trophy: 10,
          tasks: 3
        },
        color: 'bg-cyan-500'
      },
      {
        id: 'history3',
        name: 'JOGO 3',
        stats: {
          people: 2,
          trophy: 5,
          tasks: 1
        },
        color: 'bg-emerald-500'
      }
    ]
  }
];
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/pages/Desafio/ApresentacaoDesafio.tsx">
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "../../components/ui/button";
import { ArrowLeft, Home, Trophy, Clock, Users, Truck, Car } from 'lucide-react';
import { ButtonHomeBack } from "@/components/ButtonHomeBack";

// Desafio Mocado
const desafioMocado = {
  id: "desafio-001",
  titulo: "DESAFIO DE ENTREGA: JUAZEIRO A SALVADOR!",
  descricao: "PREPARE-SE, ESTRATEGISTA! SUA PERÍCIA EM LOGÍSTICA ESTÁ EM JOGO. SUA MISSÃO: TRANSPORTAR 40 CAIXAS DE MADEIRA DE JUAZEIRO DIRETAMENTE PARA SALVADOR.",
  objetivo: "CHEGAR AO DESTINO COM A MAIOR QUANTIDADE DE DINHEIRO POSSÍVEL NO BOLSO!",
  ferramentas: [
    { tipo: "CARRO", descricao: "ÁGIL PARA MANOBRAR E COM BAIXO CONSUMO, MAS QUANTAS VIAGENS SERÃO NECESSÁRIAS PARA LEVAR TODA A CARGA?" },
    { tipo: "CAMINHÃO PEQUENO", descricao: "UM BOM EQUILÍBRIO ENTRE CAPACIDADE E CUSTOS PARA ENTREGAS MENORES." },
    { tipo: "CAMINHÃO MÉDIO", descricao: "LEVA UMA CARGA CONSIDERÁVEL, IDEAL PARA OTIMIZAR O NÚMERO DE VIAGENS." },
    { tipo: "CARRETA", descricao: "CAPACIDADE MÁXIMA! LEVA TUDO DE UMA VEZ, MAS ATENÇÃO AOS CUSTOS DE COMBUSTÍVEL E POSSÍVEIS PEDÁGIOS." }
  ],
  dificuldade: "MÉDIO",
  tempoLimite: "8 HORAS",
  minJogadores: 1,
  maxJogadores: 4,
  imagem: "/desafio.png"
};

export const ApresentacaoDesafioPage = () => {
  const navigate = useNavigate();
  const [carregando, setCarregando] = useState(false);

  const handleAceitarDesafio = () => {
    setCarregando(true);
    // Simulando um tempo de carregamento
    setTimeout(() => {
      setCarregando(false);
      navigate("/select-vehicle"); // Rota para iniciar o desafio
    }, 1500);
  };

  const getVehicleIcon = (tipo: string) => {
    switch (tipo) {
      case 'CARRO':
        return <Car size={18} className="text-[#e3922a] mr-2 flex-shrink-0" />;
      default:
        return <Truck size={18} className="text-[#e3922a] mr-2 flex-shrink-0" />;
    }
  };

  return (
    <div className="bg-white flex flex-row justify-center w-full">
      <div className="w-full min-h-screen [background:linear-gradient(180deg,rgba(32,2,89,1)_0%,rgba(121,70,213,1)_100%)] relative overflow-hidden z-10">
        {/* Decoração de nuvens */}
        <img
          className="w-[375px] h-[147px] absolute top-[120px] left-[157px] object-cover animate-float-right opacity-50 -z-10 "
          alt="Cloud decoration"
          src="/nuvemleft.png"
        />
        <img
          className="w-[436px] h-[170px] absolute bottom-[30px] right-[27px] -z-10 object-cover animate-float-left opacity-50 scale-110"
          alt="Cloud decoration"
          src="/nuvemright.png"
        />

        {/* Botões de navegação */}
        <div className="flex gap-5 absolute top-4 left-4 z-10">
          <ButtonHomeBack onClick={() => navigate(-1)}><ArrowLeft/></ButtonHomeBack>
          <ButtonHomeBack onClick={() => navigate("/perfil")}><Home/></ButtonHomeBack>
        </div>

        {/* Conteúdo principal */}
        <div className="pt-16 pb-8 px-4 flex justify-center items-center min-h-screen z-10">
          <div className="bg-white rounded-[18px] border-2 border-solid border-black shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] w-full max-w-[1000px] max-h-[85vh] overflow-hidden flex flex-col">
            {/* Cabeçalho fixo */}
            <div className="p-4 border-b-2 border-black bg-gray-50">
              <h1 className="text-center text-[22px] [font-family:'Silkscreen',Helvetica] font-bold text-[#e3922a]">
                {desafioMocado.titulo}
              </h1>
            </div>
            
            {/* Conteúdo scrollável */}
            <div className="overflow-y-auto p-4 flex-1">
              {/* Imagem principal */}
              <div className="border-2 border-black rounded-lg overflow-hidden h-[200px] mb-4">
                <img 
                  src={desafioMocado.imagem} 
                  alt="Imagem do desafio" 
                  className="w-full h-full object-cover"
                  onError={(e) => {
                    // Fallback se a imagem não carregar
                    const target = e.target as HTMLImageElement;
                    target.src = "/placeholder-truck.png";
                  }}
                />
              </div>

              {/* Descrição */}
              <div className="border-2 border-black rounded-lg p-3 bg-gray-50 mb-4">
                <h3 className="[font-family:'Silkscreen',Helvetica] font-bold text-[14px] mb-2">
                  DESCRIÇÃO:
                </h3>
                <p className="[font-family:'Silkscreen',Helvetica] text-[12px]">
                  {desafioMocado.descricao}
                </p>
              </div>

              {/* Detalhes */}
              <div className="border-2 border-black rounded-lg p-3 bg-gray-50 mb-4">
                <h3 className="[font-family:'Silkscreen',Helvetica] font-bold text-[14px] mb-2">
                  DETALHES:
                </h3>
                
                <div className="grid grid-cols-2 gap-2">
                  <div className="flex items-center">
                    <Trophy size={16} className="text-[#e3922a] mr-2 flex-shrink-0" />
                    <span className="[font-family:'Silkscreen',Helvetica] text-[11px]">
                      DIFICULDADE: {desafioMocado.dificuldade}
                    </span>
                  </div>
                  
                  <div className="flex items-center">
                    <Clock size={16} className="text-[#e3922a] mr-2 flex-shrink-0" />
                    <span className="[font-family:'Silkscreen',Helvetica] text-[11px]">
                      TEMPO: {desafioMocado.tempoLimite}
                    </span>
                  </div>
                  
                  <div className="flex items-center col-span-2">
                    <Users size={16} className="text-[#e3922a] mr-2 flex-shrink-0" />
                    <span className="[font-family:'Silkscreen',Helvetica] text-[11px]">
                      JOGADORES: {desafioMocado.minJogadores}-{desafioMocado.maxJogadores}
                    </span>
                  </div>
                </div>
              </div>

              {/* Objetivo */}
              <div className="border-2 border-black rounded-lg p-3 bg-gray-50 mb-4">
                <h3 className="[font-family:'Silkscreen',Helvetica] font-bold text-[14px] mb-2 text-green-600">
                  OBJETIVO:
                </h3>
                <p className="[font-family:'Silkscreen',Helvetica] text-[12px] font-bold text-green-600">
                  {desafioMocado.objetivo}
                </p>
              </div>

              {/* Ferramentas */}
              <div className="border-2 border-dashed border-[#e3922a] rounded-lg p-3 bg-yellow-50 mb-4">
                <h3 className="[font-family:'Silkscreen',Helvetica] font-bold text-[14px] mb-2">
                  SUAS FERRAMENTAS:
                </h3>
                <div className="space-y-3">
                  {desafioMocado.ferramentas.map((ferramenta, index) => (
                    <div key={index} className="flex items-start">
                      {getVehicleIcon(ferramenta.tipo)}
                      <div>
                        <span className="[font-family:'Silkscreen',Helvetica] text-[11px] font-bold block">
                          {ferramenta.tipo}
                        </span>
                        <span className="[font-family:'Silkscreen',Helvetica] text-[10px] text-gray-700">
                          {ferramenta.descricao}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
            
            {/* Botão de ação fixo no footer */}
            <div className="p-4 border-t-2 flex justify-center border-black bg-gray-50">
              <Button 
                onClick={handleAceitarDesafio}
                disabled={carregando}
                className="w-1/2 py-3 bg-[#29D8FF] border-2 border-black rounded-md [font-family:'Silkscreen',Helvetica] font-bold text-black text-[16px] hover:bg-[#20B4D2] transform transition-transform duration-300 hover:scale-105 disabled:opacity-70 disabled:cursor-not-allowed flex items-center justify-center"
              >
                {carregando ? (
                  <>
                    <div className="animate-spin rounded-full h-5 w-5 border-4 border-white border-t-black mr-2"></div>
                    CARREGANDO...
                  </>
                ) : (
                  <>
                    <Trophy className="mr-2" size={20} />
                    ACEITAR DESAFIO
                  </>
                )}
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ApresentacaoDesafioPage;
</file>

<file path="src/pages/GameSelection/components/Footer.tsx">
import React from 'react';

const Footer: React.FC = () => {
  return (
    <footer 
      className="w-full text-center py-6 text-white text-[8px] tracking-wider opacity-70"
      style={{ fontFamily: "'Press Start 2P', cursive" }}
    >
      © 2025 JOGOS LOGÍSTICOS - TODOS OS DIREITOS RESERVADOS
    </footer>
  );
};

export default Footer;
</file>

<file path="src/pages/GameSelection/components/GameCard.tsx">
import React from 'react';

interface GameCardProps {
  title: string;
  description: string;
  isActive: boolean;
  onClick: () => void;
  borderColor: string;
  buttonBgColor: string;
  buttonHoverColor: string;
  icon: React.ReactNode;
}

const GameCard: React.FC<GameCardProps> = ({ 
  title, 
  description, 
  isActive, 
  onClick,
  borderColor,
  buttonBgColor,
  buttonHoverColor,
  icon
}) => {
  return (
    <div 
      className={`
        bg-white overflow-hidden transition-all duration-300 flex flex-col hover:opacity-100 hover:scale-100
        border-t-4 ${borderColor} 
        ${isActive ? 'opacity-100 scale-100' : 'opacity-50 scale-95'}
      `}
      onClick={onClick}
      style={{ fontFamily: "'Press Start 2P', cursive" }}
    >
      <div className="bg-gray-300 aspect-video flex items-center justify-center">
        <div className={`${isActive ? 'text-gray-700' : 'text-gray-400'}`}>
          {icon}
        </div>
      </div>
      
      <div className="p-6 flex-grow">
        <h3 className={`text-center font-bold text-sm mb-4 leading-relaxed ${isActive ? 'text-black' : 'text-gray-400'}`}>
          {title}
        </h3>
        
        <p className={`text-center text-[8px] leading-relaxed ${isActive ? 'text-black' : 'text-gray-400'}`}>
          {description}
        </p>
      </div>
      
      <div className="p-4">
        <button 
          className={`
            w-full py-3 text-center text-sm
            transition-colors duration-200
            ${buttonBgColor} ${buttonHoverColor}
            ${isActive ? 'text-black' : 'text-gray-500'}
          `}
        >
          JOGAR
        </button>
      </div>
    </div>
  );
};

export default GameCard;
</file>

<file path="src/pages/GameSelection/components/PixelHeading.tsx">
import React from 'react';

interface PixelHeadingProps {
  text: string;
  className?: string;
}

const PixelHeading: React.FC<PixelHeadingProps> = ({ text, className = '' }) => {
  return (
    <h1 
      className={`
        text-3xl md:text-4xl text-white tracking-widest uppercase
        drop-shadow-xl
        ${className}
      `}
      style={{ fontFamily: "'Press Start 2P', cursive" }}
    >
      {text.split('').map((char, index) => (
        <span 
          key={index} 
          className="inline-block transform transition-all duration-200 hover:scale-110 hover:text-yellow-300"
          style={{ padding: '0 0.05em' }}
        >
          {char === ' ' ? '\u00A0' : char}
        </span>
      ))}
    </h1>
  );
};

export default PixelHeading;
</file>

<file path="src/pages/Home/index.ts">
export { HomePage } from "./HomePage";
</file>

<file path="src/pages/Perfil/ChangePassword.tsx">
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../contexts/AuthContext";
import { Button } from "../../components/ui/button";
import { Card, CardContent } from "../../components/ui/card";
import { Eye, EyeOff, ArrowLeft, Lock } from 'lucide-react';

export const ChangePassword = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  
  const [formData, setFormData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });
  
  const [showPasswords, setShowPasswords] = useState({
    current: false,
    new: false,
    confirm: false
  });
  
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isLoading, setIsLoading] = useState(false);
  const [successMessage, setSuccessMessage] = useState('');

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // Limpar erro específico quando usuário começar a digitar
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
    // Limpar mensagem de sucesso
    if (successMessage) {
      setSuccessMessage('');
    }
  };

  const togglePasswordVisibility = (field: 'current' | 'new' | 'confirm') => {
    setShowPasswords(prev => ({ ...prev, [field]: !prev[field] }));
  };

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    // Validar senha atual
    if (!formData.currentPassword) {
      newErrors.currentPassword = 'Senha atual é obrigatória';
    }

    // Validar nova senha
    if (!formData.newPassword) {
      newErrors.newPassword = 'Nova senha é obrigatória';
    } else if (formData.newPassword.length < 8) {
      newErrors.newPassword = 'Nova senha deve ter pelo menos 8 caracteres';
    } else if (formData.newPassword === formData.currentPassword) {
      newErrors.newPassword = 'Nova senha deve ser diferente da atual';
    }

    // Validar confirmação
    if (!formData.confirmPassword) {
      newErrors.confirmPassword = 'Confirmação de senha é obrigatória';
    } else if (formData.newPassword !== formData.confirmPassword) {
      newErrors.confirmPassword = 'Senhas não conferem';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;

    setIsLoading(true);
    setErrors({});

    try {

      // Simulando uma chamada API
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Simular sucesso
      setSuccessMessage('Senha alterada com sucesso!');
      setFormData({ currentPassword: '', newPassword: '', confirmPassword: '' });
      
      // Redirecionar após 2 segundos
      setTimeout(() => {
        navigate('/perfil');
      }, 2000);

    } catch (error) {
      // Tratar diferentes tipos de erro
      setErrors({ 
        currentPassword: 'Senha atual incorreta' 
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleGoBack = () => {
    navigate('/perfil');
  };

  const titleStyle = {
    color: "#E3922A",
    textShadow: "2px 3px 0.6px #000"
  };

  return (
    <div className="bg-white flex flex-row justify-center w-full h-screen overflow-hidden">
      <div className="w-full h-full [background:linear-gradient(180deg,rgba(57,189,248,1)_0%,rgba(154,102,248,1)_100%)] relative overflow-hidden">
        
        {}
        <img
          className="w-[375px] h-[147px] absolute top-[120px] left-[157px] object-cover animate-float-right"
          alt="Cloud decoration"
          src="/nuvemleft.png"
        />
        <img
          className="w-[436px] h-[170px] absolute bottom-[30px] right-[27px] object-cover animate-float-left opacity-75 scale-110"
          alt="Cloud decoration"
          src="/nuvemright.png"
        />

        {/* Main content */}
        <div className="max-w-md mx-auto py-8 px-4 relative z-10 h-full flex flex-col justify-center">
          
          {/* Back button */}
          <Button
            variant="outline"
            onClick={handleGoBack}
            className="mb-2 border-2 border-black bg-white hover:bg-gray-100"
          >
            <ArrowLeft size={20} className="mr-2" />
            <span className="[font-family:'Silkscreen',Helvetica] font-bold">VOLTAR</span>
          </Button>

          <Card className="border-2 border-solid border-black rounded-lg overflow-hidden">
            <CardContent className="p-4">
              
              {/* Header */}
              <div className="text-center mb-4">
                <div className="w-12 h-12 mx-auto mb-3 bg-orange-100 rounded-full flex items-center justify-center border-2 border-orange-500">
                  <Lock size={24} className="text-orange-500" />
                </div>
                <h2 className="[font-family:'Silkscreen',Helvetica] font-bold text-xl" style={titleStyle}>
                  ALTERAR SENHA
                </h2>
                <p className="[font-family:'Silkscreen',Helvetica] text-xs mt-1 text-gray-600">
                  Olá, {user?.first_name || user?.username}! Altere sua senha abaixo.
                </p>
              </div>

              {/* Success message */}
              {successMessage && (
                <div className="mb-4 p-3 bg-green-100 border-2 border-green-500 rounded-lg text-center">
                  <span className="[font-family:'Silkscreen',Helvetica] text-green-700 font-bold">
                    {successMessage}
                  </span>
                </div>
              )}

              {/* Form */}
              <form onSubmit={handleSubmit} className="space-y-3">
                
                {/* Current Password */}
                <div>
                  <label className="[font-family:'Silkscreen',Helvetica] text-sm font-bold block mb-2">
                    SENHA ATUAL *
                  </label>
                  <div className="relative">
                    <input
                      type={showPasswords.current ? "text" : "password"}
                      value={formData.currentPassword}
                      onChange={(e) => handleInputChange('currentPassword', e.target.value)}
                      className="w-full px-3 py-2 border-2 border-black rounded focus:outline-none focus:border-orange-500 [font-family:'Silkscreen',Helvetica]"
                      placeholder="Digite sua senha atual"
                      disabled={isLoading}
                    />
                    <button
                      type="button"
                      onClick={() => togglePasswordVisibility('current')}
                      className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 bg-transparent border-0 outline-0 shadow-none focus:outline-0 focus:shadow-none focus:ring-0 active:outline-0 active:shadow-none"
                      style={{ boxShadow: 'none', outline: 'none' }}
                      disabled={isLoading}
                    >
                      {showPasswords.current ? <EyeOff size={20} /> : <Eye size={20} />}
                    </button>
                  </div>
                  {errors.currentPassword && (
                    <span className="text-red-500 text-xs [font-family:'Silkscreen',Helvetica] mt-1 block">
                      {errors.currentPassword}
                    </span>
                  )}
                </div>

                {/* New Password */}
                <div>
                  <label className="[font-family:'Silkscreen',Helvetica] text-sm font-bold block mb-2">
                    NOVA SENHA *
                  </label>
                  <div className="relative">
                    <input
                      type={showPasswords.new ? "text" : "password"}
                      value={formData.newPassword}
                      onChange={(e) => handleInputChange('newPassword', e.target.value)}
                      className="w-full px-3 py-2 border-2 border-black rounded focus:outline-none focus:border-orange-500 [font-family:'Silkscreen',Helvetica]"
                      placeholder="Digite sua nova senha"
                      disabled={isLoading}
                    />
                    <button
                      type="button"
                      onClick={() => togglePasswordVisibility('new')}
                      className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 bg-transparent border-0 outline-0 shadow-none focus:outline-0 focus:shadow-none focus:ring-0 active:outline-0 active:shadow-none"
                      style={{ boxShadow: 'none', outline: 'none' }}
                      disabled={isLoading}
                    >
                      {showPasswords.new ? <EyeOff size={20} /> : <Eye size={20} />}
                    </button>
                  </div>
                  {errors.newPassword && (
                    <span className="text-red-500 text-xs [font-family:'Silkscreen',Helvetica] mt-1 block">
                      {errors.newPassword}
                    </span>
                  )}
                  <span className="text-gray-500 text-xs [font-family:'Silkscreen',Helvetica] mt-1 block">
                    Mínimo de 8 caracteres
                  </span>
                </div>

                {/* Confirm Password */}
                <div>
                  <label className="[font-family:'Silkscreen',Helvetica] text-sm font-bold block mb-2">
                    CONFIRMAR NOVA SENHA *
                  </label>
                  <div className="relative">
                    <input
                      type={showPasswords.confirm ? "text" : "password"}
                      value={formData.confirmPassword}
                      onChange={(e) => handleInputChange('confirmPassword', e.target.value)}
                      className="w-full px-3 py-2 border-2 border-black rounded focus:outline-none focus:border-orange-500 [font-family:'Silkscreen',Helvetica]"
                      placeholder="Confirme sua nova senha"
                      disabled={isLoading}
                    />
                    <button
                      type="button"
                      onClick={() => togglePasswordVisibility('confirm')}
                      className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 bg-transparent border-0 outline-0 shadow-none focus:outline-0 focus:shadow-none focus:ring-0 active:outline-0 active:shadow-none"
                      style={{ boxShadow: 'none', outline: 'none' }}
                      disabled={isLoading}
                    >
                      {showPasswords.confirm ? <EyeOff size={20} /> : <Eye size={20} />}
                    </button>
                  </div>
                  {errors.confirmPassword && (
                    <span className="text-red-500 text-xs [font-family:'Silkscreen',Helvetica] mt-1 block">
                      {errors.confirmPassword}
                    </span>
                  )}
                </div>

                {/* Submit Button */}
                <Button
                  type="submit"
                  disabled={isLoading}
                  className="w-full bg-orange-400 text-black hover:bg-orange-500 h-10 border-2 border-black [font-family:'Silkscreen',Helvetica] font-bold mt-4"
                >
                  {isLoading ? (
                    <div className="flex items-center justify-center">
                      <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-black mr-2"></div>
                      ALTERANDO...
                    </div>
                  ) : (
                    'ALTERAR SENHA'
                  )}
                </Button>

              </form>

            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default ChangePassword;
</file>

<file path="src/pages/Perfil/EditarEquipe.tsx">
import { useNavigate } from "react-router-dom";
import { useState } from "react";
import { Button } from "../../components/ui/button"; 
import {
  Card,
  CardContent,
} from "../../components/ui/card"; 
import {
  ArrowLeft,
  Copy,
  UserPlus,
  Settings,
  Crown,
  Shield,
  User,
} from 'lucide-react';

interface TeamMember {
  id: string;
  name: string;
  level: number;
  xp: number;
  avatar: string;
  role: 'ADMIN' | 'VICE_LIDER' | 'MEMBRO';
}

interface TeamData {
  name: string;
  inviteCode: string;
  members: TeamMember[];
}

export const EditarEquipePage = () => {
  const navigate = useNavigate();
  
  const [teamData, setTeamData] = useState<TeamData>({
    name: "FRUIT VALE",
    inviteCode: "IF-12345",
    members: [
      {
        id: "1",
        name: "AURELIO DE BOA",
        level: 12,
        xp: 2450,
        avatar: "/mario.png",
        role: "ADMIN"
      },
      {
        id: "2", 
        name: "MARIAZINHA",
        level: 15,
        xp: 3412,
        avatar: "/avatar-placeholder.png",
        role: "MEMBRO"
      }
    ]
  });

  const [newMemberName, setNewMemberName] = useState("");
  const [isInviting, setIsInviting] = useState(false);

  const handleNavigateBack = () => {
    navigate(-1); 
  };

  const handleCopyInviteCode = () => {
    navigator.clipboard.writeText(teamData.inviteCode);
    alert("Código copiado!");
  };

  const handleGenerateNewCode = () => {
    const newCode = `IF-${Math.random().toString(36).substr(2, 5).toUpperCase()}`;
    setTeamData(prev => ({ ...prev, inviteCode: newCode }));
    alert("Novo código gerado!");
  };

  const handleInviteMember = () => {
    if (!newMemberName.trim()) {
      alert("Digite o nome do membro para convidar");
      return;
    }
    
    setIsInviting(true);
    
    // Simular processo de convite
    setTimeout(() => {
      console.log(`Convite enviado para: ${newMemberName}`);
      alert(`Convite enviado para ${newMemberName}!`);
      setNewMemberName("");
      setIsInviting(false);
    }, 1500);
  };

  const handleTeamNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setTeamData(prev => ({ ...prev, name: e.target.value }));
  };

  const handleSaveChanges = () => {
    console.log("Dados da equipe salvos:", teamData);
    alert("Alterações salvas!");
    navigate("/perfil/editar");
  };

  const getRoleIcon = (role: string) => {
    switch (role) {
      case 'ADMIN':
        return <Crown size={16} className="text-yellow-500" />;
      case 'VICE_LIDER':
        return <Shield size={16} className="text-blue-500" />;
      default:
        return <User size={16} className="text-gray-500" />;
    }
  };

  const getRoleColor = (role: string) => {
    switch (role) {
      case 'ADMIN':
        return 'text-yellow-600';
      case 'VICE_LIDER':
        return 'text-blue-600';
      default:
        return 'text-gray-600';
    }
  };

  const silkscreenFont = "[font-family:'Silkscreen',Helvetica]";
  const inputStyle = `bg-white border-2 border-black rounded-md p-2 w-full ${silkscreenFont} text-sm focus:outline-none focus:ring-2 focus:ring-blue-400`;
  const labelStyle = `text-xs ${silkscreenFont} mb-1 block text-black font-bold`;
  const buttonBaseStyle = `${silkscreenFont} border-2 border-black rounded-md px-4 py-2 text-xs font-bold flex items-center justify-center transition-all`;

  return (
    <div className="bg-white flex flex-row justify-center w-full">
      <div className={`w-full min-h-screen [background:linear-gradient(180deg,rgba(57,189,248,1)_0%,rgba(154,102,248,1)_100%)] relative overflow-hidden ${silkscreenFont}`}>
        {/* Decorative clouds */}
        <img
          className="w-[375px] h-[147px] absolute top-[80px] left-[calc(50%_-_650px)] object-cover animate-float-right opacity-80"
          alt="Cloud decoration left"
          src="/nuvemleft.png"
        />
        <img
          className="w-[436px] h-[170px] absolute bottom-[30px] right-[calc(50%_-_700px)] object-cover animate-float-left opacity-75 scale-110"
          alt="Cloud decoration right"
          src="/nuvemright.png"
        />

        {/* Back button */}
        <div className="absolute top-4 left-4 z-20">
          <Button onClick={handleNavigateBack} variant="outline" className="p-2 bg-white border-2 border-black rounded-md hover:bg-gray-200">
            <ArrowLeft size={24} className="text-black" />
          </Button>
        </div>
        
        {/* Main content */}
        <div className="max-w-4xl mx-auto pt-16 pb-8 px-4 relative z-10">
          <Card className="border-2 border-solid border-black rounded-lg overflow-hidden bg-white shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]">
            <CardContent className="p-6">
              {/* Header */}
              <div className="text-center mb-6">
                <h1 className={`${silkscreenFont} text-xl font-bold text-[#E3922A] border-2 border-black bg-gray-100 py-2 px-4 rounded-md inline-block`}>
                  EDITAR EQUIPE
                </h1>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Left column - Team info */}
                <div className="space-y-4">
                  {/* Team name */}
                  <div>
                    <label htmlFor="teamName" className={labelStyle}>
                      NOME DA EQUIPE
                    </label>
                    <input 
                      type="text" 
                      name="teamName" 
                      id="teamName" 
                      value={teamData.name} 
                      onChange={handleTeamNameChange}
                      className={inputStyle}
                    />
                  </div>

                  {/* Invite code */}
                  <div>
                    <label htmlFor="inviteCode" className={labelStyle}>
                      CÓDIGO DE INVITE
                    </label>
                    <div className="flex gap-2">
                      <input 
                        type="text" 
                        name="inviteCode" 
                        id="inviteCode" 
                        value={teamData.inviteCode} 
                        readOnly
                        className={`${inputStyle} flex-1`}
                      />
                      <Button 
                        onClick={handleCopyInviteCode}
                        className={`${buttonBaseStyle} bg-green-500 hover:bg-green-600 text-white shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:shadow-[1px_1px_0px_0px_rgba(0,0,0,1)]`}
                      >
                        <Copy size={14} />
                      </Button>
                      <Button 
                        onClick={handleGenerateNewCode}
                        className={`${buttonBaseStyle} bg-red-500 hover:bg-red-600 text-white shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:shadow-[1px_1px_0px_0px_rgba(0,0,0,1)]`}
                      >
                        GERAR NOVO
                      </Button>
                    </div>
                  </div>

                  {/* Team members */}
                  <div>
                    <label className={labelStyle}>
                      MEMBROS DA EQUIPE
                    </label>
                    <div className="space-y-2 max-h-60 overflow-y-auto">
                      {teamData.members.map((member) => (
                        <div key={member.id} className="flex items-center gap-3 bg-gray-50 border-2 border-black rounded-md p-3">
                          <img 
                            src={member.avatar} 
                            alt={`Avatar de ${member.name}`}
                            className="w-12 h-12 rounded-full border-2 border-black object-cover"
                          />
                          <div className="flex-1">
                            <div className="flex items-center gap-2">
                              {getRoleIcon(member.role)}
                              <span className={`${silkscreenFont} text-sm font-bold text-black`}>
                                {member.name}
                              </span>
                            </div>
                            <div className={`${silkscreenFont} text-xs text-gray-600`}>
                              NÍVEL {member.level} • XP {member.xp}
                            </div>
                          </div>
                          <div className={`${silkscreenFont} text-xs ${getRoleColor(member.role)} font-bold`}>
                            {member.role === 'VICE_LIDER' ? 'VICE-LÍDER' : member.role}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Right column - Invite member */}
                <div className="space-y-4">
                  <div>
                    <label className={`${labelStyle} mb-3`}>
                      <UserPlus size={16} className="inline mr-2" />
                      ADICIONAR MEMBRO
                    </label>
                    
                    <div className="space-y-3">
                      <input 
                        type="text" 
                        value={newMemberName} 
                        onChange={(e) => setNewMemberName(e.target.value)}
                        placeholder="NOME DO USUÁRIO"
                        className={inputStyle}
                        disabled={isInviting}
                      />
                      
                      <input 
                        type="text" 
                        placeholder="NOME DO USUÁRIO"
                        className={inputStyle}
                      />
                      
                      <input 
                        type="text" 
                        placeholder="NOME DO USUÁRIO"
                        className={inputStyle}
                      />
                      
                      <input 
                        type="text" 
                        placeholder="NOME DO USUÁRIO"
                        className={inputStyle}
                      />
                    </div>

                    <Button 
                      onClick={handleInviteMember}
                      disabled={isInviting || !newMemberName.trim()}
                      className={`${buttonBaseStyle} w-full mt-4 bg-blue-500 hover:bg-blue-600 text-white shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:shadow-[1px_1px_0px_0px_rgba(0,0,0,1)] active:shadow-none active:translate-x-[2px] active:translate-y-[2px] disabled:opacity-50 disabled:cursor-not-allowed`}
                    >
                      {isInviting ? (
                        <>
                          <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2"></div>
                          ENVIANDO...
                        </>
                      ) : (
                        <>
                          <UserPlus size={16} className="mr-2" />
                          ADICIONAR MEMBRO
                        </>
                      )}
                    </Button>
                  </div>
                </div>
              </div>

              {/* Save button */}
              <div className="flex justify-center mt-8">
                <Button 
                  onClick={handleSaveChanges}
                  className={`${buttonBaseStyle} px-8 py-3 bg-[#29D8FF] hover:bg-[#20B4D2] text-black shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:shadow-[1px_1px_0px_0px_rgba(0,0,0,1)] active:shadow-none active:translate-x-[2px] active:translate-y-[2px]`}
                >
                  <Settings size={18} className="mr-2" />
                  SALVAR ALTERAÇÕES
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default EditarEquipePage;
</file>

<file path="src/pages/Perfil/ExcluirEquipe.tsx">
import { useNavigate } from "react-router-dom";
import { useState } from "react";
import { Button } from "../../components/ui/button"; 
import {
  Card,
  CardContent,
} from "../../components/ui/card"; 
import {
  ArrowLeft,
  Trash2,
  AlertTriangle,
  Users,
  Trophy,
} from 'lucide-react';

interface TeamData {
  name: string;
  memberCount: number;
  trophies: number;
  level: number;
  adminName: string;
}

export const ExcluirEquipePage = () => {
  const navigate = useNavigate();
  
  const [teamData] = useState<TeamData>({
    name: "FRUIT VALE",
    memberCount: 5,
    trophies: 24,
    level: 12,
    adminName: "AURELIO DE BOA",
  });

  const [confirmationText, setConfirmationText] = useState("");
  const [isDeleting, setIsDeleting] = useState(false);

  const handleNavigateBack = () => {
    navigate(-1); 
  };

  const handleConfirmDelete = async () => {
    if (confirmationText.toUpperCase() !== teamData.name.toUpperCase()) {
      alert("O nome da equipe não confere. Digite exatamente como mostrado.");
      return;
    }

    setIsDeleting(true);
    
    setTimeout(() => {
      console.log("Equipe excluída");
      alert("Equipe excluída com sucesso!");
      navigate("/perfil");
    }, 2000);
  };

  const handleCancel = () => {
    navigate("/perfil/editar");
  };

  const silkscreenFont = "[font-family:'Silkscreen',Helvetica]";
  const inputStyle = `bg-white border-2 border-black rounded-md p-3 w-full ${silkscreenFont} text-sm focus:outline-none focus:ring-2 focus:ring-red-400`;
  const labelStyle = `text-sm ${silkscreenFont} mb-2 block text-black font-bold`;
  const buttonBaseStyle = `${silkscreenFont} border-2 border-black rounded-md px-6 py-3 text-sm font-bold flex items-center justify-center transition-all`;

  const isConfirmationValid = confirmationText.toUpperCase() === teamData.name.toUpperCase();

  return (
    <div className="bg-white flex flex-row justify-center w-full">
      <div className={`w-full min-h-screen [background:linear-gradient(180deg,rgba(220,53,69,1)_0%,rgba(108,117,125,1)_100%)] relative overflow-hidden ${silkscreenFont}`}>
        {}
        <img
          className="w-[375px] h-[147px] absolute top-[80px] left-[calc(50%_-_650px)] object-cover animate-float-right opacity-60"
          alt="Cloud decoration left"
          src="/nuvemleft.png"
        />
        <img
          className="w-[436px] h-[170px] absolute bottom-[30px] right-[calc(50%_-_700px)] object-cover animate-float-left opacity-55 scale-110"
          alt="Cloud decoration right"
          src="/nuvemright.png"
        />

        {}
        <div className="absolute top-4 left-4 z-20">
          <Button onClick={handleNavigateBack} variant="outline" className="p-2 bg-white border-2 border-black rounded-md hover:bg-gray-200">
            <ArrowLeft size={24} className="text-black" />
          </Button>
        </div>
        
        {}
        <div className="max-w-2xl mx-auto pt-16 pb-8 px-4 relative z-10">
          <Card className="border-2 border-solid border-black rounded-lg overflow-hidden bg-white shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]">
            <CardContent className="p-6">
              {}
              <div className="text-center mb-6">
                <div className="flex justify-center mb-4">
                  <div className="w-20 h-20 rounded-full bg-red-100 border-2 border-red-500 flex items-center justify-center">
                    <AlertTriangle size={40} className="text-red-500" />
                  </div>
                </div>
                <h1 className={`${silkscreenFont} text-2xl font-bold text-red-600 mb-2`}>
                  EXCLUIR EQUIPE
                </h1>
                <p className={`${silkscreenFont} text-sm text-gray-700`}>
                  ESTA AÇÃO NÃO PODE SER DESFEITA
                </p>
              </div>

              {}
              <div className="bg-gray-50 border-2 border-black rounded-md p-4 mb-6">
                <h3 className={`${silkscreenFont} text-lg font-bold text-black mb-3 text-center`}>
                  EQUIPE: <span className="text-red-600">{teamData.name}</span>
                </h3>
                
                <div className="grid grid-cols-3 gap-4 text-center">
                  <div className="flex flex-col items-center">
                    <Users size={24} className="text-gray-600 mb-1" />
                    <span className={`${silkscreenFont} text-xs text-gray-600`}>MEMBROS</span>
                    <span className={`${silkscreenFont} text-lg font-bold text-black`}>{teamData.memberCount}</span>
                  </div>
                  <div className="flex flex-col items-center">
                    <Trophy size={24} className="text-yellow-500 mb-1" />
                    <span className={`${silkscreenFont} text-xs text-gray-600`}>TROFÉUS</span>
                    <span className={`${silkscreenFont} text-lg font-bold text-black`}>{teamData.trophies}</span>
                  </div>
                  <div className="flex flex-col items-center">
                    <span className="text-2xl mb-1">⭐</span>
                    <span className={`${silkscreenFont} text-xs text-gray-600`}>NÍVEL</span>
                    <span className={`${silkscreenFont} text-lg font-bold text-black`}>{teamData.level}</span>
                  </div>
                </div>
              </div>

              {}
              <div className="bg-red-50 border-2 border-red-300 rounded-md p-4 mb-6">
                <div className="flex items-start">
                  <AlertTriangle size={20} className="text-red-500 mr-3 mt-1 flex-shrink-0" />
                  <div>
                    <h4 className={`${silkscreenFont} text-sm font-bold text-red-700 mb-2`}>
                      ATENÇÃO: AO EXCLUIR A EQUIPE
                    </h4>
                    <ul className={`${silkscreenFont} text-xs text-red-600 space-y-1`}>
                      <li>• TODOS OS MEMBROS SERÃO REMOVIDOS</li>
                      <li>• TODO O PROGRESSO SERÁ PERDIDO</li>
                      <li>• OS TROFÉUS CONQUISTADOS SERÃO APAGADOS</li>
                      <li>• ESTA AÇÃO NÃO PODE SER REVERTIDA</li>
                    </ul>
                  </div>
                </div>
              </div>

              {}
              <div className="mb-6">
                <label htmlFor="confirmationText" className={labelStyle}>
                  PARA CONFIRMAR, DIGITE O NOME DA EQUIPE:
                </label>
                <div className="mb-2">
                  <span className={`${silkscreenFont} text-sm text-gray-600 bg-gray-100 px-2 py-1 rounded border`}>
                    {teamData.name}
                  </span>
                </div>
                <input 
                  type="text" 
                  name="confirmationText" 
                  id="confirmationText" 
                  value={confirmationText} 
                  onChange={(e) => setConfirmationText(e.target.value)}
                  className={inputStyle}
                  placeholder="DIGITE O NOME DA EQUIPE AQUI"
                  disabled={isDeleting}
                />
                {confirmationText && !isConfirmationValid && (
                  <p className={`${silkscreenFont} text-xs text-red-500 mt-1`}>
                    O nome não confere
                  </p>
                )}
              </div>

              {}
              <div className="flex flex-col sm:flex-row gap-3">
                <Button 
                  onClick={handleCancel}
                  disabled={isDeleting}
                  className={`${buttonBaseStyle} flex-1 bg-gray-200 hover:bg-gray-300 text-black shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:shadow-[1px_1px_0px_0px_rgba(0,0,0,1)] active:shadow-none active:translate-x-[2px] active:translate-y-[2px] disabled:opacity-50 disabled:cursor-not-allowed`}
                >
                  CANCELAR
                </Button>
                <Button 
                  onClick={handleConfirmDelete}
                  disabled={!isConfirmationValid || isDeleting}
                  className={`${buttonBaseStyle} flex-1 bg-red-500 hover:bg-red-600 text-white shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:shadow-[1px_1px_0px_0px_rgba(0,0,0,1)] active:shadow-none active:translate-x-[2px] active:translate-y-[2px] disabled:opacity-50 disabled:cursor-not-allowed disabled:shadow-none`}
                >
                  {isDeleting ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2"></div>
                      EXCLUINDO...
                    </>
                  ) : (
                    <>
                      <Trash2 size={18} className="mr-2" />
                      EXCLUIR EQUIPE
                    </>
                  )}
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default ExcluirEquipePage;
</file>

<file path="src/styles/pixelArt.css">
/* Pixel Art Styling */
@font-face {
  font-family: 'PixelFont';
  src: url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');
  font-display: swap;
}

.font-pixel {
  font-family: 'Press Start 2P', monospace;
  letter-spacing: 1px;
  line-height: 1.5;
}

/* Custom utility classes */
.hover\:scale-102:hover {
  transform: scale(1.02);
}

/* Transitions */
.transition-all {
  transition: all 0.3s ease;
}
</file>

<file path="src/types/vehicle.ts">
// Definição do tipo de veículo
export interface Vehicle {
  id: string;
  name: string;
  capacity: number;
  consumption: {
    asphalt: number;
    dirt: number;
  };
  image: string;
  maxCapacity: number;
  currentFuel: number;
  cost: number; // Custo do aluguel + motorista
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "composite": true,
    "allowSyntheticDefaultImports": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": false,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="src/api/authService.ts">
import api from './config';

// Interface para login
interface LoginCredentials {
  username: string;
  password: string;
}

// Interface para resposta do token
interface TokenResponse {
  access: string;
  refresh: string;
}

// Interface para registro
interface RegisterData {
  username: string;
  email: string;
  password: string;
  password2: string;  // Confirmação de senha
  nickname: string;
  first_name?: string;
  last_name?: string;
  data_nascimento?: string;
}

// Interface para atualização de perfil
interface UpdateProfileData {
  email?: string;
  first_name?: string;
  last_name?: string;
  data_nascimento?: string;
}

// Interface para solicitação de redefinição de senha
interface PasswordResetRequest {
  email: string;
}

// Interface para confirmação de redefinição de senha
interface PasswordResetConfirm {
  password: string;
  password2: string;
  token: string;
  uidb64: string;
}

export const AuthService = {
  // Login do usuário
  async login(credentials: LoginCredentials): Promise<TokenResponse> {
    const response = await api.post<TokenResponse>('/auth/token/', credentials);

    // Armazena os tokens no localStorage
    localStorage.setItem('token', response.data.access);
    localStorage.setItem('refreshToken', response.data.refresh);

    return response.data;
  },

  // Registro de novo usuário
  async register(userData: RegisterData) {
    return await api.post('/auth/registro/', userData);
  },

  // Logout do usuário
  logout() {
    localStorage.removeItem('token');
    localStorage.removeItem('refreshToken');
  },

  // Verifica se o usuário está autenticado
  isAuthenticated(): boolean {
    return !!localStorage.getItem('token');
  },

  // Obter perfil do usuário
  async getProfile() {
    return await api.get('/auth/perfil/');
  },

  // Atualizar perfil do usuário - CORRIGIDO: PATCH em vez de PUT
  async updateProfile(userData: UpdateProfileData) {
    return await api.patch('/auth/perfil/', userData);
  },

  // Solicitar redefinição de senha
  async requestPasswordReset(data: PasswordResetRequest) {
    return await api.post('/auth/password-reset/', data);
  },

  // Confirmar redefinição de senha
  async confirmPasswordReset(data: PasswordResetConfirm) {
    return await api.post('/auth/password-reset/confirm/', data);
  }
};

export default AuthService;
</file>

<file path="src/App.tsx">
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { HomePage } from './pages/Home';
import { VehicleSelectionPage } from './pages/escolherVeiculo';
import { MapComponent } from './pages/mapaRota/MapComponent';
import './App.css';

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="/select-vehicle" element={<VehicleSelectionPage />} />
        <Route path="/mapa-rota" element={<MapComponent />} />
        {/* Redirecionar para a página inicial por padrão */}
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </BrowserRouter>
  );
}

export default App;
</file>

<file path="src/components/ButtonHomeBack.tsx">
import { ReactNode } from 'react';

interface ButtonHomeBackProps {
    onClick: () => void;
    children: ReactNode;  
}
/// <button onClick={() => navigate(-1)} className="w-10 h-10 bg-white rounded-md items-center justify-center  flex text-black" ><div className="justify-self-center"><ArrowLeft size={25} /></div></button>
export const ButtonHomeBack = ({ 
  onClick, 
  children
}: ButtonHomeBackProps) => {
  return (
    <button 
      onClick={onClick}
      type="button"
      className="flex items-center justify-center w-14 h-14 bg-white border-2 border-black hover:shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] transition-all hover:-translate-x-[2px] hover:-translate-y-[2px]"
      aria-label="Voltar para página anterior"
    >
        <div className="justify-self-center"> 
            {children}
        </div>
    </button>
  );
};
</file>

<file path="src/components/Cloud.tsx">
import React from 'react';

interface CloudProps {
  className?: string;
  position: string;
}
// Essas nuvens são usadas para criar um efeito visual de nuvens pixeladas no fundo do jogo. 
// são menores e mais simples que as nuvens do jogo, mas nao exclui a possibilidade de serem usadas no jogo, mas atualmente 
//eelas não estão sendo utilizadas.

const Cloud: React.FC<CloudProps> = ({ className, position }) => {
  return (
    <div className={`pixel-cloud ${position} ${className}`}>
      <svg width="120" height="60" viewBox="0 0 120 60" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect x="20" y="20" width="20" height="20" fill="#B8B5FF" />
        <rect x="40" y="20" width="20" height="20" fill="#B8B5FF" />
        <rect x="60" y="20" width="20" height="20" fill="#B8B5FF" />
        <rect x="0" y="40" width="20" height="20" fill="#B8B5FF" />
        <rect x="20" y="40" width="20" height="20" fill="#B8B5FF" />
        <rect x="40" y="40" width="20" height="20" fill="#B8B5FF" />
        <rect x="60" y="40" width="20" height="20" fill="#B8B5FF" />
        <rect x="80" y="40" width="20" height="20" fill="#B8B5FF" />
        <rect x="100" y="40" width="20" height="20" fill="#B8B5FF" />
      </svg>
    </div>
  );
};

export default Cloud;
</file>

<file path="src/contexts/AuthContext.tsx">
import React, { createContext, useState, useEffect, useContext, ReactNode } from 'react';
import AuthService from '../api/authService';

interface User {
  id: number;
  username: string;
  email: string;
  nickname: string;
  first_name?: string;
  last_name?: string;
  data_nascimento?: string;
  equipe?: number; // ID da equipe, pode ser null
}

interface AuthContextType {
  user: User | null;
  loading: boolean;
  isAuthenticated: boolean;
  login: (username: string, password: string) => Promise<void>;
  logout: () => void;
  refreshUser: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType>({
  user: null,
  loading: true,
  isAuthenticated: false,
  login: async () => { },
  logout: () => { },
  refreshUser: async () => { },
});

export const useAuth = () => useContext(AuthContext);

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  // Carrega o usuário quando o componente é montado
  useEffect(() => {
    const loadUser = async () => {
      if (AuthService.isAuthenticated()) {
        try {
          await refreshUser();
        } catch (error) {
          console.error("Erro ao carregar usuário:", error);
          // Se houver erro, limpa os tokens
          AuthService.logout();
        }
      }
      setLoading(false);
    };

    loadUser();
  }, []);

  const refreshUser = async () => {
    try {
      const response = await AuthService.getProfile();
      setUser(response.data);
    } catch (error) {
      console.error("Erro ao obter perfil do usuário:", error);
      throw error;
    }
  };

  const login = async (username: string, password: string) => {
    await AuthService.login({ username, password });
    await refreshUser();
  };

  const logout = () => {
    AuthService.logout();
    setUser(null);
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        loading,
        isAuthenticated: !!user,
        login,
        logout,
        refreshUser,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export default AuthContext;
</file>

<file path="src/pages/auth/ForgotPassword/ForgotPassword.tsx">
import { useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { Button } from "../../../components/ui/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "../../../components/ui/card";
import { Input } from "../../../components/ui/input";
import { ArrowLeft, House, AlertCircle } from 'lucide-react';
import { ButtonHomeBack } from "@/components/ButtonHomeBack";
import AuthService from "../../../api/authService";

export const ForgotPassword = () => {
  const navigate = useNavigate();
  const { uidb64, token } = useParams(); // Para reset de senha
  const [step, setStep] = useState(uidb64 && token ? 2 : 1);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  const handleEmailSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!email) {
      setError("Por favor, informe seu e-mail");
      return;
    }

    setLoading(true);
    setError("");

    try {
      await AuthService.requestPasswordReset({ email });
      setSuccess("E-mail de recuperação enviado! Verifique sua caixa de entrada.");
      setTimeout(() => {
        if (!uidb64 && !token) {
          navigate('/login');
        }
      }, 3000);
    } catch (error: any) {
      if (error.response && error.response.data) {
        if (error.response.data.email) {
          setError(error.response.data.email.join(", "));
        } else if (error.response.data.detail) {
          setError(error.response.data.detail);
        } else {
          setError("Falha ao solicitar recuperação de senha.");
        }
      } else {
        setError("Erro de conexão. Tente novamente mais tarde.");
      }
    } finally {
      setLoading(false);
    }
  };

  const handlePasswordReset = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!password || !confirmPassword) {
      setError("Por favor, preencha todos os campos");
      return;
    }

    if (password !== confirmPassword) {
      setError("As senhas não conferem");
      return;
    }

    setLoading(true);
    setError("");

    try {
      await AuthService.confirmPasswordReset({
        password,
        password2: confirmPassword,
        token: token || "",
        uidb64: uidb64 || ""
      });

      setSuccess("Senha alterada com sucesso!");
      setTimeout(() => {
        navigate('/login');
      }, 2000);
    } catch (error: any) {
      if (error.response && error.response.data) {
        if (typeof error.response.data === 'object') {
          const errorMessages = Object.entries(error.response.data)
            .map(([key, value]) => `${key}: ${Array.isArray(value) ? value.join(", ") : value}`)
            .join("; ");
          setError(errorMessages);
        } else {
          setError("Falha ao redefinir senha. Verifique o link ou tente novamente.");
        }
      } else {
        setError("Erro de conexão. Tente novamente mais tarde.");
      }
    } finally {
      setLoading(false);
    }
  };

  const renderEmailScreen = () => (
    <Card className="w-[700px] h-auto rounded-[18px] border-2 border-solid border-black bg-white">
      <CardHeader className="pb-0">
        <CardTitle className="text-[35px] text-center [font-family:'Silkscreen',Helvetica] font-bold">
          ESQUECI A SENHA
        </CardTitle>
      </CardHeader>
      <CardContent className="pt-1 px-[45px]">
        {success && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4">
            {success}
          </div>
        )}

        {error && (
          <div className="text-red-500 flex items-center gap-2 mb-4">
            <AlertCircle size={20} />
            <span>{error}</span>
          </div>
        )}

        <form className="space-y-2" onSubmit={handleEmailSubmit}>
          <div className="space-y-2">
            <label
              htmlFor="email"
              className="block [font-family:'Silkscreen',Helvetica] font-bold text-black text-[32px]"
            >
              CONFIRME O EMAIL
            </label>
            <Input
              id="email"
              type="email"
              placeholder="teste@email.com"
              className="h-[55px] rounded-xl border border-solid border-black"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
            />
          </div>

          <div className="flex justify-end pt-4">
            <Button
              type="submit"
              disabled={loading}
              className="w-[274px] h-[53px] bg-[#e3922a] rounded-md [font-family:'Silkscreen',Helvetica] font-bold text-black text-[32px] hover:bg-[#e3922a] transform transition-transform duration-300 hover:scale-105"
            >
              {loading ? "ENVIANDO..." : "ENVIAR"}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );

  const renderNewPasswordScreen = () => (
    <Card className="w-[700px] h-auto rounded-[18px] border-2 border-solid border-black bg-white">
      <CardHeader className="pb-0">
        <CardTitle className="text-[35px] text-center [font-family:'Silkscreen',Helvetica] font-bold">
          NOVA SENHA
        </CardTitle>
      </CardHeader>
      <CardContent className="pt-1 px-[45px]">
        {success && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4">
            {success}
          </div>
        )}

        {error && (
          <div className="text-red-500 flex items-center gap-2 mb-4">
            <AlertCircle size={20} />
            <span>{error}</span>
          </div>
        )}

        <form className="space-y-2" onSubmit={handlePasswordReset}>
          <div className="space-y-2">
            <label
              htmlFor="newPassword"
              className="block [font-family:'Silkscreen',Helvetica] font-bold text-black text-[32px]"
            >
              NOVA SENHA
            </label>
            <Input
              id="newPassword"
              type="password"
              className="h-[55px] rounded-xl border border-solid border-black"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <label
              htmlFor="confirmPassword"
              className="block [font-family:'Silkscreen',Helvetica] font-bold text-black text-[32px]"
            >
              CONFIRME A SENHA
            </label>
            <Input
              id="confirmPassword"
              type="password"
              className="h-[55px] rounded-xl border border-solid border-black"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
            />
          </div>

          <div className="flex justify-end pt-4">
            <Button
              type="submit"
              disabled={loading}
              className="w-[274px] h-[53px] bg-[#e3922a] rounded-md [font-family:'Silkscreen',Helvetica] font-bold text-black text-[32px] hover:bg-[#e3922a] transform transition-transform duration-300 hover:scale-105"
            >
              {loading ? "ENVIANDO..." : "ALTERAR"}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );

  return (
    <div className="bg-white flex flex-row justify-center w-full">
      <div className="w-full min-h-screen [background:linear-gradient(180deg,rgba(32,2,89,1)_0%,rgba(121,70,213,1)_100%)] relative overflow-hidden">
        {/* Imagens de decoração */}
        <img
          className="w-[375px] h-[147px] absolute top-[120px] left-[157px] object-cover animate-float-right"
          alt="Cloud decoration"
          src="/nuvemleft.png"
        />
        <img
          className="w-[436px] h-[170px] absolute bottom-[30px] right-[27px] object-cover animate-float-left opacity-75 scale-110"
          alt="Cloud decoration"
          src="/nuvemright.png"
        />

        {/* Botões de navegação */}
        <div className="flex gap-5 absolute top-14 left-[33px]">
          <ButtonHomeBack onClick={() => navigate("/login")}><ArrowLeft /></ButtonHomeBack>
          <ButtonHomeBack onClick={() => navigate("/")}><House /></ButtonHomeBack>
        </div>

        {/* Conteúdo principal */}
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
          {step === 1 ? renderEmailScreen() : renderNewPasswordScreen()}
        </div>
      </div>
    </div>
  );
};

export default ForgotPassword;
</file>

<file path="src/pages/Ranking/RankingPage.tsx">
import { useNavigate, useLocation } from "react-router-dom";
import { useState } from "react";
import { Button } from "../../components/ui/button"; 
import {
  Card,
  CardContent,
} from "../../components/ui/card"; 
import {
  ArrowLeft,
  Trophy,
  TrendingUp,
  Package,
  Target,
} from 'lucide-react';

interface TeamRanking {
  position: number;
  name: string;
  points: number;
  deliveries: number;
  efficiency: number;
  icon: string;
}

interface UserStats {
  position: number;
  points: number;
  deliveries: number;
  efficiency: number;
}

export const RankingPage = () => {
  const navigate = useNavigate();
  const location = useLocation();
  
  const [activeTab, setActiveTab] = useState<'PONTOS' | 'ENTREGAS' | 'EFICIENCIA'>('PONTOS');
  
  // Verifica se veio da tela de perfil através do state da navegação
  const cameFromProfile = location.state?.from === 'profile';
  
  const userStats: UserStats = {
    position: 4,
    points: 1000,
    deliveries: 4,
    efficiency: 95
  };

  const teamRankings: TeamRanking[] = [
    {
      position: 1,
      name: "FRUIT VALE",
      points: 1200,
      deliveries: 126,
      efficiency: 98,
      icon: "🏆"
    },
    {
      position: 2,
      name: "DEU VALE",
      points: 1000,
      deliveries: 110,
      efficiency: 92,
      icon: "🥈"
    },
    {
      position: 3,
      name: "DEU MOLE",
      points: 999,
      deliveries: 99,
      efficiency: 89,
      icon: "🥉"
    },
    {
      position: 4,
      name: "É VAPO",
      points: 935,
      deliveries: 95,
      efficiency: 100,
      icon: "4"
    },
    {
      position: 5,
      name: "SCAN AI",
      points: 940,
      deliveries: 60,
      efficiency: 100,
      icon: "5"
    },
    {
      position: 6,
      name: "SACI",
      points: 299,
      deliveries: 10,
      efficiency: 80,
      icon: "6"
    }
  ];

  const handleNavigateBack = () => {
    if (cameFromProfile) {
      // Se veio do perfil, volta para o perfil
      navigate("/perfil");
    } else {
      // Caso contrário, usa a navegação padrão (voltar na história)
      navigate(-1);
    }
  };

  const handleOkClick = () => {
    if (cameFromProfile) {
      // Se veio do perfil, volta para o perfil
      navigate("/perfil");
    } else {
      // Caso contrário, vai para o perfil (não para home/login)
      navigate("/perfil");
    }
  };

  const getPositionIcon = (position: number) => {
    switch (position) {
      case 1:
        return "🏆";
      case 2:
        return "🥈";
      case 3:
        return "🥉";
      default:
        return position.toString();
    }
  };

  const getRowColor = (position: number) => {
    switch (position) {
      case 1:
        return "bg-yellow-100 border-yellow-300";
      case 2:
        return "bg-gray-100 border-gray-300";
      case 3:
        return "bg-orange-100 border-orange-300";
      default:
        return "bg-white border-gray-200";
    }
  };

  const getSortedData = () => {
    switch (activeTab) {
      case 'ENTREGAS':
        return [...teamRankings].sort((a, b) => b.deliveries - a.deliveries);
      case 'EFICIENCIA':
        return [...teamRankings].sort((a, b) => b.efficiency - a.efficiency);
      default:
        return [...teamRankings].sort((a, b) => b.points - a.points);
    }
  };

  const getValueByTab = (team: TeamRanking) => {
    switch (activeTab) {
      case 'ENTREGAS':
        return team.deliveries;
      case 'EFICIENCIA':
        return `${team.efficiency}%`;
      default:
        return team.points;
    }
  };

  const silkscreenFont = "[font-family:'Silkscreen',Helvetica]";
  const buttonBaseStyle = `${silkscreenFont} border-2 border-black rounded-md px-4 py-2 text-xs font-bold flex items-center justify-center transition-all`;

  return (
    <div className="bg-white w-full h-screen overflow-hidden">
      <div className={`w-full h-full [background:linear-gradient(180deg,rgba(57,189,248,1)_0%,rgba(154,102,248,1)_100%)] relative overflow-hidden ${silkscreenFont}`}>
        {/* Decorative clouds */}
        <img
          className="w-[375px] h-[147px] absolute top-[80px] left-[calc(50%_-_650px)] object-cover animate-float-right opacity-80 z-0"
          alt="Cloud decoration left"
          src="/nuvemleft.png"
        />
        <img
          className="w-[436px] h-[170px] absolute bottom-[30px] right-[calc(50%_-_700px)] object-cover animate-float-left opacity-75 scale-110 z-0"
          alt="Cloud decoration right"
          src="/nuvemright.png"
        />

        {/* Navigation buttons - só mostra se veio do perfil */}
        {cameFromProfile && (
          <div className="absolute top-4 left-4 z-20">
            <Button onClick={handleNavigateBack} variant="outline" className="p-2 bg-white border-2 border-black rounded-md hover:bg-gray-200">
              <ArrowLeft size={24} className="text-black" />
            </Button>
          </div>
        )}
        
        {/* Main content */}
        <div className="h-full flex items-center justify-center px-4 relative z-10">
          <div className="max-w-4xl w-full">
            <Card className="border-2 border-solid border-black rounded-lg overflow-hidden bg-white shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]">
              <CardContent className="p-4">
                {/* Header */}
                <div className="text-center mb-4">
                  <h1 className={`${silkscreenFont} text-xl font-bold text-[#E3922A]`} style={{textShadow: "2px 3px 0.6px #000"}}>
                    RANKING
                  </h1>
                </div>

                {/* User position card */}
                <div className="mb-4">
                  <Card className="bg-yellow-50 border-2 border-yellow-400 rounded-lg">
                    <CardContent className="p-3">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 bg-yellow-400 border-2 border-black rounded-full flex items-center justify-center">
                            <Trophy size={20} className="text-black" />
                          </div>
                          <div>
                            <p className={`${silkscreenFont} text-xs text-gray-600 mb-1`}>SUA POSIÇÃO</p>
                            <p className={`${silkscreenFont} text-lg font-bold text-black`}>{userStats.position}°</p>
                          </div>
                        </div>
                        <div className="text-right">
                          <div className="grid grid-cols-3 gap-3 text-center">
                            <div>
                              <p className={`${silkscreenFont} text-xs text-gray-600 mb-1`}>PONTOS</p>
                              <p className={`${silkscreenFont} text-sm font-bold text-black`}>{userStats.points}</p>
                            </div>
                            <div>
                              <p className={`${silkscreenFont} text-xs text-gray-600 mb-1`}>ENTREGAS</p>
                              <p className={`${silkscreenFont} text-sm font-bold text-black`}>{userStats.deliveries}</p>
                            </div>
                            <div>
                              <p className={`${silkscreenFont} text-xs text-gray-600 mb-1`}>EFICIÊNCIA</p>
                              <p className={`${silkscreenFont} text-sm font-bold text-black`}>{userStats.efficiency}%</p>
                            </div>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Tab buttons */}
                <div className="flex justify-center mb-4">
                  <div className="flex border-2 border-black rounded-md overflow-hidden">
                    <Button
                      onClick={() => setActiveTab('PONTOS')}
                      className={`${silkscreenFont} text-xs font-bold px-3 py-2 border-r-2 border-black rounded-none ${
                        activeTab === 'PONTOS' 
                          ? 'bg-blue-500 text-white' 
                          : 'bg-white text-black hover:bg-gray-100'
                      }`}
                    >
                      <TrendingUp size={12} className="mr-1" />
                      PONTOS
                    </Button>
                    <Button
                      onClick={() => setActiveTab('ENTREGAS')}
                      className={`${silkscreenFont} text-xs font-bold px-3 py-2 border-r-2 border-black rounded-none ${
                        activeTab === 'ENTREGAS' 
                          ? 'bg-blue-500 text-white' 
                          : 'bg-white text-black hover:bg-gray-100'
                      }`}
                    >
                      <Package size={12} className="mr-1" />
                      ENTREGAS
                    </Button>
                    <Button
                      onClick={() => setActiveTab('EFICIENCIA')}
                      className={`${silkscreenFont} text-xs font-bold px-3 py-2 rounded-none ${
                        activeTab === 'EFICIENCIA' 
                          ? 'bg-blue-500 text-white' 
                          : 'bg-white text-black hover:bg-gray-100'
                      }`}
                    >
                      <Target size={12} className="mr-1" />
                      EFICIÊNCIA
                    </Button>
                  </div>
                </div>

                {/* Ranking table */}
                <div className="overflow-hidden border-2 border-black rounded-lg mb-4">
                  {/* Table header */}
                  <div className="grid grid-cols-4 bg-gray-200 border-b-2 border-black">
                    <div className={`${silkscreenFont} text-xs font-bold p-2 text-center border-r-2 border-black`}>#</div>
                    <div className={`${silkscreenFont} text-xs font-bold p-2 text-center border-r-2 border-black`}>EQUIPE</div>
                    <div className={`${silkscreenFont} text-xs font-bold p-2 text-center border-r-2 border-black`}>
                      {activeTab === 'PONTOS' ? 'PONTOS' : activeTab === 'ENTREGAS' ? 'ENTREGAS' : 'EFICIÊNCIA'}
                    </div>
                    <div className={`${silkscreenFont} text-xs font-bold p-2 text-center`}>
                      {activeTab === 'PONTOS' ? 'ENTREGAS' : activeTab === 'ENTREGAS' ? 'EFICIÊNCIA' : 'PONTOS'}
                    </div>
                  </div>

                  {/* Table rows */}
                  {getSortedData().map((team, index) => (
                    <div 
                      key={team.name} 
                      className={`grid grid-cols-4 border-b border-gray-300 last:border-b-0 ${getRowColor(index + 1)}`}
                    >
                      <div className={`${silkscreenFont} text-sm font-bold p-2 text-center border-r border-gray-300 flex items-center justify-center`}>
                        <span className="text-lg">{getPositionIcon(index + 1)}</span>
                      </div>
                      <div className={`${silkscreenFont} text-sm font-bold p-2 border-r border-gray-300 flex items-center`}>
                        {team.name}
                      </div>
                      <div className={`${silkscreenFont} text-sm p-2 text-center border-r border-gray-300 flex items-center justify-center`}>
                        {getValueByTab(team)}
                      </div>
                      <div className={`${silkscreenFont} text-sm p-2 text-center flex items-center justify-center`}>
                        {activeTab === 'PONTOS' ? team.deliveries : 
                         activeTab === 'ENTREGAS' ? `${team.efficiency}%` : 
                         team.points}
                      </div>
                    </div>
                  ))}
                </div>

                {/* OK button */}
                <div className="flex justify-center">
                  <Button 
                    onClick={handleOkClick}
                    className={`${buttonBaseStyle} px-6 py-2 bg-[#E3922A] hover:bg-[#D4821A] text-white shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:shadow-[1px_1px_0px_0px_rgba(0,0,0,1)] active:shadow-none active:translate-x-[2px] active:translate-y-[2px]`}
                  >
                    OK
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RankingPage;
</file>

<file path="src/types/index.ts">
// src/types/index.ts

export interface TeamHistory {
  id: string;
  name: string;
  stats: {
    people: number;
    trophy: number;
    tasks?: number;
  };
  color: string;
}

export interface Team {
  id: string;
  name: string;
  stats: {
    people: number;
    trophy: number;
    trucks?: number;
    tasks?: number;
  };
  color?: string;
  selected?: boolean;
  history?: TeamHistory[];
}

export interface Map {
  id: number;
  nome: string;
  descricao: string;
  rotas: any[]; // Pode ser tipado como Rota[] se necessário
}
</file>

<file path="src/api/config.ts">
import axios from 'axios';

// Base URL da API - ajuste conforme seu ambiente (usando o nome do serviço no Docker Compose)
const API_URL = import.meta.env.VITE_API_URL || 'http://api:8000';

// Instância do Axios para a API
const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor para adicionar o token JWT em todas as requisições autenticadas
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Interceptor para tratar respostas com erro 401 (não autorizado)
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    // Se o token expirou (401), tenta renovar com refresh token
    if (error.response && error.response.status === 401 && !error.config.url.includes('/auth/token/')) {
      const refreshToken = localStorage.getItem('refreshToken');

      if (refreshToken) {
        try {
          // Tenta obter um novo token
          const response = await axios.post(`${API_URL}/api/auth/token/refresh/`, {
            refresh: refreshToken
          });

          // Armazena os novos tokens
          localStorage.setItem('token', response.data.access);

          // Reexecuta a requisição original com o novo token
          const originalRequest = error.config;
          originalRequest.headers.Authorization = `Bearer ${response.data.access}`;
          return api(originalRequest);
        } catch (refreshError) {
          // Se não conseguir renovar, faz logout
          localStorage.removeItem('token');
          localStorage.removeItem('refreshToken');
          console.error("Falha ao renovar token:", refreshError);
          window.location.href = '/login';
        }
      } else {
        // Se não tem refresh token, redireciona para login
        window.location.href = '/login';
      }
    }

    return Promise.reject(error);
  }
);

export default api;
</file>

<file path="src/pages/auth/Cadastro/Cadastro.tsx">
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "../../../components/ui/button";
import { Card, CardContent } from "../../../components/ui/card";
import { ArrowLeft, AlertCircle } from 'lucide-react';
import { ButtonHomeBack } from "@/components/ButtonHomeBack";
import AuthService from "../../../api/authService";

export const Cadastro = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    first_name: "",
    username: "",
    email: "",
    data_nascimento: "",
    password: "",
    password2: "",
    nickname: "", // Será preenchido automaticamente com o valor do username
    last_name: ""
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { id, value } = e.target;
    setFormData(prev => ({ ...prev, [id]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Validação básica
    if (!formData.first_name || !formData.username || !formData.email || !formData.password || !formData.password2) {
      setError("Por favor, preencha todos os campos obrigatórios");
      return;
    }

    if (formData.password !== formData.password2) {
      setError("As senhas não conferem");
      return;
    }

    setLoading(true);
    setError("");
    setSuccess("");

    try {
      // Envia nickname igual ao username para satisfazer o backend
      const dataToSend = {
        ...formData,
        nickname: formData.username
      };
      
      await AuthService.register(dataToSend);
      setSuccess("Cadastro realizado com sucesso! Redirecionando para o login...");

      // Redireciona para o login após 2 segundos
      setTimeout(() => {
        navigate("/login");
      }, 2000);
    } catch (error: any) {
      if (error.response && error.response.data) {
        // Trata erros da API
        if (typeof error.response.data === 'object') {
          // Extrai mensagens de erro
          const errorMessages = Object.entries(error.response.data)
            .map(([key, value]) => `${key}: ${Array.isArray(value) ? value.join(", ") : value}`)
            .join("; ");
          setError(errorMessages);
        } else {
          setError("Falha ao realizar cadastro. Verifique os dados.");
        }
      } else {
        setError("Erro de conexão. Tente novamente mais tarde.");
      }
    } finally {
      setLoading(false);
    }
  };

  // 6 inputs na ordem solicitada: nome, usuário, email, data nascimento, senha, confirmar senha
  const formFields = [
    { id: "first_name", label: "NOME", type: "text" },
    { id: "username", label: "USUÁRIO", type: "text" },
    { id: "email", label: "EMAIL", type: "email" },
    { id: "data_nascimento", label: "DATA DE NASCIMENTO", type: "date" },
    { id: "password", label: "SENHA", type: "password" },
    { id: "password2", label: "CONFIRMAR SENHA", type: "password" },
  ];

  return (
    <div className="bg-white flex flex-row justify-center w-full">
      <div className="w-full min-h-screen [background:linear-gradient(180deg,rgba(32,2,89,1)_0%,rgba(121,70,213,1)_100%)] relative overflow-hidden">
        {/* Nuvens com animação */}
        <img
          className="w-[375px] h-[147px] absolute top-[120px] left-[157px] object-cover animate-float-right opacity-75 scale-110"
          alt="Nuvem"
          src="/nuvemleft.png"
        />
        <img
          className="w-[436px] h-[170px] absolute bottom-[30px] right-[27px] object-cover animate-float-left opacity-75 scale-110"
          alt="Nuvem"
          src="/nuvemright.png"
        />

        {/* Botão de navegação */}
        <div className="absolute top-14 left-[33px]">
          <ButtonHomeBack onClick={() => navigate("/")}><ArrowLeft /></ButtonHomeBack>
        </div>

        {/* Card de Cadastro */}
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
          <Card className="w-[700px] rounded-[18px] border-2 border-solid border-black bg-white">
            <CardContent className="pt-8 px-[45px]">
              <h1 className="text-center text-[32px] [font-family:'Silkscreen',Helvetica] font-bold mb-8">
                CADASTRO
              </h1>

              {/* Mensagem de sucesso */}
              {success && (
                <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4">
                  {success}
                </div>
              )}

              {/* Mensagem de erro */}
              {error && (
                <div className="text-red-500 flex items-center gap-2 mb-4">
                  <AlertCircle size={20} />
                  <span>{error}</span>
                </div>
              )}

              <form className="space-y-4" onSubmit={handleSubmit}>
                <div className="grid grid-cols-2 gap-6">
                  {formFields.map((field) => (
                    <div key={field.id} className="space-y-2">
                      <label className="block [font-family:'Silkscreen',Helvetica] font-bold text-black text-[18px]">
                        {field.label}
                      </label>
                      <input
                        id={field.id}
                        type={field.type}
                        className="w-full h-[55px] rounded-xl border-2 border-solid border-black bg-white p-3 text-black [font-family:'Silkscreen',Helvetica]"
                        value={formData[field.id as keyof typeof formData]}
                        onChange={handleChange}
                      />
                    </div>
                  ))}
                </div>

                <div className="flex flex-col justify-between items-center pt-8">
                  <Button
                    type="submit"
                    disabled={loading}
                    className="w-[374px] h-[53px] bg-[#e3922a] rounded-md [font-family:'Silkscreen',Helvetica] font-bold text-black text-[24px] hover:bg-[#e3922a] transform transition-transform duration-300 hover:scale-105"
                  >
                    {loading ? "PROCESSANDO..." : "CADASTRAR"}
                  </Button>

                  <a
                    href="/login"
                    onClick={(e) => {
                      e.preventDefault();
                      navigate("/login");
                    }}
                    className="[font-family:'Silkscreen',Helvetica] font-normal mt-4 text-[#167dd2] text-base underline"
                  >
                    Já possui uma conta? Faça login
                  </a>
                </div>
              </form>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/pages/mapaRota/FuelModal.tsx">
// src/pages/mapaRota/FuelModal.tsx

import React, { useState } from 'react';
import { Vehicle } from '../../types/vehicle';

interface FuelModalProps {
  vehicle: Vehicle;
  availableMoney: number;
  onRefuel: (updatedVehicle: Vehicle, newBalance: number) => void;
  onClose: () => void;
}

export const FuelModal: React.FC<FuelModalProps> = ({
  vehicle,
  availableMoney,
  onRefuel,
  onClose
}) => {
  const [selectedVehicle, setSelectedVehicle] = useState<Vehicle>({ ...vehicle });
  const [fuelAmount, setFuelAmount] = useState<'full' | 'half' | 'quarter'>('full');
  const [availableBalance, setAvailableBalance] = useState(availableMoney);
  const [previewFuel, setPreviewFuel] = useState<number>(vehicle.currentFuel);

  const fuelCostPerLiter = 5.5;

  const calculateFuelCost = (option: 'full' | 'half' | 'quarter') => {
    const maxCapacity = selectedVehicle.maxCapacity;
    const currentFuel = selectedVehicle.currentFuel;

    let fuelToAdd = 0;

    switch (option) {
      case 'full':
        fuelToAdd = maxCapacity - currentFuel;
        break;
      case 'half':
        fuelToAdd = (maxCapacity / 2) - currentFuel;
        if (fuelToAdd < 0) fuelToAdd = 0;
        break;
      case 'quarter':
        fuelToAdd = (maxCapacity / 4) - currentFuel;
        if (fuelToAdd < 0) fuelToAdd = 0;
        break;
    }

    return fuelToAdd * fuelCostPerLiter;
  };

  const handleRefuel = () => {
    const cost = calculateFuelCost(fuelAmount);

    if (cost <= availableBalance) {
      const newCurrentFuel = fuelAmount === 'full'
        ? selectedVehicle.maxCapacity
        : fuelAmount === 'half'
          ? Math.max(selectedVehicle.currentFuel, selectedVehicle.maxCapacity / 2)
          : Math.max(selectedVehicle.currentFuel, selectedVehicle.maxCapacity / 4);

      const updatedVehicle = {
        ...selectedVehicle,
        currentFuel: newCurrentFuel
      };

      const newBalance = availableBalance - cost;

      setSelectedVehicle(updatedVehicle);
      setAvailableBalance(newBalance);

      onRefuel(updatedVehicle, newBalance);
    } else {
      alert('Saldo insuficiente para abastecer!');
    }
  };

  const calculatePreviewFuel = (option: 'full' | 'half' | 'quarter'): number => {
    const max = selectedVehicle.maxCapacity;
    const current = selectedVehicle.currentFuel;

    switch (option) {
      case 'full':
        return max;
      case 'half':
        // Correção: a pré-visualização deve mostrar o resultado final, não o máximo entre o atual e o alvo.
        return max / 2;
      case 'quarter':
        return max / 4;
    }
    return current; // Fallback
  };


  return (
    <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-[9999] p-4 overflow-y-auto">
      <div className="bg-[#200259] rounded-lg shadow-2xl border-4 border-black max-w-4xl w-full p-6 my-8">
        <h1 className="text-2xl font-['Silkscreen'] font-bold text-[#E3922A] text-center mb-4">
          ABASTECER VEÍCULO
        </h1>
        <p className="font-['Silkscreen'] text-white text-center text-md font-bold text-xl">
          Saldo após: R$ {(availableMoney - calculateFuelCost(fuelAmount)).toFixed(2)}
        </p>

        <div className="bg-[#FFC06F] p-4 rounded-lg shadow-md border-2 border-black mb-6">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex justify-center items-center md:w-1/3">
              <img
                src={selectedVehicle.image}
                alt={selectedVehicle.name}
                className="h-40 object-contain"
              />
            </div>

            <div className="md:w-2/3">
              <h2 className="text-xl font-['Silkscreen'] font-bold mb-3 text-black text-center border-b-2 border-black pb-2">
                {selectedVehicle.name.toUpperCase()}
              </h2>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <h3 className="font-['Silkscreen'] text-lg font-bold text-black mb-2">CONSUMO</h3>
                  <p className="font-sans text-black text-md mb-1">- ASFALTO: {selectedVehicle.consumption.asphalt}KM/L</p>
                  <p className="font-sans text-black text-md mb-3">- TERRA: {selectedVehicle.consumption.dirt}KM/L</p>
                </div>

                <div>
                  <h3 className="font-['Silkscreen'] text-lg font-bold text-black mb-2">COMBUSTÍVEL</h3>
                  <p className="font-sans text-black text-md mb-1">ATUAL: {selectedVehicle.currentFuel.toFixed(0)}L</p>
                  <p className="font-sans text-black text-md mb-3">MÁXIMO: {selectedVehicle.maxCapacity}L</p>
                </div>
              </div>

              <p className="font-sans text-black text-md mb-2">NÍVEL DO TANQUE</p>
              <div className="w-full bg-gray-300 rounded-full h-6 border-2 border-black mb-4 relative">
                {/* Barra do combustível atual */}
                <div
                  className="bg-green-500 h-full rounded-l-full transition-all duration-300"
                  style={{ width: `${(selectedVehicle.currentFuel / selectedVehicle.maxCapacity) * 100}%` }}
                ></div>
                {/* Barra da pré-visualização */}
                <div
                  className="bg-yellow-400 h-full absolute top-0 left-0 rounded-full opacity-70 transition-all duration-300"
                  style={{ width: `${(previewFuel / selectedVehicle.maxCapacity) * 100}%` }}
                ></div>
                <div className="absolute inset-0 flex items-center justify-center text-xs font-bold text-black">
                  {selectedVehicle.currentFuel.toFixed(0)} / {selectedVehicle.maxCapacity}L
                </div>
              </div>
            </div>
          </div>

          <div className="mt-4">
            <h3 className="font-['Silkscreen'] text-lg font-bold text-black mb-2">ABASTECER</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <p className="font-sans text-black text-md mb-2">PREÇO DO DIESEL: R$ {fuelCostPerLiter.toFixed(2)}/L</p>
              </div>

              <div className="md:col-span-2">
                <div className="flex space-x-2 mb-2">
                  <button
                    onClick={() => {
                      const newPreview = calculatePreviewFuel('quarter');
                      setFuelAmount('quarter');
                      setPreviewFuel(newPreview);
                    }}
                    className={`flex-1 py-2 border-2 border-black rounded-md ${fuelAmount === 'quarter' ? 'bg-[#E3922A]' : 'bg-gray-200'}`}
                  >
                    1/4
                  </button>
                  <button
                    onClick={() => {
                      const newPreview = calculatePreviewFuel('half');
                      setFuelAmount('half');
                      setPreviewFuel(newPreview);
                    }}
                    className={`flex-1 py-2 border-2 border-black rounded-md ${fuelAmount === 'half' ? 'bg-[#E3922A]' : 'bg-gray-200'}`}
                  >
                    1/2
                  </button>
                  <button
                    onClick={() => {
                      const newPreview = calculatePreviewFuel('full');
                      setFuelAmount('full');
                      setPreviewFuel(newPreview);
                    }}
                    className={`flex-1 py-2 border-2 border-black rounded-md ${fuelAmount === 'full' ? 'bg-[#E3922A]' : 'bg-gray-200'}`}
                  >
                    CHEIO
                  </button>
                </div>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
              <p className="font-sans text-black text-md font-bold text-xl">
                Custo: R$ {calculateFuelCost(fuelAmount).toFixed(2)}
              </p>

              <button
                onClick={handleRefuel}
                className="bg-[#E3922A] text-black font-bold py-2 px-4 rounded-md w-full shadow-md border-2 border-black hover:bg-[#FFC06F]"
              >
                ABASTECER
              </button>
            </div>
          </div>
        </div>

        <div className="flex justify-center">
          <button
            onClick={onClose}
            className="bg-gray-600 text-white font-bold py-3 px-8 rounded-md shadow-md border-2 border-black hover:bg-gray-700"
          >
            FECHAR
          </button>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/pages/Perfil/CriarEquipe.tsx">
import { useNavigate } from "react-router-dom";
import { useState } from "react";
import { Button } from "../../components/ui/button"; 
import {
  Card,
  CardContent,
} from "../../components/ui/card"; 
import {
  ArrowLeft,
  Copy,
  UserPlus,
  Settings,
  Crown,
  User,
} from 'lucide-react';

interface TeamMember {
  id: string;
  name: string;
  level: number;
  xp: number;
  avatar: string;
  role: 'ADMIN' | 'VICE_LIDER' | 'MEMBRO';
}

interface TeamData {
  name: string;
  inviteCode: string;
  members: TeamMember[];
}

export const CriarEquipePage = () => {
  const navigate = useNavigate();
  
  // Inicialização com dados padrão - apenas o usuário atual como membro
  const [teamData, setTeamData] = useState<TeamData>({
    name: "",
    inviteCode: "Será gerado automaticamente",
    members: [
      {
        id: "1",
        name: "AURELIO DE BOA",
        level: 12,
        xp: 2450,
        avatar: "/avatar.jpg",
        role: "ADMIN"
      }
    ]
  });

  const [newMemberName, setNewMemberName] = useState("");
  const [isInviting, setIsInviting] = useState(false);

  const handleNavigateBack = () => {
    navigate("/choose-team"); 
  };

  const handleTeamNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setTeamData(prev => ({ ...prev, name: e.target.value }));
  };

  const handleInviteMember = () => {
    if (!newMemberName.trim()) {
      alert("Digite o nome do membro para convidar");
      return;
    }
    
    setIsInviting(true);
    
    // Simular processo de convite
    setTimeout(() => {
      console.log(`Convite enviado para: ${newMemberName}`);
      alert(`Convite enviado para ${newMemberName}!`);
      setNewMemberName("");
      setIsInviting(false);
    }, 1500);
  };

  const handleCreateTeam = () => {
    if (!teamData.name.trim()) {
      alert("Digite um nome para a equipe");
      return;
    }
    
    console.log("Nova equipe criada:", teamData);
    //alert("Equipe criada com sucesso!");
    navigate("/game-selection");
  };

  const getRoleIcon = (role: string) => {
    switch (role) {
      case 'ADMIN':
        return <Crown size={16} className="text-yellow-500" />;
      default:
        return <User size={16} className="text-gray-500" />;
    }
  };

  const getRoleColor = (role: string) => {
    switch (role) {
      case 'ADMIN':
        return 'text-yellow-600';
      case 'VICE_LIDER':
        return 'text-blue-600';
      default:
        return 'text-gray-600';
    }
  };

  const silkscreenFont = "[font-family:'Silkscreen',Helvetica]";
  const inputStyle = `bg-white border-2 border-black rounded-md p-2 w-full ${silkscreenFont} text-sm focus:outline-none focus:ring-2 focus:ring-blue-400`;
  const labelStyle = `text-xs ${silkscreenFont} mb-1 block text-black font-bold`;
  const buttonBaseStyle = `${silkscreenFont} border-2 border-black rounded-md px-4 py-2 text-xs font-bold flex items-center justify-center transition-all`;

  return (
    <div className="bg-white flex flex-row justify-center w-full">
      <div className={`w-full min-h-screen [background:linear-gradient(180deg,rgba(57,189,248,1)_0%,rgba(154,102,248,1)_100%)] relative overflow-hidden ${silkscreenFont}`}>
        {/* Decorative clouds */}
        <img
          className="w-[375px] h-[147px] absolute top-[80px] left-[calc(50%_-_650px)] object-cover animate-float-right opacity-80"
          alt="Cloud decoration left"
          src="/nuvemleft.png"
        />
        <img
          className="w-[436px] h-[170px] absolute bottom-[30px] right-[calc(50%_-_700px)] object-cover animate-float-left opacity-75 scale-110"
          alt="Cloud decoration right"
          src="/nuvemright.png"
        />

        {/* Back button */}
        <div className="absolute top-4 left-4 z-20">
          <Button onClick={handleNavigateBack} variant="outline" className="p-2 bg-white border-2 border-black rounded-md hover:bg-gray-200">
            <ArrowLeft size={24} className="text-black" />
          </Button>
        </div>
        
        {/* Main content */}
        <div className="max-w-4xl mx-auto pt-16 pb-8 px-4 relative z-10">
          <Card className="border-2 border-solid border-black rounded-lg overflow-hidden bg-white shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]">
            <CardContent className="p-6">
              {/* Header */}
              <div className="text-center mb-6">
                <h1 className={`${silkscreenFont} text-xl font-bold text-[#E3922A] border-2 border-black bg-gray-100 py-2 px-4 rounded-md inline-block`}>
                  CRIAR EQUIPE
                </h1>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Left column - Team info */}
                <div className="space-y-4">
                  {/* Team name */}
                  <div>
                    <label htmlFor="teamName" className={labelStyle}>
                      NOME DA EQUIPE
                    </label>
                    <input 
                      type="text" 
                      name="teamName" 
                      id="teamName" 
                      value={teamData.name} 
                      onChange={handleTeamNameChange}
                      placeholder="DIGITE O NOME DA EQUIPE"
                      className={inputStyle}
                    />
                  </div>

                  {/* Invite code */}
                  <div>
                    <label htmlFor="inviteCode" className={labelStyle}>
                      CÓDIGO DE INVITE
                    </label>
                    <div className="flex gap-2">
                      <input 
                        type="text" 
                        name="inviteCode" 
                        id="inviteCode" 
                        value={teamData.inviteCode} 
                        readOnly
                        disabled
                        className={`${inputStyle} flex-1 bg-gray-100 text-gray-500`}
                      />
                    </div>
                    <p className={`text-xs text-gray-500 mt-1 ${silkscreenFont}`}>
                      O código será gerado automaticamente após a criação da equipe
                    </p>
                  </div>

                  {/* Team members */}
                  <div>
                    <label className={labelStyle}>
                      MEMBROS DA EQUIPE
                    </label>
                    <div className="space-y-2 max-h-60 overflow-y-auto">
                      {teamData.members.map((member) => (
                        <div key={member.id} className="flex items-center gap-3 bg-gray-50 border-2 border-black rounded-md p-3">
                          <img 
                            src={member.avatar} 
                            alt={`Avatar de ${member.name}`}
                            className="w-12 h-12 rounded-full border-2 border-black object-cover"
                          />
                          <div className="flex-1">
                            <div className="flex items-center gap-2">
                              {getRoleIcon(member.role)}
                              <span className={`${silkscreenFont} text-sm font-bold text-black`}>
                                {member.name}
                              </span>
                            </div>
                            <div className={`${silkscreenFont} text-xs text-gray-600`}>
                              NÍVEL {member.level} • XP {member.xp}
                            </div>
                          </div>
                          <div className={`${silkscreenFont} text-xs ${getRoleColor(member.role)} font-bold`}>
                            {member.role === 'ADMIN' ? 'LÍDER' : member.role}
                          </div>
                        </div>
                      ))}
                    </div>
                    <p className={`text-xs text-gray-500 mt-2 ${silkscreenFont}`}>
                      Você pode adicionar mais membros após criar a equipe
                    </p>
                  </div>
                </div>

                {/* Right column - Additional info */}
                <div className="space-y-4">
                  <div>
                    <label className={`${labelStyle} mb-3`}>
                      <UserPlus size={16} className="inline mr-2" />
                      INFORMAÇÕES ADICIONAIS
                    </label>
                    
                    <div className="bg-gray-50 border-2 border-black rounded-md p-4">
                      <p className={`${silkscreenFont} text-sm text-black mb-4`}>
                        AO CRIAR UMA EQUIPE:
                      </p>
                      
                      <ul className="space-y-3">
                        <li className="flex items-start gap-2">
                          <span className="text-green-500 font-bold">•</span>
                          <span className={`${silkscreenFont} text-xs text-gray-700`}>
                            VOCÊ SERÁ O LÍDER DA EQUIPE
                          </span>
                        </li>
                        <li className="flex items-start gap-2">
                          <span className="text-green-500 font-bold">•</span>
                          <span className={`${silkscreenFont} text-xs text-gray-700`}>
                            PODERÁ CONVIDAR OUTROS JOGADORES PARA PARTICIPAR
                          </span>
                        </li>
                        <li className="flex items-start gap-2">
                          <span className="text-green-500 font-bold">•</span>
                          <span className={`${silkscreenFont} text-xs text-gray-700`}>
                            COMPETIR EM RANKINGS E DESAFIOS EM GRUPO
                          </span>
                        </li>
                        <li className="flex items-start gap-2">
                          <span className="text-green-500 font-bold">•</span>
                          <span className={`${silkscreenFont} text-xs text-gray-700`}>
                            GANHAR RECOMPENSAS EXCLUSIVAS PARA EQUIPES
                          </span>
                        </li>
                      </ul>
                    </div>
                  </div>
                </div>
              </div>

              {/* Create button */}
              <div className="flex justify-center mt-8">
                <Button 
                  onClick={handleCreateTeam}
                  disabled={!teamData.name.trim()}
                  className={`${buttonBaseStyle} px-8 py-3 bg-[#29D8FF] hover:bg-[#20B4D2] text-black shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:shadow-[1px_1px_0px_0px_rgba(0,0,0,1)] active:shadow-none active:translate-x-[2px] active:translate-y-[2px] disabled:opacity-50 disabled:cursor-not-allowed`}
                >
                  <Settings size={18} className="mr-2" />
                  CRIAR EQUIPE
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default CriarEquipePage;
</file>

<file path="src/pages/Tutorial/TutorialPage.tsx">
import { useState, useEffect } from "react";
import { Button } from "../../components/ui/button";
import { ArrowLeft, Home } from 'lucide-react'; 
import { ButtonHomeBack } from "@/components/ButtonHomeBack";
import { useNavigate } from "react-router-dom";

export const TutorialPage = () => {
  const navigate = useNavigate();
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  
  useEffect(() => {
    const token = localStorage.getItem('userToken');
    setIsLoggedIn(!!token);
    
  }, []);

  const tutorialSteps = [
    {
      number: "1)",
      title: "ESCOLHA UM NOME PARA SUA EQUIPE.",
      description: "DEFINA OS MEMBROS E ATRIBUA FUNÇÕES ESTRATÉGICAS."
    },
    {
      number: "2)",
      title: "ESCOLHA O TIPO E QUANTIDADE DE CAMINHÕES.",
      description: "DEFINA A MELHOR ROTA CONSIDERANDO CUSTO E TEMPO. RESERVE UM ORÇAMENTO PARA EMERGÊNCIAS."
    },
    {
      number: "3)",
      title: "O JOGO SIMULA O TRANSPORTE EM TEMPO REAL.",
      description: "EVENTOS ALEATÓRIOS PODEM IMPACTAR A VIAGEM! VOCÊ PODE TOMAR DECISÕES PARA MINIMIZAR ATRASOS E CUSTOS."
    },
    {
      number: "4)",
      title: "VOCÊ SERÁ AVALIADO COM BASE EM:",
      description: (
        <div className="flex flex-col">
          <div className="flex items-start">
            <div className="w-5 h-5 bg-green-500 mr-2 mt-1"></div>
            <span>EFICIÊNCIA DE CUSTOS.</span>
          </div>
          <div className="flex items-start">
            <div className="w-5 h-5 bg-blue-500 mr-2 mt-1"></div>
            <span>CUMPRIMENTO DO PRAZO.</span>
          </div>
          <div className="flex items-start">
            <div className="w-5 h-5 bg-orange-500 mr-2 mt-1"></div>
            <span>CRIATIVIDADE NA RESOLUÇÃO DE PROBLEMAS.</span>
          </div>
        </div>
      )
    }
  ];

  return (
    <div className="bg-white flex flex-row justify-center w-full">
      <div className="w-full min-h-screen [background:linear-gradient(180deg,rgba(32,2,89,1)_0%,rgba(121,70,213,1)_100%)] relative overflow-hidden">
        {}
        <img
          className="w-[375px] h-[147px] absolute top-[120px] left-[157px] object-cover animate-float-right"
          alt="Cloud decoration"
          src="/nuvemleft.png"
        />
        <img
          className="w-[436px] h-[170px] absolute bottom-[30px] right-[27px] object-cover animate-float-left opacity-75 scale-110"
          alt="Cloud decoration"
          src="/nuvemright.png"
        />

        {}
        <div className="flex gap-5 absolute top-14 left-[33px]">
          <ButtonHomeBack onClick={() => navigate(-1)}><ArrowLeft/></ButtonHomeBack>
          <ButtonHomeBack onClick={() => navigate("/perfil")}><Home/></ButtonHomeBack>
        </div>

        {}
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[70%] max-w-[750px]">
          <div className="bg-white rounded-[18px] border-2 border-solid border-black p-6">
            {}
            <h1 className="text-center text-[35px] [font-family:'Silkscreen',Helvetica] font-bold mb-6">
              TUTORIAL
            </h1>

            {}
            <p className="text-center [font-family:'Silkscreen',Helvetica] text-[14px] mb-6">
              NESTE JOGO, VOCÊ ASSUMIRÁ O PAPEL DE UMA EMPRESA DE LOGÍSTICA E PRECISARÁ PLANEJAR E
              EXECUTAR A ENTREGA DE MERCADORIAS DA FORMA MAIS EFICIENTE POSSÍVEL.
            </p>

            {}
            <div className="grid grid-cols-2 gap-6 mb-6">
              {tutorialSteps.map((step, index) => (
                <div key={index} className="flex">
                  <div className="mr-3">
                    <div className="text-[24px] [font-family:'Silkscreen',Helvetica] font-bold text-[#e3922a]">
                      {step.number}
                    </div>
                  </div>
                  <div>
                    <h3 className="[font-family:'Silkscreen',Helvetica] font-bold text-[14px]">
                      {step.title}
                    </h3>
                    <div className="[font-family:'Silkscreen',Helvetica] text-[12px] mt-1">
                      {step.description}
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {}
            <p className="text-center [font-family:'Silkscreen',Helvetica] text-[12px] mb-6">
              AGORA QUE VOCÊ CONHECE AS REGRAS, ESTÁ PRONTO PARA O DESAFIO BOA SORTE!
            </p>
            
              <div className="flex justify-center">
                <Button 
                  onClick={() => navigate("/desafio")}
                  className="w-[230px] px-36 h-[45px] bg-[#e3922a] rounded-md [font-family:'Silkscreen',Helvetica] font-bold text-black text-[26px] hover:bg-[#e3922a] transform transition-transform duration-300 hover:scale-105"
                >
                  INICIAR JOGO
                </Button>
              </div>
            
          </div>
        </div>

        {}
      </div>
    </div>
  );
};

export default TutorialPage;
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <title>Jogos Logísticos</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta charset="utf-8" />
  <meta content="width=device-width, initial-scale=1" name="viewport" />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link
    href="https://fonts.googleapis.com/css2?family=Press+Start+2P&family=Silkscreen:wght@400;700&family=Signika:wght@700&display=swap"
    rel="stylesheet">
  <link href="./src/index.css" rel="stylesheet" />
  <link href="./src/App.css" rel="stylesheet" />
</head>

<body>
  <div id="app"></div>
  <script type="module" src="./src/main.tsx"></script>
</body>

</html>
</file>

<file path="src/pages/GameSelection/GameSelectionPage.tsx">
import React from 'react';
import { useNavigate } from "react-router-dom";
import { useQuery } from '@tanstack/react-query';
import GameCard from './components/GameCard';
import PixelHeading from './components/PixelHeading';
import Footer from './components/Footer';
import { ArrowLeft, ImageIcon, Loader, AlertTriangle } from 'lucide-react';
import { ButtonHomeBack } from '@/components/ButtonHomeBack';
import { GameService } from '@/api/gameService';
import { Map as GameMap } from '@/types';

const GameSelectionPage = () => {
  const navigate = useNavigate();

  // Buscando os dados da API
  const { data: maps, isLoading, isError } = useQuery<GameMap[]>({
    queryKey: ['maps'],
    queryFn: GameService.getMaps,
  });

  // Lógica de navegação baseada no NOME do mapa
  const handleGameClick = (map: GameMap) => {
    // Se o mapa for "ENTREGA EFICIENTE"
    if (map.nome === "ENTREGA EFICIENTE") {
      navigate('/tutorial'); // Leva para a tela de tutorial
    } else {
      // Para outros jogos, mostra alerta de "em desenvolvimento"
      alert(`O jogo "${map.nome}" ainda está em desenvolvimento!`);
      // navigate('/desafio', { state: { map } }); // Descomente quando a lógica estiver pronta
    }
  };

  // Função de configuração que usa o NOME do mapa vindo da API
  const getGameConfig = (mapName: string) => {
    // Mapeia o NOME do mapa para a configuração visual
    switch (mapName) {
      case "ENTREGA EFICIENTE":
        return {
          borderColor: 'border-yellow-500',
          buttonBgColor: 'bg-yellow-500',
          buttonHoverColor: 'hover:bg-yellow-600',
          isActive: true, // Este jogo está ATIVO
        };
      case "Centro de Distribuição":
        return {
          borderColor: 'border-green-400',
          buttonBgColor: 'bg-green-300',
          buttonHoverColor: 'hover:bg-green-400',
          isActive: false, // Este jogo está INATIVO
        };
      case "Gestão de Estoque":
        return {
          borderColor: 'border-blue-400',
          buttonBgColor: 'bg-blue-300',
          buttonHoverColor: 'hover:bg-blue-400',
          isActive: false, // Este jogo está INATIVO
        };
      // Configuração padrão para qualquer outro mapa que possa existir
      default:
        return {
          borderColor: 'border-gray-400',
          buttonBgColor: 'bg-gray-300',
          buttonHoverColor: 'hover:bg-gray-400',
          isActive: false,
        };
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-purple-900 to-indigo-800 flex items-center justify-center">
        <div className="text-white text-center text-2xl flex items-center" style={{ fontFamily: "'Press Start 2P', cursive" }}>
          <Loader className="mr-4 animate-spin" />
          Carregando Jogos...
        </div>
      </div>
    );
  }

  if (isError) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-purple-900 to-indigo-800 flex items-center justify-center">
        <div className="text-red-500 text-center text-2xl flex items-center" style={{ fontFamily: "'Press Start 2P', cursive" }}>
          <AlertTriangle className="mr-2" />
          Erro ao carregar os jogos.
        </div>
      </div>
    );
  }

  return (
    <div
      className="min-h-screen bg-gradient-to-b from-purple-900 to-indigo-800 flex flex-col items-center justify-between py-12 px-4"
      style={{ fontFamily: "'Press Start 2P', cursive" }}
    >
      <div className="flex gap-5 absolute top-14 left-[33px]">
        <ButtonHomeBack onClick={() => navigate(-1)}><ArrowLeft /></ButtonHomeBack>
      </div>

      <div className="w-full max-w-6xl flex flex-col items-center">
        <PixelHeading text="ESCOLHA SEU JOGO" className="mb-12 mt-8" />

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 w-full">
          {maps?.map((map) => {
            // Passa o NOME do mapa para a função de configuração
            const config = getGameConfig(map.nome);
            return (
              <GameCard
                key={map.id}
                title={map.nome}
                description={map.descricao}
                isActive={config.isActive}
                onClick={() => config.isActive && handleGameClick(map)}
                borderColor={config.borderColor}
                buttonBgColor={config.buttonBgColor}
                buttonHoverColor={config.buttonHoverColor}
                icon={<ImageIcon className="w-12 h-12" />}
              />
            );
          })}
        </div>
      </div>

      <Footer />
    </div>
  );
};

export default GameSelectionPage;
</file>

<file path="src/pages/Home/HomePage.tsx">
import { ArrowRightIcon } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { Button } from "../../components/ui/button";
import { Card, CardContent } from "../../components/ui/card";
import { Separator } from "../../components/ui/separator";

export const HomePage = () => {
  const navigate = useNavigate();

  const handleLogin = () => {
    navigate("/Login");
  };
  const handleCadastro = () => {
    navigate("/Cadastro");
  };


  return (
    <div className="bg-white flex flex-row justify-center w-full ">
      <div className="bg-white py-5 [background:linear-gradient(180deg,rgba(57,189,248,1)_0%,rgba(154,102,248,1)_100%)] w-full min-h-screen relative flex flex-col items-center justify-center">
        <Card className="w-[1039px] h-[455px] relative border-[3px] border-solid border-black rounded">
          <CardContent className="p-0 flex h-full">
            {/* Left purple section */}
            <div className="w-[512px] h-full bg-[#561c86] rounded border-r-[3px] border-solid border-black flex flex-col items-center px-12 py-5">
              <h1 className="[font-family:'Silkscreen',Helvetica] font-bold text-white text-[40px] text-center mt-3">
                Jogos Logisticos
              </h1>

              <Card className="w-full h-[202px] mt-8 border-[3px] border-solid border-black flex items-center justify-center bg-[#ffffff]">
                <CardContent className="p-0 flex items-center justify-center h-full">
                  <img
                    className="w-[45%] object-cover"
                    alt="Game logo"
                    src="/Logoifba.png"
                  />
                </CardContent>
              </Card>

              <p className="[font-family:'Silkscreen',Helvetica] font-normal text-white text-[15px] mt-3 text-center">
                Gerencie sua frota de caminhões, escolha
                <br />
                as melhores rotas e faça entregas com eficiência.
              </p>

            
            </div>

            {/* Right section */}
            <div className="flex-1 flex flex-col items-center px-10">
              <h2 className="[text-shadow:2px_3px_0.6px_#000000] [-webkit-text-stroke:1px_#000000] [font-family:'Silkscreen',Helvetica] font-bold text-[#ff8c00e3] text-[40px] text-center mt-5">
                Bem-vindo!
              </h2>

              <div className="w-full mt-16">
                <Button 
                onClick={handleLogin}
                className="w-full h-[58px] bg-[#ffd700] hover:bg-[#e6c200] text-[#1c1a1a] border border-solid border-black rounded-[3px] relative">
                  <span className="[font-family:'Silkscreen',Helvetica] font-bold text-2xl absolute left-1/2 transform -translate-x-1/2">
                    Entrar
                  </span>
                  <ArrowRightIcon className="absolute right-6 w-6 h-[21px]" />
                </Button>
              </div>

              <div className="w-full mt-5 flex items-center justify-center">
                <div className="[font-family:'Signika',Helvetica] font-bold text-[#8d8c8c] text-2xl">
                  <Separator className="inline-block w-[160px] h-px bg-[#8d8c8c]" />
                  <span className="mx-2">OU</span>
                  <Separator className="inline-block w-[160px] h-px bg-[#8d8c8c]" />
                </div>
              </div>

              <div className="w-full mt-10">
                <Button
                 onClick={handleCadastro}
                className="w-full h-[58px] bg-[#16bd81] hover:bg-[#14a974] text-[#1c1a1a] border border-solid border-black rounded-[3px] relative">
                  <span className="[font-family:'Silkscreen',Helvetica] font-bold text-2xl absolute left-1/2 transform -translate-x-1/2">
                    Cadastrar
                  </span>
                  <ArrowRightIcon className="absolute right-6 w-6 h-[21px]" />
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        <footer className="mt-5 mb-10">
          <p className="[font-family:'Silkscreen',Helvetica] font-bold text-white text-[15px] text-center">
            © 2025 Jogos Logísticos - Todos os direitos reservados
          </p>
        </footer>
      </div>
    </div>
  );
};
</file>

<file path="src/index.css">
@import url('https://fonts.googleapis.com/css2?family=Silkscreen:wght@400;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;


:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

@layer base {
  html {
    font-family: 'Silkscreen', sans-serif;
    font-family: 'Press Start 2P', cursive;
  }
  body {
    @apply antialiased;
    image-rendering: pixelated;
  }
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}
/* Estilos para o mapa Leaflet */
.leaflet-container {
  /* A largura e altura serão controladas pelo Tailwind no MapComponent.tsx */
  /* Remove width: 100%; height: 500px; daqui para usar as classes Tailwind */
}

/* Opcional: Estilos para o popup do Leaflet se quiser mais controle */
.leaflet-popup-content-wrapper {
  border-radius: 0.5rem; /* Arredonda as bordas do popup */
}
.leaflet-popup-content {
  margin: 0; /* Remove margem padrão */
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
  @layer components {
  .pixel-border {
    box-shadow: 
      0 0 0 2px #fff,
      0 0 0 4px #000;
  }
  
  .pixel-button {
    @apply relative bg-amber-500 px-6 py-3 font-pixel 
    text-black font-bold border-2 border-black 
    transition-all duration-150 
    hover:brightness-110 active:brightness-90
    hover:-translate-y-1 active:translate-y-0;
  }
  
  .pixel-card {
    @apply bg-white border-2 border-black p-4 transition-all
    hover:shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]
    hover:-translate-x-[2px] hover:-translate-y-[2px];
  }
  
  .pixel-cloud {
    @apply absolute opacity-75 animate-float;
  }
  
  .pixelated {
    image-rendering: pixelated;
  }
}
</file>

<file path="src/pages/ChooseTeam/ChooseTeam.tsx">
// src/pages/ChooseTeam/ChooseTeam.tsx

import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { TeamService } from '../../api/teamService';
import { Team } from '../../types';
import { useAuth } from '../../contexts/AuthContext';
import TeamCard from '../../components/TeamCard';
import CreateTeamButton from '../../components/CreateTeamButton';
import SelectTeamButton from '../../components/SelectTeamButton';
import { ButtonHomeBack } from '@/components/ButtonHomeBack';
import { ArrowLeft, House } from 'lucide-react';

export const ChooseTeam = () => {
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const { refreshUser } = useAuth();

  const [selectedTeamId, setSelectedTeamId] = useState<number | null>(null);

  // Busca as equipes da API
  const { data: teams, isLoading, isError } = useQuery<Team[]>({
    queryKey: ['teams'],
    queryFn: TeamService.getTeams,
  });

  // Mutação para entrar em uma equipe (caso precise dessa lógica aqui)
  const joinTeamMutation = useMutation({
    mutationFn: (code: string) => TeamService.joinTeam(code),
    onSuccess: async () => {
      await refreshUser();
      queryClient.invalidateQueries({ queryKey: ['teams'] });
      alert("Você entrou na equipe!");
      navigate("/game-selection");
    },
    onError: (err: any) => alert(`Erro: ${err.response?.data?.detail || "Código inválido"}`),
  });

  const handleTeamClick = (id: number) => {
    setSelectedTeamId(id);
  };

  const handleCreateTeam = () => {
    navigate("/create-team");
  };

  const handleSelectTeam = () => {
    const team = teams?.find(t => t.id === selectedTeamId);
    if (team) {
      // A lógica de "entrar" na equipe deve ser feita aqui se o usuário ainda não tiver uma
      // Por simplicidade, vamos assumir que o backend associa o usuário ao selecionar
      // ou que isso será feito em outra tela. Apenas navegamos.
      // Para uma integração completa, poderíamos chamar joinTeamMutation.mutate(team.codigo);
      navigate("/game-selection");
    }
  };

  if (isLoading) return <div className="text-white text-center">Carregando equipes...</div>;
  if (isError) return <div className="text-red-500 text-center">Erro ao carregar equipes.</div>;

  return (
    <div className="h-screen bg-gradient-to-b from-indigo-900 to-purple-700 font-pixel relative overflow-hidden flex flex-col">
      <img className="w-[375px] h-[147px] absolute top-[120px] left-[157px] object-cover animate-float-right z-0" alt="Nuvem" src="/nuvemleft.png" />
      <img className="w-[436px] h-[170px] absolute bottom-[30px] right-[27px] object-cover animate-float-left opacity-75 scale-110 z-0" alt="Nuvem" src="/nuvemright.png" />

      {/* <<< MUDANÇA: Adicionamos 'relative' e 'z-10' a este contêiner para colocá-lo na frente das nuvens */}
      <div className="relative z-10 flex flex-col flex-1">
        <div className="flex gap-5 absolute top-14 left-[33px]">
          <ButtonHomeBack onClick={() => navigate(-1)}><ArrowLeft /></ButtonHomeBack>
          <ButtonHomeBack onClick={() => navigate("/perfil")}><House /></ButtonHomeBack>
        </div>
        <div className="flex-1 overflow-auto container mx-auto px-4 py-4">
          <h1 className="text-2xl md:text-2xl text-yellow-300 font-bold text-center mt-2 mb-8 tracking-wide" style={{ textShadow: '2px 3px 2px black' }}>
            ESCOLHA SUA EQUIPE
          </h1>
          <div className="bg-white/5 backdrop-blur-sm border-2 border-white/20 rounded-lg p-2.5 mb-2">
            <CreateTeamButton onClick={handleCreateTeam} />
          </div>
          <div className="mb-6">
            <h2 className="text-2xl text-center text-yellow-300 font-bold mb-4 z-10" style={{ textShadow: '2px 3px 2px black' }}>EQUIPES</h2>
            <div className="space-y-4">
              {teams?.map(team => (
                <TeamCard
                  key={team.id}
                  // Corrigindo a adaptação para o componente esperar `name` enquanto a API envia `nome`
                  team={{ ...team, name: team.nome || 'Nome da Equipe' }}
                  onClick={() => handleTeamClick(team.id)}
                  selected={team.id === selectedTeamId}
                />
              ))}
            </div>
          </div>
          <div className="justify-center flex">
            <SelectTeamButton onClick={handleSelectTeam} />
          </div>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/pages/Perfil/EditarPerfil.tsx">
import { useNavigate } from "react-router-dom";
import { useState, useRef, useEffect } from "react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { useAuth } from "../../contexts/AuthContext";
import AuthService from "../../api/authService";
import { Button } from "../../components/ui/button";
import {
  Card,
  CardContent,
} from "../../components/ui/card";
import {
  ArrowLeft,
  Camera,
  Trophy,
  Edit3,
  LogOut,
  Trash2,
  KeyRound,
  ChevronDown,
  Users,
} from 'lucide-react';

interface UserEditData {
  first_name: string;
  last_name: string;
  email: string;
  data_nascimento?: string;
}

export const EditarPerfilPage = () => {
  const navigate = useNavigate();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { user, refreshUser, logout } = useAuth();
  const queryClient = useQueryClient();

  // Estado para os dados editáveis
  const [userData, setUserData] = useState<UserEditData>({
    first_name: '',
    last_name: '',
    email: '',
    data_nascimento: ''
  });

  // Estado para avatar local (funcionalidade futura)
  const [localAvatar, setLocalAvatar] = useState<string>("/mario.png");

  // Dados estáticos para exibição (level, XP, equipe)
  const [displayData] = useState({
    level: 12,
    xp: 2450,
    maxXp: 3000,
    xpPercentage: 83,
    team: "FRUIT VALE",
    funcaoEquipe: "COORDENADOR",
  });

  // Carrega dados do usuário quando componente monta
  useEffect(() => {
    if (user) {
      // Converter data para formato YYYY-MM-DD se necessário
      let dataFormatada = '';
      if (user.data_nascimento) {
        // Se vier no formato DD/MM/YYYY, converter para YYYY-MM-DD
        if (user.data_nascimento.includes('/')) {
          const [dia, mes, ano] = user.data_nascimento.split('/');
          dataFormatada = `${ano}-${mes.padStart(2, '0')}-${dia.padStart(2, '0')}`;
        }
        // Se vier no formato YYYY-MM-DD, usar direto
        else if (user.data_nascimento.includes('-')) {
          dataFormatada = user.data_nascimento;
        }
        // Outros formatos
        else {
          dataFormatada = user.data_nascimento;
        }
      }

      setUserData({
        first_name: user.first_name || '',
        last_name: user.last_name || '',
        email: user.email || '',
        data_nascimento: dataFormatada
      });
    }
  }, [user]);

  // Mutation para atualizar perfil
  const updateProfileMutation = useMutation({
    mutationFn: (data: UserEditData) => {
      console.log('🌐 DEBUG - Enviando requisição PATCH para /auth/perfil/ com:', data);
      return AuthService.updateProfile(data);
    },
    onSuccess: async (response) => {
      console.log('✅ DEBUG - Resposta de sucesso do backend:', response.data);

      // Atualiza os dados no contexto
      await refreshUser();

      console.log('🔄 DEBUG - Usuário atualizado no contexto');

      // Invalida queries relacionadas
      queryClient.invalidateQueries({ queryKey: ['profile'] });

      // Mostra sucesso e navega
      alert("Alterações salvas com sucesso!");
      navigate("/perfil");
    },
    onError: (error: any) => {
      console.error("❌ DEBUG - Erro completo:", error);
      console.error("❌ DEBUG - Resposta do servidor:", error.response?.data);
      console.error("❌ DEBUG - Status do erro:", error.response?.status);

      const errorMessage = error.response?.data?.detail ||
        error.response?.data?.message ||
        JSON.stringify(error.response?.data) ||
        "Erro ao salvar alterações";
      alert(`Erro: ${errorMessage}`);
    }
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setUserData(prev => ({ ...prev, [name]: value }));
  };

  const handlePhotoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && file.type.startsWith('image/')) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const result = e.target?.result;
        if (typeof result === 'string') {
          setLocalAvatar(result);
        }
      };
      reader.readAsDataURL(file);
    } else {
      alert('Por favor, selecione apenas arquivos de imagem.');
    }
  };

  const handleClickUpload = () => {
    fileInputRef.current?.click();
  };

  const handleSalvarAlteracoes = () => {
    console.log('💾 DEBUG - Iniciando salvamento com dados:', userData);

    // Valida dados básicos
    if (!userData.email.trim()) {
      alert("Email é obrigatório!");
      return;
    }

    // Prepara dados para envio (remove campos vazios)
    const dataToSend: Partial<UserEditData> = {};

    if (userData.first_name.trim()) dataToSend.first_name = userData.first_name.trim();
    if (userData.last_name.trim()) dataToSend.last_name = userData.last_name.trim();
    if (userData.email.trim()) dataToSend.email = userData.email.trim();
    if (userData.data_nascimento?.trim()) dataToSend.data_nascimento = userData.data_nascimento.trim();

    console.log('📤 DEBUG - Dados que serão enviados para o backend:', dataToSend);

    updateProfileMutation.mutate(dataToSend as UserEditData);
  };

  const handleNavigateBack = () => {
    navigate(-1);
  };

const handleTeamSettings = () => {
  navigate("/perfil/editar-equipe");
};

  const handleSairDaEquipe = () => {
    console.log("Sair da equipe");
    // TODO: Implementar API para sair da equipe
    alert("Funcionalidade em desenvolvimento!");
  };

  const handleExcluirEquipe = () => {
    navigate("/perfil/excluir-equipe");
  };

  const handleChangePassword = () => {
    navigate("/mudar-senha");
  };

  const handleLogout = () => {
    logout();
    navigate("/login");
  };

  // Se não há usuário logado, redireciona
  if (!user) {
    navigate("/login");
    return null;
  }

  const silkscreenFont = "[font-family:'Silkscreen',Helvetica]";
  const inputStyle = `bg-white border-2 border-black rounded-md p-2 w-full ${silkscreenFont} text-sm focus:outline-none focus:ring-2 focus:ring-yellow-400`;
  const labelStyle = `text-xs ${silkscreenFont} mb-1 block text-black`;
  const buttonBaseStyle = `${silkscreenFont} border-2 border-black rounded-md px-4 py-2 text-xs font-bold flex items-center justify-center`;

  return (
    <div className="bg-white flex flex-row justify-center w-full h-screen overflow-hidden">
      <div className={`w-full h-full [background:linear-gradient(180deg,rgba(57,189,248,1)_0%,rgba(154,102,248,1)_100%)] relative overflow-hidden ${silkscreenFont}`}>
        {/* Decorative clouds */}
        <img
          className="w-[375px] h-[147px] absolute top-[80px] left-[calc(50%_-_650px)] object-cover animate-float-right opacity-80"
          alt="Cloud decoration left"
          src="/nuvemleft.png"
        />
        <img
          className="w-[436px] h-[170px] absolute bottom-[30px] right-[calc(50%_-_700px)] object-cover animate-float-left opacity-75 scale-110"
          alt="Cloud decoration right"
          src="/nuvemright.png"
        />

        {/* Hidden file input */}
        <input
          type="file"
          ref={fileInputRef}
          onChange={handlePhotoUpload}
          accept="image/*"
          className="hidden"
        />

        {/* Back button */}
        <div className="absolute top-4 left-4 z-20">
          <Button onClick={handleNavigateBack} variant="outline" className="p-2 bg-white border-2 border-black rounded-md hover:bg-gray-200">
            <ArrowLeft size={24} className="text-black" />
          </Button>
        </div>

        {/* Main content */}
        <div className="h-full flex items-center justify-center px-4 py-4 relative z-10">
          <div className="w-full max-w-4xl h-full">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 h-full">

              {/* Left column - User profile */}
              <Card className="border-2 border-solid border-black rounded-lg overflow-hidden bg-white shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] h-full">
                <CardContent className="p-4 md:p-5 h-full overflow-y-auto">
                  <div className="text-center mb-4">
                    {/* Avatar section */}
                    <div className="mt-1 flex justify-center">
                      <div className="relative">
                        <div className="w-28 h-28 rounded-full bg-[#00FFFF] border-2 border-black flex items-center justify-center overflow-hidden relative group">
                          <img
                            src={localAvatar}
                            alt="Avatar"
                            className="w-24 h-24 object-cover rounded-full"
                          />
                          <div
                            className="absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-200 cursor-pointer rounded-full"
                            onClick={handleClickUpload}
                          >
                            <Camera size={28} className="text-white" />
                          </div>
                        </div>
                      </div>
                    </div>

                    <h3 className={`${silkscreenFont} font-bold text-black text-lg mt-3`}>
                      {(user.nickname || user.username).toUpperCase()}
                    </h3>

                    <div className="flex items-center justify-center mt-1">
                      <span className="text-yellow-500 mr-1">🏆</span>
                      <span className={`${silkscreenFont} text-black text-sm`}>
                        NÍVEL {displayData.level}
                      </span>
                    </div>

                    {/* XP Progress bar */}
                    <div className="mt-3">
                      <div className="flex justify-between text-xs text-black ${silkscreenFont} mb-1">
                        <span>XP: {displayData.xp}/{displayData.maxXp}</span>
                        <span>{displayData.xpPercentage}%</span>
                      </div>
                      <div className="w-full h-5 bg-gray-300 rounded-sm overflow-hidden border border-black">
                        <div
                          className="h-full bg-yellow-400 border-r border-black"
                          style={{ width: `${displayData.xpPercentage}%` }}
                        ></div>
                      </div>
                    </div>
                  </div>

                  {/* Form fields */}
                  <div className="space-y-3 mt-4">
                    <div>
                      <label htmlFor="first_name" className={labelStyle}>NOME</label>
                      <input
                        type="text"
                        name="first_name"
                        id="first_name"
                        value={userData.first_name}
                        onChange={handleInputChange}
                        className={inputStyle}
                        placeholder="Seu primeiro nome"
                      />
                    </div>
                    <div>
                      <label htmlFor="last_name" className={labelStyle}>SOBRENOME</label>
                      <input
                        type="text"
                        name="last_name"
                        id="last_name"
                        value={userData.last_name}
                        onChange={handleInputChange}
                        className={inputStyle}
                        placeholder="Seu sobrenome"
                      />
                    </div>
                    <div>
                      <label className={labelStyle}>USUÁRIO (não pode ser alterado)</label>
                      <input
                        type="text"
                        value={user.nickname || user.username}
                        className={`${inputStyle} bg-gray-200 cursor-not-allowed opacity-70`}
                        disabled
                        readOnly
                      />
                    </div>
                    <div>
                      <label htmlFor="email" className={labelStyle}>EMAIL</label>
                      <input
                        type="email"
                        name="email"
                        id="email"
                        value={userData.email}
                        onChange={handleInputChange}
                        className={inputStyle}
                        placeholder="seu@email.com"
                        required
                      />
                    </div>
                    <div>
                      <label htmlFor="data_nascimento" className={labelStyle}>DATA DE NASCIMENTO</label>
                      <input
                        type="date"
                        name="data_nascimento"
                        id="data_nascimento"
                        value={userData.data_nascimento}
                        onFocus={() => console.log('📅 DEBUG - Data atual no campo:', userData.data_nascimento)}
                        onChange={(e) => {
                          console.log('📅 DEBUG - Nova data selecionada:', e.target.value);
                          handleInputChange(e);
                        }}
                        className={inputStyle}
                      />
                    </div>
                  </div>

                  <div className="flex justify-center mt-6">
                    <Button
                      onClick={handleSalvarAlteracoes}
                      disabled={updateProfileMutation.isPending}
                      className={`${buttonBaseStyle} w-auto px-6 py-1.5 bg-[#29D8FF] hover:bg-[#20B4D2] text-black shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:shadow-[1px_1px_0px_0px_rgba(0,0,0,1)] active:shadow-none active:translate-x-[2px] active:translate-y-[2px] disabled:opacity-50`}
                    >
                      {updateProfileMutation.isPending ? 'SALVANDO...' : 'SALVAR ALTERAÇÕES'}
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* Right column - Team and actions */}
              <div className="h-full flex flex-col space-y-5">
                <div className="flex-1 overflow-y-auto space-y-5">
                  <Card className="border-2 border-solid border-black rounded-lg overflow-hidden bg-white shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]">
                    <CardContent className="p-4">
                      <div className="flex justify-between items-center mb-3">
                        <h3 className={`${silkscreenFont} text-base text-black`}>
                          EQUIPE : <span className="text-[#E3922A] font-bold">
                            {user.equipe ? displayData.team.toUpperCase() : 'SEM EQUIPE'}
                          </span>
                        </h3>
                        <Button variant="ghost" onClick={handleTeamSettings} className="p-1 hover:bg-gray-200 rounded">
                          <Edit3 size={18} className="text-black" />
                        </Button>
                      </div>

                      {/* Team info box */}
                      <div className="bg-gray-100 border-2 border-black rounded-md p-3 mb-4">
                        <div className="flex items-center mb-3">
                          <div className="flex flex-col items-center mr-4">
                            <p className={`${silkscreenFont} text-black text-sm mb-1 text-center`}>
                              {user.equipe ? 'LÍDER' : 'SEM EQUIPE'}
                            </p>
                            <img
                              src="/avatar-placeholder.png"
                              alt="Team Leader Avatar"
                              className="w-12 h-12 rounded-sm bg-gray-300 border border-black"
                            />
                          </div>
                          <div className={`${silkscreenFont} text-black text-xs flex flex-col space-y-1`}>
                            <div className="flex items-center"><Trophy size={16} className="mr-1 text-yellow-500" /> 4</div>
                            <div className="flex items-center"><Users size={16} className="mr-1" /> 5</div>
                            <div className="flex items-center"><Trophy size={16} className="mr-1 text-orange-400" /> 9</div>
                          </div>
                        </div>

                        {user.equipe ? (
                          <div className="flex space-x-2">
                            <Button
                              onClick={handleSairDaEquipe}
                              className={`${buttonBaseStyle} flex-1 bg-white hover:bg-gray-100 text-black text-[10px] leading-tight shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:shadow-[1px_1px_0px_0px_rgba(0,0,0,1)]`}
                            >
                              <LogOut size={14} className="mr-1 md:mr-2" /> SAIR DA EQUIPE
                            </Button>
                            <Button
                              onClick={handleExcluirEquipe}
                              className={`${buttonBaseStyle} flex-1 bg-red-500 hover:bg-red-600 text-white text-[10px] leading-tight shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:shadow-[1px_1px_0px_0px_rgba(0,0,0,1)]`}
                            >
                              <Trash2 size={14} className="mr-1 md:mr-2" /> EXCLUIR EQUIPE
                            </Button>
                          </div>
                        ) : (
                          <div className="text-center">
                            <Button
                              onClick={() => navigate('/equipes')}
                              className={`${buttonBaseStyle} bg-green-500 hover:bg-green-600 text-white text-sm`}
                            >
                              ENTRAR EM UMA EQUIPE
                            </Button>
                          </div>
                        )}
                      </div>

                      {/* Team role selector */}
                      {user.equipe && (
                        <div>
                          <label htmlFor="funcaoEquipe" className={`${labelStyle} mb-1`}>FUNÇÃO</label>
                          <div className="relative">
                            <select
                              name="funcaoEquipe"
                              id="funcaoEquipe"
                              value={displayData.funcaoEquipe}
                              onChange={() => { }} // TODO: Implementar mudança de função
                              className={`${inputStyle} appearance-none pr-8`}
                              disabled
                            >
                              <option value="COORDENADOR">COORDENADOR</option>
                              <option value="MEMBRO">MEMBRO</option>
                              <option value="VICE-LIDER">VICE-LIDER</option>
                            </select>
                            <ChevronDown size={20} className="absolute right-2 top-1/2 -translate-y-1/2 text-black pointer-events-none" />
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>

                  {/* Action buttons */}
                  <div className="space-y-3">
                    <Button
                      onClick={handleChangePassword}
                      className={`${buttonBaseStyle} w-full bg-white hover:bg-gray-100 text-black shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:shadow-[1px_1px_0px_0px_rgba(0,0,0,1)] active:shadow-none active:translate-x-[2px] active:translate-y-[2px]`}
                    >
                      <KeyRound size={18} className="mr-2" /> ALTERAR SENHA
                    </Button>
                    <Button
                      onClick={handleLogout}
                      className={`${buttonBaseStyle} w-full bg-white hover:bg-gray-100 text-black shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:shadow-[1px_1px_0px_0px_rgba(0,0,0,1)] active:shadow-none active:translate-x-[2px] active:translate-y-[2px]`}
                    >
                      <LogOut size={18} className="mr-2" /> SAIR
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EditarPerfilPage;
</file>

<file path="src/pages/Perfil/PerfilPage.tsx">
import { useNavigate } from "react-router-dom";
import { useState, useRef } from "react";
import { useAuth } from "../../contexts/AuthContext";
import { Button } from "../../components/ui/button";
import {
  Card,
  CardContent,
} from "../../components/ui/card";
import { PlayIcon, Trophy, TruckIcon, MapPin, DollarSign, Camera } from 'lucide-react';

interface UserStats {
  deliveries: number;
  distance: number;
  earnings: number;
  victories: number;
}

export const PerfilPage = () => {
  const navigate = useNavigate();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { user, logout } = useAuth();

  // Stats ainda estáticos (podem ser implementados depois)
  const [userStats] = useState<UserStats>({
    deliveries: 12,
    distance: 12,
    earnings: 12,
    victories: 12
  });

  // Avatar local (melhoria futura: integrar com backend)
  const [localAvatar, setLocalAvatar] = useState<string>("/mario.png");

  const handlePlayNow = () => {
    navigate("/select-vehicle");
  };

  const handleContinueGame = () => {
    navigate("/select-vehicle");
  };

  const handleCheckRanking = () => {
    // Navega para o ranking passando informação de que veio do perfil
    navigate("/ranking", { state: { from: 'profile' } });
  };

  const handlePhotoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = (e) => {
          const result = e.target?.result;
          if (typeof result === 'string') {
            setLocalAvatar(result);
          }
        };
        reader.readAsDataURL(file);
      } else {
        alert('Por favor, selecione apenas arquivos de imagem (PNG, JPG, GIF, etc.)');
      }
    }
  };

  const handleClickUpload = () => {
    fileInputRef.current?.click();
  };

  const handleEditProfile = () => {
    navigate("/perfil/editar");
  };

  const handleChangePassword = () => {
    navigate("/mudar-senha");
  };

  const handleLogout = () => {
    logout();
    navigate("/login");
  };

  // Se não há usuário logado, redireciona
  if (!user) {
    navigate("/login");
    return null;
  }

  // Calcula dados dinâmicos baseados no usuário real
  // PRIORIZAR NOME COMPLETO - se existir first_name E last_name, usa eles
  const displayName = user.first_name && user.last_name
    ? `${user.first_name} ${user.last_name}`
    : user.nickname || user.username;

  // Level e XP podem ser calculados baseado nas stats (implementação futura)
  const level = 12;
  const xp = 2450;
  const maxXp = 3000;
  const xpPercentage = Math.round((xp / maxXp) * 100);

  const titleStyle = {
    color: "#E3922A",
    textShadow: "2px 3px 0.6px #000"
  };

  return (
    <div className="bg-white flex flex-row justify-center w-full">
      <div className="w-full min-h-screen [background:linear-gradient(180deg,rgba(57,189,248,1)_0%,rgba(154,102,248,1)_100%)] relative overflow-hidden">
        {/* Decorative clouds */}
        <img
          className="w-[375px] h-[147px] absolute top-[120px] left-[157px] object-cover animate-float-right"
          alt="Cloud decoration"
          src="/nuvemleft.png"
        />
        <img
          className="w-[436px] h-[170px] absolute bottom-[30px] right-[27px] object-cover animate-float-left opacity-75 scale-110"
          alt="Cloud decoration"
          src="/nuvemright.png"
        />

        {/* Hidden file input for photo upload */}
        <input
          type="file"
          ref={fileInputRef}
          onChange={handlePhotoUpload}
          accept="image/*"
          className="hidden"
        />

        {/* Main content */}
        <div className="max-w-5xl mx-auto pt-20 px-4 relative z-10">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">

            {/* Left column - Profile info */}
            <div className="space-y-4">
              <Card className="border-2 border-solid border-black rounded-lg overflow-hidden">
                <CardContent className="p-4">
                  <div className="text-center">
                    <h2 className="[font-family:'Silkscreen',Helvetica] font-bold text-2xl pb-1 border-b-2 border-black" style={titleStyle}>
                      SEU PERFIL
                    </h2>

                    {/* Avatar section */}
                    <div className="mt-3 flex justify-center">
                      <div className="relative">
                        <div className="w-24 h-24 rounded-full bg-teal-100 border-4 border-teal-500 flex items-center justify-center overflow-hidden relative group">
                          <img
                            src={localAvatar}
                            alt="Avatar"
                            className="w-20 h-20 object-cover"
                          />

                          {/* Upload overlay */}
                          <div
                            className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-200 cursor-pointer rounded-full"
                            onClick={handleClickUpload}
                          >
                            <Camera size={20} className="text-white" />
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* User name - usando dados reais */}
                    <h3 className="[font-family:'Silkscreen',Helvetica] font-bold text-center text-xl mt-2">
                      {displayName.toUpperCase()}
                    </h3>

                    {/* Level display */}
                    <div className="flex items-center justify-center mt-1">
                      <span className="text-yellow-500 mr-1">🏆</span>
                      <span className="[font-family:'Silkscreen',Helvetica]">
                        NÍVEL {level}
                      </span>
                    </div>

                    {/* XP Progress bar */}
                    <div className="mt-4">
                      <div className="flex justify-between text-xs [font-family:'Silkscreen',Helvetica] mb-1">
                        <span>XP: {xp}/{maxXp}</span>
                        <span>{xpPercentage}%</span>
                      </div>
                      <div className="w-full h-4 bg-gray-200 rounded-full overflow-hidden border border-black">
                        <div
                          className="h-full bg-yellow-500"
                          style={{ width: `${xpPercentage}%` }}
                        ></div>
                      </div>
                    </div>

                    {/* Team info - usando dados reais do backend */}
                    <div className="mt-4 [font-family:'Silkscreen',Helvetica]">
                      <span className="font-bold">EQUIPE: </span>
                      <span className="text-orange-500 font-bold">
                        {user.equipe ? 'TEAM_NAME' : 'SEM EQUIPE'}
                      </span>
                    </div>

                    {/* Action buttons */}
                    <div className="grid grid-cols-3 gap-2 mt-3">
                      <Button
                        variant="outline"
                        className="flex flex-col items-center justify-center h-16 border-2 border-black"
                        onClick={handleEditProfile}
                      >
                        <span className="text-2xl">👤</span>
                        <span className="text-xs [font-family:'Silkscreen',Helvetica]">EDITAR PERFIL</span>
                      </Button>
                      <Button
                        variant="outline"
                        className="flex flex-col items-center justify-center h-16 border-2 border-black"
                        onClick={handleChangePassword}
                      >
                        <span className="text-2xl">🔑</span>
                        <span className="text-xs [font-family:'Silkscreen',Helvetica]">SENHA</span>
                      </Button>
                      <Button
                        variant="outline"
                        className="flex flex-col items-center justify-center h-16 border-2 border-black"
                        onClick={handleLogout}
                      >
                        <span className="text-2xl">↪️</span>
                        <span className="text-xs [font-family:'Silkscreen',Helvetica]">SAIR</span>
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Right column - Game info and stats */}
            <div className="space-y-4">
              {/* Play game card */}
              <Card className="border-2 border-solid border-black rounded-lg overflow-hidden">
                <CardContent className="p-4">
                  {/* Game title and play button */}
                  <div className="flex justify-between items-center">
                    {/* Game info */}
                    <div>
                      <h2 className="[font-family:'Silkscreen',Helvetica] font-bold text-2xl" style={titleStyle}>
                        ENTREGA EFICIENTE
                      </h2>
                      <p className="[font-family:'Silkscreen',Helvetica] text-sm mt-1">
                        CONTINUE SUA JORNADA DE ENTREGAS!
                      </p>
                    </div>

                    {/* Play button */}
                    <Button
                      onClick={handlePlayNow}
                      className="bg-orange-400 text-black hover:bg-orange-500 h-12 flex items-center justify-between px-4 rounded border-2 border-black [font-family:'Silkscreen',Helvetica] font-bold"
                    >
                      <span>JOGAR AGORA</span>
                      <PlayIcon className="ml-2" />
                    </Button>
                  </div>

                  {/* Other games link */}
                  <div className="text-center mt-1">
                    <button
                      onClick={() => navigate("/games")}
                      className="text-xs underline [font-family:'Silkscreen',Helvetica] text-blue-500"
                    >
                      JOGAR OUTRO JOGO!
                    </button>
                  </div>
                </CardContent>
              </Card>

              {/* Stats grid */}
              <div className="grid grid-cols-4 gap-3">
                {/* Deliveries */}
                <Card className="border-2 border-solid border-black rounded-lg overflow-hidden">
                  <CardContent className="py-3 px-4 flex flex-col items-center">
                    <TruckIcon size={24} />
                    <div className="[font-family:'Silkscreen',Helvetica] text-center mt-1">
                      <span className="text-xs">ENTREGAS</span>
                      <div className="font-bold">{userStats.deliveries}</div>
                    </div>
                  </CardContent>
                </Card>

                {/* Distance */}
                <Card className="border-2 border-solid border-black rounded-lg overflow-hidden">
                  <CardContent className="py-3 px-4 flex flex-col items-center">
                    <MapPin size={24} color="#4ade80" />
                    <div className="[font-family:'Silkscreen',Helvetica] text-center mt-1">
                      <span className="text-xs">DISTÂNCIA</span>
                      <div className="font-bold">{userStats.distance}</div>
                    </div>
                  </CardContent>
                </Card>

                {/* Earnings */}
                <Card className="border-2 border-solid border-black rounded-lg overflow-hidden">
                  <CardContent className="py-3 px-4 flex flex-col items-center">
                    <DollarSign size={24} color="#eab308" />
                    <div className="[font-family:'Silkscreen',Helvetica] text-center mt-1">
                      <span className="text-xs">GANHOS</span>
                      <div className="font-bold">{userStats.earnings}</div>
                    </div>
                  </CardContent>
                </Card>

                {/* Victories */}
                <Card className="border-2 border-solid border-black rounded-lg overflow-hidden">
                  <CardContent className="py-3 px-4 flex flex-col items-center">
                    <span className="text-2xl">🏆</span>
                    <div className="[font-family:'Silkscreen',Helvetica] text-center mt-1">
                      <span className="text-xs">VITÓRIAS</span>
                      <div className="font-bold">{userStats.victories}</div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Action cards */}
              <div className="grid grid-cols-2 gap-3">
                {/* Ranking card - agora com cursor pointer */}
                <Card className="border-2 border-solid border-black rounded-lg overflow-hidden cursor-pointer hover:bg-gray-50 transition-colors">
                  <CardContent className="p-4" onClick={handleCheckRanking}>
                    <div className="flex items-center">
                      <Trophy size={32} className="text-yellow-500" />
                      <div className="ml-3">
                        <h3 className="[font-family:'Silkscreen',Helvetica] font-bold" style={titleStyle}>
                          RANKING
                        </h3>
                        <p className="[font-family:'Silkscreen',Helvetica] text-xs">
                          VEJA OS MELHORES JOGADORES
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Continue game card */}
                <Card className="border-2 border-solid border-black rounded-lg overflow-hidden cursor-pointer hover:bg-gray-50 transition-colors">
                  <CardContent className="p-4" onClick={handleContinueGame}>
                    <div className="flex items-center">
                      <div className="w-8 h-8 bg-purple-700 rounded-full flex items-center justify-center">
                        <span className="text-white text-2xl">⏱️</span>
                      </div>
                      <div className="ml-3">
                        <h3 className="[font-family:'Silkscreen',Helvetica] font-bold" style={titleStyle}>
                          CONTINUAR
                        </h3>
                        <p className="[font-family:'Silkscreen',Helvetica] text-xs">
                          RETOMAR A ÚLTIMA PARTIDA
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PerfilPage;
</file>

<file path="src/pages/escolherVeiculo/VehicleSelectionPage.tsx">
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Vehicle } from '../../types/vehicle';
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
  type CarouselApi,
} from '@/components/ui/carousel';
import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  CalendarDays,
  MapPin,
  DollarSign,
} from 'lucide-react';
import { Button } from "@/components/ui/button";

// TODO: Ajustar imagens, (adicionar imagens ao banco?)
import caminhaoMedioPng from '@/assets/caminhao_medio.png';
import camihaoPequenoPng from '@/assets/caminhao_pequeno.png';
import carretaPng from '@/assets/carreta.png';
import camhionetePng from '@/assets/caminhonete.png';

// FIXME: Ajustar imagens para cada tipo de veiculo (permitir o envio de imagens ou ter um conjunto de imagens selecionaveis via admin?)
const getVehicleImage = (modelName: string) => {
  switch (modelName.toLowerCase()) {
    case 'caminhonete':
      return camhionetePng;
    case 'van':
      return camihaoPequenoPng;
    case 'caminhão médio':
      return caminhaoMedioPng;
    case 'carreta':
      return carretaPng;
    default:
      return camihaoPequenoPng;
  }
};


// O componente VehicleCard permanece o mesmo
const VehicleCard: React.FC<{
  vehicle: Vehicle;
  isSelected: boolean;
  onSelect: () => void;
}> = ({ vehicle, isSelected, onSelect }) => (
  <div
    className={`
      relative min-w-[280px] max-w-[320px] mx-4 cursor-pointer transition-transform duration-300
      ${isSelected ? 'scale-105 border-4 border-orange-500' : 'hover:scale-105 border border-gray-200'}
      bg-white p-4 rounded-xl shadow-xl flex flex-col justify-between
    `}
    onClick={onSelect}
  >
    <div>
      <div className="flex justify-center mb-2">
        <img src={vehicle.image} alt={vehicle.name} className="h-48 object-contain" />
      </div>

      <h3 className="font-['Silkscreen'] text-center text-xl font-bold mb-2">{vehicle.name}</h3>
      <ul className="text-sm space-y-1">
        <li>🧱 Capacidade: {vehicle.capacity} Kg</li>
        <li>🛢️ Tanque: {vehicle.maxCapacity} L</li>
        <li>🚗 Asfalto: {vehicle.consumption.asphalt} KM/L</li>
      </ul>
    </div>

    <p className="font-['Silkscreen'] text-orange-600 font-bold text-center mt-3 text-lg">
      R$ {vehicle.cost.toLocaleString()}
    </p>
  </div>
);

export const VehicleSelectionPage = () => {
  const navigate = useNavigate();

  // NOVO: Estados para guardar os veículos da API, o estado de loading e possíveis erros.
  const [vehicles, setVehicles] = useState<Vehicle[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const [selectedIndex, setSelectedIndex] = useState<number | null>(null); // Inicia como nulo
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [availableMoney] = useState(100000);
  const [api, setApi] = useState<CarouselApi>();

  // NOVO: useEffect para buscar os dados da API quando o componente for montado.
  useEffect(() => {
    const fetchVehicles = async () => {
      try {
        const apiUrl = `${import.meta.env.VITE_API_URL}/jogo1/veiculos/`;
        const response = await fetch(apiUrl);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const dataFromApi = await response.json();

        const formattedVehicles: Vehicle[] = dataFromApi.map((apiVehicle: any) => ({
          id: String(apiVehicle.id),
          name: apiVehicle.modelo,
          capacity: apiVehicle.capacidade_carga,
          consumption: {
            asphalt: parseFloat((apiVehicle.autonomia / apiVehicle.capacidade_combustivel).toFixed(2)),
            dirt: parseFloat(((apiVehicle.autonomia / apiVehicle.capacidade_combustivel) * 0.8).toFixed(2))
          },
          image: getVehicleImage(apiVehicle.modelo),
          maxCapacity: apiVehicle.capacidade_combustivel,
          currentFuel: apiVehicle.capacidade_combustivel,
          cost: parseFloat(apiVehicle.preco),
        }));

        setVehicles(formattedVehicles);
        if (formattedVehicles.length > 0) {
            setSelectedIndex(0); // Define o primeiro veículo como selecionado por padrão
        }

      } catch (e) {
        if (e instanceof Error) {
            setError(`Falha ao buscar veículos: ${e.message}`);
        } else {
            setError("Ocorreu um erro desconhecido.");
        }
        console.error(e);
      } finally {
        setIsLoading(false);
      }
    };

    fetchVehicles();
  }, []); // O array vazio [] garante que este efeito rode apenas uma vez.

  useEffect(() => {
    if (!api || selectedIndex === null) return;
    api.scrollTo(selectedIndex);
    const onSelect = () => {
      setSelectedIndex(api.selectedScrollSnap());
    };
    api.on('select', onSelect);
    return () => {
      api.off('select', onSelect);
    };
  }, [api, selectedIndex]);

  const handleVehicleSelect = (index: number) => {
    setSelectedIndex(index);
    setShowConfirmation(true);
  };

   const handleConfirm = () => {
    if (selectedIndex === null) return; // Proteção extra
    const selectedVehicle = vehicles[selectedIndex];
    if (selectedVehicle.cost <= availableMoney) {
      navigate('/mapa-rota', {
        state: {
          selectedVehicle: selectedVehicle,
          availableMoney: availableMoney - selectedVehicle.cost
        }
      });
    }
   };

  if (isLoading) {
    return <div className="bg-sky-100 min-h-screen flex items-center justify-center font-['Silkscreen'] text-2xl">Carregando veículos...</div>;
  }

  if (error) {
    return <div className="bg-red-100 min-h-screen flex items-center justify-center font-['Silkscreen'] text-2xl text-red-700">{error}</div>;
  }

  const selectedVehicle = selectedIndex !== null ? vehicles[selectedIndex] : null;

  return (
    <div className="bg-sky-100 min-h-screen flex flex-col items-center justify-center px-4 py-8">
      <div className="font-['Silkscreen'] text-lg absolute top-4 right-4">
        R$ {availableMoney.toLocaleString()}
      </div>

      <h1 className="font-['Silkscreen'] text-3xl mb-8 text-center">
        ESCOLHA UM CAMINHÃO
      </h1>

      <div className="relative w-full max-w-[1200px] px-16">
        <Carousel
          setApi={setApi}
          className="w-full"
          opts={{
            align: "center",
            loop: true,
          }}
        >
          <CarouselContent className="-ml-4 py-4 font-['Silkscreen'] ">
            {vehicles.map((vehicle, index) => (
              <CarouselItem key={vehicle.id} className="basis-auto md:basis-1/2 lg:basis-1/3 pl-4">
                <VehicleCard
                  vehicle={vehicle}
                  isSelected={selectedIndex === index}
                  onSelect={() => handleVehicleSelect(index)}
                />
              </CarouselItem>
            ))}
          </CarouselContent>

          <CarouselPrevious className="hidden md:flex opacity-100 -left-4 h-14 w-14 bg-orange-500 hover:bg-orange-600 transition-all duration-300 ease-in-out hover:scale-110 text-white border-none rounded-sm" />
          <CarouselNext className="hidden transition-all duration-300 ease-in-out hover:scale-110 md:flex opacity-100 -right-4 h-14 w-14 bg-orange-500 hover:bg-orange-600 text-white border-none rounded-sm" />
        </Carousel>
      </div>

      {selectedVehicle && (
        <Dialog open={showConfirmation} onOpenChange={setShowConfirmation}>
            <DialogContent className="sm:max-w-md font-['Silkscreen']">
                <DialogHeader>
                    <DialogTitle className="font-['Silkscreen'] flex items-center gap-2 text-xl">
                        Veículo Selecionado
                    </DialogTitle>
                </DialogHeader>
                <div className="space-y-3 text-sm">
                    <div>
                        <div className="flex items-center gap-4">
                            <img src={selectedVehicle.image} className="h-16 w-16 object-contain" />
                            <div>
                                <p className="font-['Silkscreen'] font-bold text-base">{selectedVehicle.name}</p>
                                <ul className="text-xs">
                                    <li>Capacidade: {selectedVehicle.capacity} Kg</li>
                                    <li>Tanque: {selectedVehicle.maxCapacity} L</li>
                                    <li>Asfalto: {selectedVehicle.consumption.asphalt} KM/L</li>
                                    <li>Terra: {selectedVehicle.consumption.dirt} KM/L</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div>
                        <h4 className="font-semibold mb-1 text-base">Detalhes da Compra</h4>
                        <div className="text-sm space-y-1">
                            <p className="flex items-center gap-2">
                                <CalendarDays size={16} /> Data/Hora: Agora
                            </p>
                            <p className="flex items-center gap-2">
                                <MapPin size={16} /> Local de Retirada: Base
                            </p>
                            <p className="font-['Silkscreen'] flex items-center gap-2 text-lg font-bold">
                                <DollarSign size={16} /> Total: R$ {selectedVehicle.cost.toLocaleString()}
                            </p>
                        </div>
                    </div>
                </div>
                <DialogFooter className="pt-4 font-['Silkscreen']">
                    <Button onClick={handleConfirm} className="bg-green-600 hover:bg-green-700 font-['Silkscreen']" disabled={availableMoney < selectedVehicle.cost}>
                        {availableMoney < selectedVehicle.cost ? "Dinheiro Insuficiente" : "Confirmar"}
                    </Button>
                    <Button variant="destructive" onClick={() => setShowConfirmation(false)} className="font-['Silkscreen']">
                        Cancelar
                    </Button>
                </DialogFooter >
            </DialogContent>
        </Dialog>
      )}
    </div>
  );
};
</file>

<file path="src/pages/mapaRota/routesData.ts">
// src/pages/mapaRota/routesData.ts

// Importações dos caminhos das rotas
import { route1Path } from './paths/route1Path';
import { route2Path } from './paths/route2Path';
import { route3Path } from './paths/route3Path';
import { route4Path } from './paths/route4Path';

// ==================== INTERFACES ====================

// Interface para segmentos de estrada de terra
export interface DirtSegment {
  startKm: number;        // Km inicial do trecho de terra (relativo ao início da rota)
  endKm: number;          // Km final do trecho de terra
  condition: 'leve' | 'moderada' | 'severa';  // Qualidade do trecho de terra
  eventChance: number;    // Probabilidade de um evento ocorrer (0.0 a 1.0)
  speedFactor: number;    // Fator de redução de velocidade (ex: 0.7 para 70% da velocidade normal)
  description?: string;   // Descrição opcional do trecho
}

// Interface principal para definição de rotas
export interface Route {
  routeId: number;
  name: string;
  distance: number;
  estimatedTime: string;
  estimatedTimeHours: number;
  cities: string[];
  roads: string[];
  startCoordinates: [number, number];
  endCoordinates: [number, number];
  waypoints?: [number, number][];

  // Informações de pedágios
  tollBooths: {
    totalCost: number;
    location: string;
    costPerAxle: number;
    totalCostExample4Axles: number;
    coordinates: [number, number];
  }[];

  // Limites de velocidade por estrada
  speedLimits: {
    road: string;
    limit: string,
    value?: number,
    coordinates?: [number, number]
  }[];



  // Informações de segurança
  safety: {
    robberyRisk: 'Baixo' | 'Médio' | 'Alto';
    roadHazards: string;
  };

  // Condições da estrada
  dirtRoad: boolean;
  dirtRoadDetails?: string;
  roadConditions: 'Boa' | 'Regular' | 'Ruim';
  constructionZones?: string;

  // Pontos de interesse e paradas
  pois?: {
    type: 'construction' | 'danger' | 'rest' | 'gas';
    location: string;
    description: string;
    coordinates: [number, number];
  }[];

  restStops?: {
    location: string;
    description: string;
    coordinates: [number, number];
    type: 'rest' | 'construction' | 'gas' | 'toll' | 'danger';
  }[];

  // Custos e coordenadas
  fuelCostPerKm: number;
  dangerZonesDetails?: string;
  pathCoordinates?: [number, number][];
  actualDistance?: number;
  actualDuration?: number;

  // Zonas de perigo
  dangerZones?: {
    location: string;
    startKm: number;
    description: string;
    coordinates: [number, number];
    riskLevel: 'Baixo' | 'Médio' | 'Alto';
  }[];

  dirtSegments?: DirtSegment[];
}

// ==================== FUNÇÕES UTILITÁRIAS ====================

// Função para converter string de tempo em horas decimais
export const parseEstimatedTime = (timeStr: string): number => {
  // Formato "7h30min" ou "7H30"
  const timeMatch = timeStr.match(/(\d+)[hH]?(\d+)?m?i?n?/);
  if (timeMatch) {
    const hours = parseInt(timeMatch[1], 10);
    const minutes = timeMatch[2] ? parseInt(timeMatch[2], 10) : 0;
    return hours + minutes / 60;
  }

  // Formato "7-8h" (range)
  const parts = timeStr.match(/(\d+)\s*-\s*(\d+)?h/i);
  if (parts) {
    const minHours = parseInt(parts[1], 10);
    const maxHours = parts[2] ? parseInt(parts[2], 10) : minHours;
    return (minHours + maxHours) / 2;
  }

  // Formato simples "7h"
  const singleHourMatch = timeStr.match(/(\d+)h/i);
  if (singleHourMatch) {
    return parseInt(singleHourMatch[1], 10);
  }

  return 0;
};

// ==================== DEFINIÇÃO DAS ROTAS ====================

export const routes: Route[] = [
  // ROTA 1: Padrão/Eficiente
  {
    routeId: 1,
    name: "Rota Padrão: Juazeiro-Salvador via BR-407 e BR-324 (Eficiente)",
    distance: 513,
    estimatedTime: "7h30min",
    estimatedTimeHours: parseEstimatedTime("7h30min"),

    cities: [
      "Juazeiro", "Jaguarari", "Senhor do Bonfim", "Ponto Novo",
      "Capim Grosso", "Riachão do Jacuípe", "Feira de Santana",
      "Amélia Rodrigues", "Simões Filho", "Salvador"
    ],

    roads: ["BR-407", "BR-324"],
    startCoordinates: [-9.449771, -40.524226],
    endCoordinates: [-12.954121, -38.471283],
    waypoints: [[-12.2667, -38.9667]],

    tollBooths: [
      {
        location: "BR-324 - Pedágio 02 - Via Bahia (Amélia Rodrigues)",
        costPerAxle: 3.50,
        totalCostExample4Axles: 14.00,
        coordinates: [-12.447111365070798, -38.71353301661456],
        totalCost: 0
      },
      {
        location: "BR-324 - BASE DE APOIO - VIA BAHIA",
        costPerAxle: 3.50,
        totalCostExample4Axles: 14.00,
        coordinates: [-12.51369524173777, -38.62460652443481],
        totalCost: 0
      },
      {
        location: "BR-324 - Pedágio 01 - Via Bahia (Simões Filho)",
        costPerAxle: 3.50,
        totalCostExample4Axles: 14.00,
        coordinates: [-12.751127634778944, -38.43194853442343],
        totalCost: 0
      },
      {
        location: "BR-324 - BASE DE APOIO - VIA BAHIA",
        costPerAxle: 3.50,
        totalCostExample4Axles: 14.00,
        coordinates: [-12.825310059845428, -38.40966558167229],
        totalCost: 0
      },
      {
        location: "Pedágio da Rodovia CIA",
        costPerAxle: 3.50,
        totalCostExample4Axles: 14.00,
        coordinates: [-12.847055107561344, -38.36165344035957],
        totalCost: 0
      }
    ],

    speedLimits: [
      {
        road: "BR-407",
        limit: "80 km/h",
        value: 80,
        coordinates: [-9.990413, -40.239591],
      },
      {
        road: "BR-407",
        limit: "80 km/h",
        value: 80,
        coordinates: [-11.817558, -39.375948],
      },
      {
        road: "BR-407",
        limit: "60 km/h",
        value: 60,
        coordinates: [-10.517028, -40.142195]
      },
      {
        road: "BR-324",
        limit: "100 km/h",
        value: 100,
        coordinates: [-12.743087, -38.437596]
      },
      {
        road: "BR-324",
        limit: "50 km/h",
        value: 50,
        coordinates: [-12.447111365070798, -38.71353301661456]
      }
    ],

    safety: {
      robberyRisk: "Médio",
      roadHazards: "Tráfego intenso na BR-324 (Feira-Salvador). Risco de animais na BR-407. Pequeno trecho não pavimentado."
    },

    dirtRoad: true,
    dirtRoadDetails: "Pequeno trecho não pavimentado na BR-407 próximo a áreas rurais.",
    roadConditions: "Boa",
    constructionZones: "Manutenção pontual na BR-324.",

    restStops: [{
      location: "Limite de velocidade de 50km/h",
      description: "radares pela rodovia de 50km/h",
      coordinates: [-12.447111365070798, -38.71353301661456],
      type: "gas"
    }],

    fuelCostPerKm: 4.50,
    dangerZonesDetails: "BR-324 (Feira-Salvador): alto fluxo. BR-407: animais, fadiga.",

    dangerZones: [
      {
        location: "Estradas secundárias em Nova Fátima",
        description: "Vias isoladas e pouco policiadas",
        coordinates: [-11.6049, -39.6301],
        riskLevel: "Médio"
      },
      {
        location: "BR-324 próximo a Feira de Santana",
        description: "Alto fluxo de veículos e histórico de roubos de carga",
        coordinates: [-12.2267, -38.9648],
        riskLevel: "Alto"
      },
      {
        location: "BR-407 trecho Jaguarari",
        description: "Área isolada com histórico de assaltos",
        coordinates: [-10.2550, -40.1924],
        riskLevel: "Médio"
      }
    ],

    dirtSegments: [{
      startKm: 180,
      endKm: 195,
      condition: 'leve',
      eventChance: 0.05,
      speedFactor: 0.85,
      description: "Trecho da BR-407 com pavimento deteriorado/em transição para terra."
    }],

    pathCoordinates: route1Path,
    actualDistance: 505.7681,
    actualDuration: 24512.5
  },

  // ROTA 2: Alternativa (Evitando Rodovias Expressas)
  {
    routeId: 2,
    name: "Rota Alternativa: Juazeiro-Salvador (Evitando Rodovias Expressas)",
    distance: 529,
    estimatedTime: "7h50min",
    estimatedTimeHours: parseEstimatedTime("7h50min"),

    cities: [
      "Juazeiro", "Jaguarari", "Senhor do Bonfim", "Filadélfia",
      "Ponto Novo", "Capim Grosso", "Nova Fátima", "Riachão do Jacuípe",
      "Tanquinho", "Feira de Santana", "Amélia Rodrigues", "Simões Filho", "Salvador"
    ],

    roads: ["BR-407 (ou paralelas)", "BR-324 (ou paralelas/vias locais)"],
    startCoordinates: [-9.449771, -40.524226],
    endCoordinates: [-12.954121, -38.471283],

    tollBooths: [
      {
        location: "BR-324 - Pedágio 01 - Via Bahia (Simões Filho)",
        costPerAxle: 3.50,
        totalCostExample4Axles: 14.00,
        coordinates: [-12.751127634778944, -38.43194853442343],
        totalCost: 0
      },
      {
        location: "BR-324 - BASE DE APOIO - VIA BAHIA",
        costPerAxle: 3.50,
        totalCostExample4Axles: 14.00,
        coordinates: [-12.825310059845428, -38.40966558167229],
        totalCost: 0
      }
    ],

    speedLimits: [
      {
        road: "BR-235",
        limit: "80 km/h",
        value: 80,
        coordinates: [-9.460458, -40.429308]
      },
      {
        road: "BR-235",
        limit: "40 km/h",
        value: 40,
        coordinates: [-12.193182, -38.418788]
      },
      {
        road: "BR-110",
        limit: "60 km/h",
        value: 60,
        coordinates: [-11.225797, -38.485761]
      },
      {
        road: "BR-324",
        limit: "100 km/h",
        value: 100,
        coordinates: [-12.5778, -38.5405]
      }
    ],

    safety: {
      robberyRisk: "Médio",
      roadHazards: "Qualidade variável em trechos alternativos, travessias urbanas frequentes."
    },

    dirtRoad: true,
    dirtRoadDetails: "Vários trechos não pavimentados ou com asfalto ruim ao passar por Filadélfia e em desvios de cidades maiores.",
    roadConditions: "Regular",
    constructionZones: "Menos provável, mas vias alternativas podem ter má conservação.",

    restStops: [
      {
        location: "BR-324 - Praça Amélia Rodrigues",
        description: "Boa disponibilidade ao longo das BRs, especialmente Feira de Santana.",
        coordinates: [-38.763810, -12.398770],
        type: "rest"
      },
      {
        location: "BR-324 - Praça Amélia Rodrigues",
        description: "Boa disponibilidade ao longo das BRs, especialmente Feira de Santana.",
        coordinates: [-38.763810, -12.398770],
        type: "rest"
      }
    ],

    fuelCostPerKm: 4.65,
    dangerZonesDetails: "Vias alternativas com menor manutenção, sinalização precária.",

    dangerZones: [
      {
        location: "BR-235 após Uauá",
        description: "Área deserta e com pouco policiamento",
        coordinates: [-9.8367, -39.4890],
        riskLevel: "Médio"
      },
      {
        location: "Estradas secundárias em Canché",
        description: "Vias isoladas e pouco policiadas",
        coordinates: [-9.906043261891755, -38.78612677041902],
        riskLevel: "Médio"
      },
      {
        location: "Trecho entre xuqyê e Bjo. Grande",
        description: "Áreas de vegetação densa facilitam emboscadas",
        coordinates: [-10.024041044108136, -38.51265879186026],
        riskLevel: "Alto"
      }
    ],

    dirtSegments: [
      {
        startKm: 150,
        endKm: 170,
        condition: 'moderada',
        eventChance: 0.15,
        speedFactor: 0.70,
        description: "Estrada vicinal não pavimentada na região de Filadélfia."
      },
      {
        startKm: 350,
        endKm: 365,
        condition: 'leve',
        eventChance: 0.10,
        speedFactor: 0.80,
        description: "Trecho alternativo com pavimento irregular para evitar centro urbano."
      }
    ],

    pathCoordinates: route2Path,
    actualDistance: 658.2524000000001,
    actualDuration: 32789.1
  },

  // ROTA 3: Econômica (Evitando Pedágios)
  {
    routeId: 3,
    name: "Rota Econômica: Juazeiro-Salvador (Evitando Pedágios)",
    distance: 533,
    estimatedTime: "8h20min",
    estimatedTimeHours: parseEstimatedTime("8h20min"),

    cities: [
      "Juazeiro", "Jaguarari", "Senhor do Bonfim", "Capim Grosso",
      "Riachão do Jacuípe", "Feira de Santana", "Santanópolis",
      "Conceição da Feira", "Candeias", "Simões Filho", "Salvador"
    ],

    roads: ["BR-407", "BR-324 (trechos)", "BA-504", "BA-506", "Estradas Municipais"],
    startCoordinates: [-9.449771, -40.524226],
    endCoordinates: [-12.954121, -38.471283],

    tollBooths: [{
      location: "BR-324 - BASE DE APOIO - VIA BAHIA",
      costPerAxle: 3.50,
      totalCostExample4Axles: 14.00,
      coordinates: [-12.825310059845428, -38.40966558167229],
      totalCost: 0
    }],

    speedLimits: [
      {
        road: "BR-407",
        limit: "80 km/h",
        value: 80,
        coordinates: [-9.990413, -40.239591],
      },
      {
        road: "BR-407",
        limit: "80 km/h",
        value: 80,
        coordinates: [-11.817558, -39.375948],
      },
      {
        road: "BR-407",
        limit: "60 km/h",
        value: 60,
        coordinates: [-10.517028, -40.142195]
      },
      {
        road: "BR-324",
        limit: "100 km/h",
        value: 100,
        coordinates: [-12.743087, -38.437596]
      },
      {
        road: "BR-324",
        limit: "40 km/h",
        value: 40,
        coordinates: [-12.630725, -38.622729]
      }
    ],

    safety: {
      robberyRisk: "Médio",
      roadHazards: "Desvios por estradas locais com baixa manutenção, má sinalização."
    },

    dirtRoad: true,
    dirtRoadDetails: "Extensos trechos de estradas de terra ou mal conservadas nos desvios para evitar pedágios, especialmente entre Santanópolis e Candeias.",
    roadConditions: "Ruim",
    constructionZones: "Improvável em desvios, mas vias podem estar danificadas.",

    restStops: [
      {
        location: "BR-324 - Praça Amélia Rodrigues",
        description: "Boa disponibilidade ao longo das BRs, especialmente Feira de Santana.",
        coordinates: [-38.763810, -12.398770],
        type: "rest"
      },
      {
        location: "BR-324 - Praça Amélia Rodrigues",
        description: "Boa disponibilidade ao longo das BRs, especialmente Feira de Santana.",
        coordinates: [-38.763810, -12.398770],
        type: "rest"
      }
    ],

    fuelCostPerKm: 4.80,
    dangerZonesDetails: "Desvios por vias não pavimentadas/mal conservadas, isoladas.",

    dangerZones: [
      {
        location: "Estradas secundárias em Nova Fátima",
        startKm: 121,
        description: "Vias isoladas e pouco policiadas",
        coordinates: [-11.6049, -39.6301],
        riskLevel: "Médio"
      },
      {
        location: "BR-324 próximo a Feira de Santana",
        startKm: 454,
        description: "Alto fluxo de veículos e histórico de roubos de carga",
        coordinates: [-12.2267, -38.9648],
        riskLevel: "Alto"
      },
      {
        location: "BR-407 trecho Jaguarari",
        startKm: 121,
        description: "Área isolada com histórico de assaltos",
        coordinates: [-10.2550, -40.1924],
        riskLevel: "Médio"
      },
      {
        location: "Desvio em Santanópolis",
        startKm: 479,
        description: "Estrada secundária com pouca iluminação e fluxo",
        coordinates: [-12.5025, -39.0013],
        riskLevel: "Alto"
      },
      {
        location: "Entrada para Candeias",
        startKm: 502,
        description: "Ponto conhecido de abordagens a caminhões",
        coordinates: [-12.6737, -38.5514],
        riskLevel: "Alto"
      }
    ],

    dirtSegments: [
      {
        startKm: 250,
        endKm: 280,
        condition: 'severa',
        eventChance: 0.25,
        speedFactor: 0.50,
        description: "Estrada municipal de terra em péssimas condições como parte do desvio de pedágio."
      },
      {
        startKm: 400,
        endKm: 420,
        condition: 'moderada',
        eventChance: 0.20,
        speedFactor: 0.65,
        description: "Trecho de BA não pavimentada ou com muitos buracos."
      }
    ],

    pathCoordinates: route3Path,
    actualDistance: 547.4595,
    actualDuration: 28439.700000000004
  },

  // ROTA 4: Via Uauá
  {
    routeId: 4,
    name: "Rota via Uauá: Juazeiro-Salvador (BR-235, BR-116, BR-324)",
    distance: 558,
    estimatedTime: "8h28min",
    estimatedTimeHours: parseEstimatedTime("8h28min"),

    cities: [
      "Juazeiro", "Uauá", "Euclides da Cunha", "Teofilândia",
      "Serrinha", "Feira de Santana", "Simões Filho", "Salvador"
    ],

    roads: ["BR-235", "BR-116", "BR-324"],
    startCoordinates: [-9.449771, -40.524226],
    endCoordinates: [-12.954121, -38.471283],
    waypoints: [[-9.8364, -39.4831]],

    tollBooths: [
      {
        location: "BR-324 - Pedágio 02 - Via Bahia (Amélia Rodrigues)",
        costPerAxle: 3.50,
        totalCostExample4Axles: 14.00,
        coordinates: [-12.447111365070798, -38.71353301661456],
        totalCost: 0
      },
      {
        location: "BR-324 - BASE DE APOIO - VIA BAHIA",
        costPerAxle: 3.50,
        totalCostExample4Axles: 14.00,
        coordinates: [-12.51369524173777, -38.62460652443481],
        totalCost: 0
      },
      {
        location: "BR-324 - Pedágio 01 - Via Bahia (Simões Filho)",
        costPerAxle: 3.50,
        totalCostExample4Axles: 14.00,
        coordinates: [-12.751127634778944, -38.43194853442343],
        totalCost: 0
      },
      {
        location: "BR-324 - BASE DE APOIO - VIA BAHIA",
        costPerAxle: 3.50,
        totalCostExample4Axles: 14.00,
        coordinates: [-12.825310059845428, -38.40966558167229],
        totalCost: 0
      },
      {
        location: "Pedágio da Rodovia CIA",
        costPerAxle: 3.50,
        totalCostExample4Axles: 14.00,
        coordinates: [-12.847055107561344, -38.36165344035957],
        totalCost: 0
      }
    ],

    speedLimits: [
      {
        road: "BR-324",
        limit: "100 km/h",
        value: 100,
        coordinates: [-9.961578, -39.228228]
      },
      {
        road: "BR-324",
        limit: "100 km/h",
        value: 100,
        coordinates: [-10.961665, -38.791498]
      },
      {
        road: "BR-324",
        limit: "80 km/h",
        value: 80,
        coordinates: [-12.5778, -38.5405]
      },
      {
        road: "BR-324",
        limit: "50 km/h",
        value: 50,
        coordinates: [-12.7905, -38.4055]
      }
    ],

    safety: {
      robberyRisk: "Médio",
      roadHazards: "BR-235: trechos com pavimento irregular/obras. BR-116: tráfego intenso."
    },

    dirtRoad: true,
    dirtRoadDetails: "Trechos significativos da BR-235 antes de Euclides da Cunha com pavimento ruim ou em obras, podendo incluir desvios por terra.",
    roadConditions: "Regular",
    constructionZones: "Obras na BR-235. Manutenção pontual BR-116/324.",

    restStops: [
      {
        location: "BR-324 - Praça Amélia Rodrigues",
        description: "Boa disponibilidade ao longo das BRs, especialmente Feira de Santana.",
        coordinates: [-38.763810, -12.398770],
        type: "rest"
      },
      {
        location: "BR-324 - Praça Amélia Rodrigues",
        description: "Boa disponibilidade ao longo das BRs, especialmente Feira de Santana.",
        coordinates: [-38.763810, -12.398770],
        type: "rest"
      }
    ],

    fuelCostPerKm: 4.85,
    dangerZonesDetails: "Isolamento e má conservação em trechos da BR-235. BR-116: pontos de acidente/roubo.",

    dangerZones: [
      {
        location: "BR-235 após Uauá",
        startKm: 90,
        description: "Área deserta e com pouco policiamento",
        coordinates: [-9.8367, -39.4890],
        riskLevel: "Médio"
      },
      {
        location: "BR-116 próximo a Serrinha",
        startKm: 341,
        description: "Região com histórico de roubos de carga",
        coordinates: [-11.6664, -39.0009],
        riskLevel: "Alto"
      },
      {
        location: "BR-324 próximo a Feira de Santana",
        startKm: 453,
        description: "Alto fluxo de veículos e histórico de roubos de carga",
        coordinates: [-12.2267, -38.9648],
        riskLevel: "Alto"
      }
    ],

    dirtSegments: [
      {
        startKm: 80,
        endKm: 120,
        condition: 'moderada',
        eventChance: 0.20,
        speedFactor: 0.70,
        description: "Longo trecho da BR-235 com obras e pavimento irregular, com possíveis desvios por terra."
      },
      {
        startKm: 180,
        endKm: 190,
        condition: 'leve',
        eventChance: 0.10,
        speedFactor: 0.80,
        description: "Pequeno trecho da BR-235 com manutenção pendente."
      }
    ],

    pathCoordinates: route4Path,
    actualDistance: 552.2648,
    actualDuration: 25854.400000000005
  }
];

// ==================== COORDENADAS DE REFERÊNCIA ====================
// Coordenadas comentadas para referência das rotas (comentários originais mantidos)

/* ROTA 1 - Coordenadas principais:
[-40.524226, -9.449771],     // Juazeiro, BA
[-40.19235517511953, -10.255016465477025], // Jaguarari, BA
[-40.1827195646563, -10.452630276902312],  // Senhor do Bonfim, BA
[-40.11148486357506, -10.86341165864542],  // Ponto Novo, BA
[-40.01159638752269, -11.379139470679446], // Capim Grosso, BA
[-39.38642607361227, -11.811744075350651], // Riachão do Jacuípe, BA
[-38.9648952037257, -12.226149840077687],  // Feira de Santana, BA
[-38.76160923261481,-12.399765572679026],  // Amélia Rodrigues, BA
[-38.40554149637575, -12.790457469442282], // Simões Filho, BA
[-38.471283, -12.954121]     // Salvador, BA
*/

/* ROTA 2 - Coordenadas principais:
[-40.524226, -9.449771],     // Juazeiro, BA
[-39.48895352884815, -9.8367178609971],    // Uauá
[-39.030031433610205, -9.893492609800445], // Canudos
[-38.31968694052241, -10.091972274402044], // Jeremoabo
[-38.531984239515374, -10.834185129812898], // Ribeira do Pombal
[-38.32864850143622, -11.362384601650396], // Olindina
[-38.54051707214044, -12.577808594195744], // Rotatória
[-38.471283, -12.954121]     // Salvador, BA
*/

/* ROTA 3 - Coordenadas principais:
[-40.524226, -9.449771],     // Juazeiro, BA
[-40.19235517511953, -10.255016465477025], // Jaguarari, BA
[-40.1827195646563, -10.452630276902312],  // Senhor do Bonfim, BA
[-40.12199139370722, -10.734602645529307], // Filadélfia, BA
[-40.11148486357506, -10.86341165864542],  // Ponto Novo, BA
[-40.01159638752269, -11.379139470679446], // Capim Grosso, BA
[-39.63012308333791, -11.604910604561683], // Nova Fátima, BA
[-39.386016513740714, -11.812002334906955], // Riachão do Jacuípe, BA
[-39.105426135815016, -11.977888372700807], // Tanquinho, BA
[-38.96489118234495, -12.226633662941902], // Feira de Santana, BA
[-39.00125451098019, -12.502498182414648], // Conceição da Feira, BA
[-38.93928270420547,-12.559478928789718],  // Belém da Cachoeira
[-38.551409899588734, -12.673743454857682], // Candeias, BA
[-38.40554149637575, -12.790457469442282], // Simões Filho, BA
[-38.471283, -12.954121]     // Salvador, BA
*/

/* ROTA 4 - Coordenadas principais:
[-40.524226, -9.449771],     // Juazeiro, BA
[-39.48895352884815, -9.8367178609971],    // Uauá
[-39.01174091970563, -10.501687409845562], // Euclides da Cunha, BA
[-38.99623833743285, -11.482162269661481], // Teofilândia, BA
[-39.000897603993025, -11.666422677129212], // Serrinha, BA
[-38.96489118234495, -12.226633662941902], // Feira de Santana, BA
[-38.40554149637575, -12.790457469442282], // Simões Filho, BA
[-38.471283, -12.954121]     // Salvador, BA
*/
</file>

<file path="src/pages/auth/Login/Login.tsx">
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "../../../components/ui/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "../../../components/ui/card";
import { Input } from "../../../components/ui/input";
import { ArrowLeft, House, AlertCircle } from 'lucide-react';
import { ButtonHomeBack } from "@/components/ButtonHomeBack";
import { useAuth } from "../../../contexts/AuthContext";

export const Login = () => {
  const navigate = useNavigate();
  const { login } = useAuth();
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const handleForgotPassword = (e: React.MouseEvent) => {
    e.preventDefault();
    navigate("/forgot-password");
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!username || !password) {
      setError("Por favor, preencha todos os campos");
      return;
    }

    setLoading(true);
    setError("");

    try {
      await login(username, password);
      navigate("/ranking");
    } catch (error: any) {
      console.error("Erro completo de login:", error);
      if (error.response && error.response.status === 401) {
        setError("Nome de usuário ou senha inválidos");
      } else if (error.response && error.response.data) {
        if (error.response.data.detail) {
          setError(error.response.data.detail);
        } else if (typeof error.response.data === 'object') {
          try {
            const errorMessages = Object.entries(error.response.data)
              .map(([key, value]) => Array.isArray(value) ? value.join(", ") : `${key}: ${value}`)
              .join("; ");
            setError(errorMessages);
          } catch (e) {
            setError("Falha ao realizar login. Verifique suas credenciais.");
          }
        } else {
          setError("Falha ao realizar login. Verifique suas credenciais.");
        }
      } else if (error.request) {
        setError("O servidor não respondeu. Verifique sua conexão.");
      } else {
        setError("Erro de conexão. Tente novamente mais tarde.");
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-white flex flex-row justify-center w-full">
      <div className="w-full min-h-screen [background:linear-gradient(180deg,rgba(32,2,89,1)_0%,rgba(121,70,213,1)_100%)] relative overflow-hidden">
        <img
          className="w-[375px] h-[147px] absolute top-[120px] left-[157px] object-cover animate-float-right"
          alt="Nuvem"
          src="/nuvemleft.png"
        />
        <img
          className="w-[436px] h-[170px] absolute bottom-[30px] right-[27px] object-cover animate-float-left opacity-75 scale-110"
          alt="Nuvem"
          src="/nuvemright.png"
        />

        <div className="flex gap-5 absolute top-14 left-[33px]">
          <ButtonHomeBack onClick={() => navigate("/")}><ArrowLeft /></ButtonHomeBack>
          <ButtonHomeBack onClick={() => navigate("/")}><House /></ButtonHomeBack>
        </div>

        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
          <Card className="w-[700px] h-auto rounded-[18px] border-2 border-solid border-black bg-white">
            <CardHeader className="pb-0">
              <CardTitle className="text-[35px] text-center [font-family:'Silkscreen',Helvetica] font-bold">
                LOGIN
              </CardTitle>
            </CardHeader>
            <CardContent className="pt-1 px-[45px]">
              <form className="space-y-2" onSubmit={handleSubmit}>
                <div className="space-y-2">
                  <label
                    htmlFor="username"
                    className="block [font-family:'Silkscreen',Helvetica] font-bold text-black text-[25px]"
                  >
                    Usuário
                  </label>
                  <Input
                    id="username"
                    type="text"
                    className="h-[55px] rounded-xl border border-solid border-black [font-family:'Silkscreen',Helvetica] text-[20px]"
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                  />
                </div>

                <div className="space-y-2">
                  <label
                    htmlFor="password"
                    className="block [font-family:'Silkscreen',Helvetica] font-bold text-black text-[25px]"
                  >
                    Senha
                  </label>
                  <Input
                    id="password"
                    type="password"
                    className="h-[55px] rounded-xl border border-solid border-black [font-family:'Silkscreen',Helvetica] text-[20px]"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                  />
                </div>

                {error && (
                  <div className="text-red-500 flex items-center gap-2 my-2">
                    <AlertCircle size={20} />
                    <span>{error}</span>
                  </div>
                )}

                <div className="flex justify-end">
                  <a
                    href="#"
                    onClick={handleForgotPassword}
                    className="[font-family:'Silkscreen',Helvetica] font-normal text-[#167dd2] underline text-[20px]"
                  >
                    Esqueci a senha
                  </a>
                </div>

                <div className="flex justify-between pt-4">
                  <Button
                    type="button"
                    onClick={() => navigate("/cadastro")}
                    className="w-[274px] h-[53px] bg-[#e3922a] rounded-md [font-family:'Silkscreen',Helvetica] font-bold text-black text-[25px] hover:bg-[#e3922a] transform transition-transform duration-300 hover:scale-105">
                    Cadastro
                  </Button>
                  <Button
                    type="submit"
                    disabled={loading}
                    className="w-[274px] h-[53px] bg-[#e3922a] rounded-md [font-family:'Silkscreen',Helvetica] font-bold text-black text-[25px] hover:bg-[#e3922a] transform transition-transform duration-300 hover:scale-105">
                    {loading ? "Carregando..." : "Login"}
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="package.json">
{
  "name": "app",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "@tanstack/react-query": "^5.80.6",
    "@tanstack/react-query-devtools": "^5.80.6",
    "@types/react-router-dom": "^5.3.3",
    "axios": "^1.9.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "embla-carousel-react": "^8.6.0",
    "http-proxy-middleware": "^3.0.5",
    "leaflet": "^1.9.4",
    "lucide-react": "^0.506.0",
    "radix-ui": "^1.3.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-leaflet": "^5.0.0",
    "react-router-dom": "^7.6.2",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@types/leaflet": "^1.9.17",
    "@types/node": "^22.15.3",
    "@types/react": "^19.1.4",
    "@types/react-dom": "^19.1.5",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.24.1",
    "vite": "^6.2.0"
  }
}
</file>

<file path="src/pages/mapaRota/MapComponent.tsx">
// src/pages/mapaRota/MapComponent.tsx

import React, { useState, useRef, useEffect, useCallback, useMemo } from 'react';
import { MapContainer, TileLayer, Polyline, Marker, Popup, useMapEvents } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';
import { routes, Route, parseEstimatedTime, DirtSegment } from './routesData';
import { useLocation, useNavigate } from 'react-router-dom';
import { FuelModal } from './FuelModal';
import { Vehicle } from '../../types/vehicle';
import { ArrowLeft } from 'lucide-react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { GameService } from '../../api/gameService';

// --- Correção para o ícone padrão do Leaflet ---
import defaultIcon from 'leaflet/dist/images/marker-icon.png';
import iconShadow from 'leaflet/dist/images/marker-shadow.png';

let DefaultIcon = L.icon({
  iconUrl: defaultIcon,
  shadowUrl: iconShadow,
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34]
});
L.Marker.prototype.options.icon = DefaultIcon;

// --- Ícones Customizados ---
import truckIconSvg from '@/assets/truck-solid.svg';

const truckIcon = L.icon({
  iconUrl: truckIconSvg,
  iconSize: [40, 40],
  iconAnchor: [20, 20],
  popupAnchor: [0, -20]
});

// Outros ícones
const tollIcon = L.icon({ iconUrl: 'https://cdn-icons-png.flaticon.com/512/2297/2297592.png', iconSize: [30, 30], iconAnchor: [15, 15] });
const dangerIcon = L.icon({ iconUrl: 'https://cdn-icons-png.flaticon.com/512/1008/1008928.png', iconSize: [30, 30], iconAnchor: [15, 15] });
const restStopIcon = L.icon({ iconUrl: 'https://cdn-icons-png.flaticon.com/512/6807/6807796.png', iconSize: [30, 30], iconAnchor: [15, 15] });
const constructionIcon = L.icon({ iconUrl: 'https://cdn-icons-png.flaticon.com/512/4725/4725077.png', iconSize: [30, 30], iconAnchor: [15, 15] });
const gasStationIcon = L.icon({ iconUrl: 'https://cdn-icons-png.flaticon.com/512/465/465090.png', iconSize: [30, 30], iconAnchor: [15, 15] });

// Ícones de risco
const lowRiskIcon = L.icon({ iconUrl: 'https://cdn-icons-png.flaticon.com/512/6276/6276686.png', iconSize: [30, 30], iconAnchor: [15, 15] });
const mediumRiskIcon = L.icon({ iconUrl: 'https://cdn-icons-png.flaticon.com/512/4751/4751259.png', iconSize: [30, 30], iconAnchor: [15, 15] });
const highRiskIcon = L.icon({ iconUrl: 'https://cdn-icons-png.flaticon.com/512/900/900532.png', iconSize: [30, 30], iconAnchor: [15, 15] });

// Ícones de velocidade
const speedLimitIcon20 = L.icon({ iconUrl: 'https://cdn-icons-png.flaticon.com/512/1670/1670172.png', iconSize: [30, 30], iconAnchor: [15, 15] });
const speedLimitIcon40 = L.icon({ iconUrl: 'https://cdn-icons-png.flaticon.com/512/5124/5124881.png', iconSize: [30, 30], iconAnchor: [15, 15] });
const speedLimitIcon50 = L.icon({ iconUrl: 'https://cdn-icons-png.flaticon.com/512/752/752738.png', iconSize: [30, 30], iconAnchor: [15, 15] });
const speedLimitIcon60 = L.icon({ iconUrl: 'https://cdn-icons-png.flaticon.com/512/15674/15674424.png', iconSize: [30, 30], iconAnchor: [15, 15] });
const speedLimitIcon80 = L.icon({ iconUrl: 'https://cdn-icons-png.flaticon.com/512/3897/3897785.png', iconSize: [30, 30], iconAnchor: [15, 15] });
const speedLimitIcon100 = L.icon({ iconUrl: 'https://cdn-icons-png.flaticon.com/512/10392/10392769.png', iconSize: [30, 30], iconAnchor: [15, 15] });

const getSpeedLimitIcon = (speed: number): L.Icon => {
  switch (speed) {
    case 20: return speedLimitIcon20;
    case 40: return speedLimitIcon40;
    case 50: return speedLimitIcon50;
    case 60: return speedLimitIcon60;
    case 80: return speedLimitIcon80;
    case 100: return speedLimitIcon100;
    default: return speedLimitIcon60;
  }
};

// INTERFACES
interface RenderSegment {
  path: [number, number][];
  isDirt: boolean;
  style: L.PathOptions;
}

interface EventData {
  id: number;
  evento_nome: string;
  evento_descricao: string;
  evento_tipo: string;
  opcoes: Array<{
    id: number;
    descricao: string;
  }>;
}

// Modal de Evento
interface EventModalProps {
  event: EventData;
  onRespond: (optionId: number) => void;
  isResponding: boolean;
}

const EventModal: React.FC<EventModalProps> = ({ event, onRespond, isResponding }) => {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-[9999] p-4">
      <div className="bg-[#200259] rounded-lg shadow-2xl border-4 border-[#E3922A] max-w-2xl w-full p-6">
        <h1 className="text-2xl font-['Silkscreen'] font-bold text-[#E3922A] text-center mb-4">
          EVENTO ENCONTRADO!
        </h1>
        <h2 className="text-xl font-['Silkscreen'] text-white text-center mb-4">
          {event.evento_nome}
        </h2>
        <p className="text-white text-center mb-6 font-sans text-lg">
          {event.evento_descricao}
        </p>
        <div className="space-y-3">
          {event.opcoes.map((opcao) => (
            <button
              key={opcao.id}
              onClick={() => onRespond(opcao.id)}
              disabled={isResponding}
              className="w-full px-4 py-3 bg-[#E3922A] text-black font-bold rounded-md shadow-lg 
                       border-2 border-black hover:bg-[#FFC06F] transition-all duration-200
                       disabled:opacity-50 disabled:cursor-not-allowed text-left"
            >
              {opcao.descricao}
            </button>
          ))}
        </div>
        {isResponding && (
          <p className="text-center text-white mt-4 font-['Silkscreen']">
            Processando sua decisão...
          </p>
        )}
      </div>
    </div>
  );
};

// Componente de animação do caminhão
interface TruckAnimationProps {
  routePath: [number, number][];
  speed: number;
  playing: boolean;
  onTripEnd: () => void;
  onFuelEmpty: () => void;
  onEventTriggered: () => void;
  vehicle: Vehicle;
  routeDistance: number;
  setCurrentFuel: (fuel: number) => void;
  isDirtRoad: boolean;
}

const TruckAnimation: React.FC<TruckAnimationProps> = ({
  routePath,
  speed,
  playing,
  onTripEnd,
  onFuelEmpty,
  onEventTriggered,
  vehicle,
  routeDistance,
  setCurrentFuel,
  isDirtRoad
}) => {
  const truckRef = useRef<L.Marker>(null);
  const animationFrameRef = useRef<number | null>(null);
  const currentSegment = useRef<number>(0);
  const segmentProgress = useRef<number>(0);
  const startTimeRef = useRef<number>(0);
  const lastTimeRef = useRef<number>(0);
  const totalDistanceTraveledRef = useRef<number>(0);
  const lastFuelUpdateRef = useRef<number>(0);
  const currentFuelRef = useRef<number>(vehicle.currentFuel);
  const lastEventCheckRef = useRef<number>(0);
  const visualizationSpeedFactor = 300;

  const vehicleIcon = useMemo(() => {
    return L.icon({
      iconUrl: vehicle.image,
      iconSize: [40, 40],
      iconAnchor: [20, 20],
      popupAnchor: [0, -20]
    });
  }, [vehicle.image]);

  const calculateFuelConsumption = useCallback((distanceTraveled: number) => {
    const consumption = isDirtRoad ? vehicle.consumption.dirt : vehicle.consumption.asphalt;
    return distanceTraveled / consumption;
  }, [isDirtRoad, vehicle.consumption]);

  const updateFuel = useCallback((distanceTraveled: number) => {
    const fuelConsumed = calculateFuelConsumption(distanceTraveled);
    const newFuel = Math.max(0, currentFuelRef.current - fuelConsumed);

    currentFuelRef.current = newFuel;
    setCurrentFuel(newFuel);

    if (newFuel <= 0) {
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
        animationFrameRef.current = null;
      }
      onFuelEmpty();
      return true;
    }
    return false;
  }, [calculateFuelConsumption, onFuelEmpty, setCurrentFuel]);

  const animateTruck = useCallback(() => {
    if (!playing || !truckRef.current || !routePath || routePath.length < 2) {
      return;
    }

    if (currentSegment.current >= routePath.length - 1) {
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
      onTripEnd();
      return;
    }

    const now = performance.now();

    if (startTimeRef.current === 0) {
      startTimeRef.current = now;
      lastTimeRef.current = now;
    }

    const elapsed = now - startTimeRef.current;
    const deltaTime = now - lastTimeRef.current;
    lastTimeRef.current = now;

    const startPoint = routePath[currentSegment.current];
    const endPoint = routePath[currentSegment.current + 1];

    // Calcular distância em metros do segmento (usando a fórmula de Haversine)
    const R = 6371e3;
    const φ1 = startPoint[0] * Math.PI / 180;
    const φ2 = endPoint[0] * Math.PI / 180;
    const Δφ = (endPoint[0] - startPoint[0]) * Math.PI / 180;
    const Δλ = (endPoint[1] - startPoint[1]) * Math.PI / 180;

    const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +
      Math.cos(φ1) * Math.cos(φ2) *
      Math.sin(Δλ / 2) * Math.sin(Δλ / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const segmentDistanceMeters = R * c;
    const segmentDistanceKm = segmentDistanceMeters / 1000;

    const timeToCompleteMsec = (segmentDistanceKm / speed) * 3600 * 1000;
    const adjustedTimeToCompleteMsec = timeToCompleteMsec / visualizationSpeedFactor;

    segmentProgress.current = Math.min(elapsed / adjustedTimeToCompleteMsec, 1);

    const previousProgress = (elapsed - deltaTime) / adjustedTimeToCompleteMsec;
    const previousDistanceFraction = Math.min(previousProgress, 1);
    const currentDistanceFraction = segmentProgress.current;
    const distanceDiff = currentDistanceFraction - previousDistanceFraction;
    const distanceThisFrameKm = segmentDistanceKm * distanceDiff;

    totalDistanceTraveledRef.current += distanceThisFrameKm;

    // Verificar eventos a cada 10km
    if (totalDistanceTraveledRef.current - lastEventCheckRef.current >= 10) {
      lastEventCheckRef.current = totalDistanceTraveledRef.current;
      // 30% de chance de evento
      if (Math.random() < 0.3) {
        onEventTriggered();
        return;
      }
    }

    // Atualizar combustível
    if (totalDistanceTraveledRef.current - lastFuelUpdateRef.current >= 1 ||
      currentFuelRef.current <= (vehicle.maxCapacity * 0.1)) {
      const distanceSinceLastUpdate = totalDistanceTraveledRef.current - lastFuelUpdateRef.current;
      lastFuelUpdateRef.current = totalDistanceTraveledRef.current;

      if (updateFuel(distanceSinceLastUpdate)) {
        return;
      }
    }

    if (segmentProgress.current >= 1) {
      currentSegment.current += 1;
      segmentProgress.current = 0;
      startTimeRef.current = now;

      if (currentSegment.current < routePath.length - 1) {
        animationFrameRef.current = requestAnimationFrame(animateTruck);
      } else {
        onTripEnd();
      }
      return;
    }

    const newLat = startPoint[0] + (endPoint[0] - startPoint[0]) * segmentProgress.current;
    const newLng = startPoint[1] + (endPoint[1] - startPoint[1]) * segmentProgress.current;
    const newPosition = L.latLng(newLat, newLng);

    truckRef.current.setLatLng(newPosition);
    animationFrameRef.current = requestAnimationFrame(animateTruck);
  }, [playing, routePath, speed, onTripEnd, updateFuel, vehicle.maxCapacity, onFuelEmpty, onEventTriggered]);

  useEffect(() => {
    if (playing && routePath && routePath.length > 1) {
      if (!truckRef.current || (currentSegment.current === 0 && segmentProgress.current === 0)) {
        truckRef.current?.setLatLng(L.latLng(routePath[0][0], routePath[0][1]));
      }

      if (currentSegment.current === 0 && segmentProgress.current === 0) {
        totalDistanceTraveledRef.current = 0;
        lastFuelUpdateRef.current = 0;
        lastEventCheckRef.current = 0;
        currentFuelRef.current = vehicle.currentFuel;
      }

      if (segmentProgress.current === 0) {
        startTimeRef.current = 0;
      }

      animationFrameRef.current = requestAnimationFrame(animateTruck);
    } else if (!playing && animationFrameRef.current) {
      cancelAnimationFrame(animationFrameRef.current);
      animationFrameRef.current = null;
    }

    return () => {
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
    };
  }, [playing, routePath, animateTruck, vehicle.currentFuel]);

  if (!routePath || routePath.length === 0) return null;

  return (
    <Marker
      position={L.latLng(routePath[0][0], routePath[0][1])}
      icon={vehicleIcon}
      ref={truckRef}
    >
      <Popup>
        <div className="text-sm">
          <p className="font-bold">{vehicle.name}</p>
          <p>Combustível: {Math.round(currentFuelRef.current)} de {vehicle.maxCapacity}L</p>
        </div>
      </Popup>
    </Marker>
  );
};

export const MapComponent = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const juazeiroCoordinates: [number, number] = [-9.44977115369502, -40.52422616182216];
  const salvadorCoordinates: [number, number] = [-12.954121960174133, -38.47128319030249];

  // Estados principais
  const [selectedRoute, setSelectedRoute] = useState<Route | null>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [routesList] = useState<Route[]>(routes);
  const [showEventModal, setShowEventModal] = useState(false);
  const [activeEvent, setActiveEvent] = useState<EventData | null>(null);
  const [simulatedTime, setSimulatedTime] = useState<number>(0);

  // Estados do backend
  const [backendMaps, setBackendMaps] = useState<any[]>([]);
  const [backendVehicles, setBackendVehicles] = useState<any[]>([]);
  const [isLoadingData, setIsLoadingData] = useState(true);

  // Estados do jogo
  const [gameStartTime, setGameStartTime] = useState<number>(0);
  const [activeGameId, setActiveGameId] = useState<number | null>(null);
  const [isGameActive, setIsGameActive] = useState(false);

  // Estado do veículo
  const [vehicle, setVehicle] = useState<Vehicle>(() => {
    if (location.state && location.state.selectedVehicle) {
      return location.state.selectedVehicle;
    }
    navigate('/select-vehicle');
    return {
      id: 'carreta',
      name: 'Carreta',
      capacity: 60,
      consumption: { asphalt: 2, dirt: 1.5 },
      image: '/carreta.png',
      maxCapacity: 495,
      currentFuel: 120,
      cost: 4500
    };
  });

  // Estado do dinheiro
  const [availableMoney, setAvailableMoney] = useState<number>(() => {
    if (location.state && location.state.availableMoney !== undefined) {
      return location.state.availableMoney;
    }
    return 5500;
  });

  // Outros estados
  const [showFuelModal, setShowFuelModal] = useState(false);
  const [showGameOverModal, setShowGameOverModal] = useState(false);
  const [gameOverReason, setGameOverReason] = useState('');
  const [initialMapViewSet, setInitialMapViewSet] = useState(false);
  const [renderedSegments, setRenderedSegments] = useState<RenderSegment[]>([]);

  const syncIntervalRef = useRef<NodeJS.Timeout | null>(null);

  // Carregar dados do backend
  useEffect(() => {
    const loadBackendData = async () => {
      try {
        console.log('🔄 Carregando dados do backend...');

        const [mapsData, vehiclesData] = await Promise.all([
          GameService.getMaps(),
          GameService.getVehicles()
        ]);

        console.log('✅ Mapas carregados:', mapsData);
        console.log('✅ Veículos carregados:', vehiclesData);

        // Verificar se o mapa "ENTREGA EFICIENTE" existe
        const entregaEficiente = mapsData.find(m => m.nome === "ENTREGA EFICIENTE");
        if (entregaEficiente) {
          console.log('🎯 Mapa "ENTREGA EFICIENTE" encontrado:', entregaEficiente);
        } else {
          console.warn('⚠️ Mapa "ENTREGA EFICIENTE" NÃO encontrado!');
          console.log('📋 Mapas disponíveis:', mapsData.map(m => `ID: ${m.id}, Nome: ${m.nome}`));
        }

        // Verificar se os veículos necessários existem
        const veiculosEsperados = ['Camionete', 'Van', 'Caminhão Médio', 'Carreta'];
        veiculosEsperados.forEach(modelo => {
          const veiculo = vehiclesData.find(v => v.modelo === modelo);
          if (veiculo) {
            console.log(`✅ Veículo "${modelo}" encontrado (ID: ${veiculo.id})`);
          } else {
            console.warn(`⚠️ Veículo "${modelo}" NÃO encontrado!`);
          }
        });

        setBackendMaps(mapsData);
        setBackendVehicles(vehiclesData);
        setIsLoadingData(false);
      } catch (error) {
        console.error('❌ Erro ao carregar dados do backend:', error);
        setIsLoadingData(false);
      }
    };

    loadBackendData();
  }, []);

  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (isPlaying) {
      const start = Date.now();
      interval = setInterval(() => {
        const elapsedRealMs = Date.now() - start;
        const accelerationFactor = 8 / 3;
        const simulatedMinutes = (elapsedRealMs / 60000) * accelerationFactor;
        setSimulatedTime(simulatedMinutes);
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [isPlaying]);

  // Mutations do backend
  const createGameMutation = useMutation({
    mutationFn: (gameData: { mapa: number; rota: number; veiculo: number }) =>
      GameService.createGame(gameData),
    onSuccess: (partida) => {
      console.log('✅ Partida criada com sucesso:', partida);
      console.log('🎮 Dados enviados ao backend:', {
        mapa: partida.mapa || 'N/A',
        rota: partida.rota || 'N/A',
        veiculo: partida.veiculo || 'N/A'
      });

      setActiveGameId(partida.id);
      setIsGameActive(true);

      // CORRIGIR: Definir gameStartTime aqui!
      setGameStartTime(Date.now());

      setIsPlaying(true);
      startProgressSync();
    },
    onError: (error: any) => {
      const errorMessage = error?.response?.data?.detail || error?.message || "Erro ao criar partida";
      console.error('❌ Erro ao criar partida:', errorMessage);
      alert(`Erro: ${errorMessage}`);
    }
  });

  const syncProgressMutation = useMutation({
    mutationFn: (progressData: { tempo_decorrido_segundos: number }) =>
      GameService.syncGameProgress(progressData),
    onSuccess: (partida) => {
      console.log('🔄 Progresso sincronizado:', partida);

      if (partida.saldo !== undefined) {
        setAvailableMoney(partida.saldo);
      }
      if (partida.combustivel_atual !== undefined) {
        setVehicle(prev => ({ ...prev, currentFuel: partida.combustivel_atual }));
      }

      if (partida.status === 'concluido') {
        setIsPlaying(false);
        setIsGameActive(false);
        setActiveGameId(null);
        stopProgressSync();

        if (partida.resultado === 'vitoria') {
          alert(`🏆 Parabéns! ${partida.motivo_finalizacao || 'Você completou a rota!'}`);
        } else {
          alert(`💀 Game Over: ${partida.motivo_finalizacao || 'Viagem interrompida'}`);
          setGameOverReason(partida.motivo_finalizacao || 'Erro desconhecido');
          setShowGameOverModal(true);
        }
      }
    },
    onError: (error: any) => {
      console.warn("⚠️ Erro na sincronização:", error?.response?.data?.detail || error?.message);
    }
  });

  const fetchNextEventMutation = useMutation({
    mutationFn: GameService.getNextEvent,
    onSuccess: (data) => {
      console.log('🎲 Evento carregado:', data);
      setActiveEvent(data);
      setShowEventModal(true);
    },
    onError: (error: any) => {
      const errorMessage = error?.response?.data?.detail || error?.message || "Erro desconhecido";
      console.log(`ℹ️ Sem eventos disponíveis: ${errorMessage}`);
      setIsPlaying(true); // Continuar jogo se não há eventos
    }
  });

  const respondToEventMutation = useMutation({
    mutationFn: (optionId: number) => GameService.respondToEvent(optionId),
    onSuccess: (data) => {
      const { detail, partida: updatedPartida } = data;
      if (updatedPartida) {
        if (updatedPartida.saldo !== undefined) {
          setAvailableMoney(updatedPartida.saldo);
        }
        if (updatedPartida.combustivel_atual !== undefined) {
          setVehicle(prev => ({
            ...prev,
            currentFuel: updatedPartida.combustivel_atual,
          }));
        }
      }
      alert(`Resultado: ${detail}`);
      setShowEventModal(false);
      setActiveEvent(null);
      setIsPlaying(true);
    },
    onError: (error: any) => {
      const errorMessage = error?.response?.data?.detail || error?.message || "Erro desconhecido";
      alert(`Erro: ${errorMessage}. O jogo será retomado.`);
      setIsPlaying(true);
    }
  });

  // Funções de controle do progresso
  const startProgressSync = useCallback(() => {
    if (syncIntervalRef.current) {
      clearInterval(syncIntervalRef.current);
    }

    syncIntervalRef.current = setInterval(() => {
      if (isGameActive && gameStartTime > 0) {
        const tempoDecorrido = Math.floor((Date.now() - gameStartTime) / 1000);

        // CORRIGIR: Só sincronizar se tempo > 0
        if (tempoDecorrido > 0) {
          syncProgressMutation.mutate({
            tempo_decorrido_segundos: tempoDecorrido
          });
        }
      }
    }, 30000); // Sincronizar a cada 30 segundos
  }, [isGameActive, gameStartTime, syncProgressMutation]);

  const stopProgressSync = useCallback(() => {
    if (syncIntervalRef.current) {
      clearInterval(syncIntervalRef.current);
      syncIntervalRef.current = null;
    }
  }, []);

  // Handlers
  const handleSelectRoute = useCallback((routeId: number) => {
    const routeToSelect = routesList.find(r => r.routeId === routeId);
    if (routeToSelect) {
      setSelectedRoute(routeToSelect);
      setIsPlaying(false);
      setInitialMapViewSet(false);
      setSimulatedTime(0);
    }
  }, [routesList]);

  // Função para mapear veículo do frontend para ID do backend
  const mapVehicleToBackendId = useCallback((frontendVehicle: Vehicle): number => {
    // Mapeamento baseado no nome/modelo do veículo
    const vehicleMapping: { [key: string]: string } = {
      'caminhonete': 'Camionete',          // Frontend 'caminhonete' → Backend 'Camionete' (ID 1)
      'caminhao_pequeno': 'Van',           // Frontend 'caminhao_pequeno' → Backend 'Van' (ID 2) 
      'caminhao_medio': 'Caminhão Médio',  // Frontend 'caminhao_medio' → Backend 'Caminhão Médio' (ID 3)
      'carreta': 'Carreta'                 // Frontend 'carreta' → Backend 'Carreta' (ID 4)
    };

    const targetName = vehicleMapping[frontendVehicle.id];
    const backendVehicle = backendVehicles.find(v => v.modelo === targetName);

    if (backendVehicle) {
      console.log(`🔄 Mapeamento: "${frontendVehicle.id}" → "${targetName}" (ID: ${backendVehicle.id})`);
      return backendVehicle.id;
    }

    // Fallback: usar o primeiro veículo disponível
    console.warn(`⚠️ Veículo "${frontendVehicle.id}" não encontrado, usando fallback`);
    return backendVehicles.length > 0 ? backendVehicles[0].id : 1;
  }, [backendVehicles]);

  // Debug: Mostrar todos os mapeamentos disponíveis quando os dados estiverem carregados
  useEffect(() => {
    if (!isLoadingData && backendVehicles.length > 0) {
      console.log('🗺️ TABELA DE MAPEAMENTO DE VEÍCULOS:');
      console.log('Frontend ID → Backend Modelo (ID)');
      console.log('=====================================');

      const vehicleMapping: { [key: string]: string } = {
        'caminhonete': 'Camionete',
        'caminhao_pequeno': 'Van',
        'caminhao_medio': 'Caminhão Médio',
        'carreta': 'Carreta'
      };

      Object.entries(vehicleMapping).forEach(([frontendId, backendName]) => {
        const backendVehicle = backendVehicles.find(v => v.modelo === backendName);
        const status = backendVehicle ? '✅' : '❌';
        const backendId = backendVehicle ? backendVehicle.id : 'NÃO ENCONTRADO';
        console.log(`${status} ${frontendId} → ${backendName} (${backendId})`);
      });
      console.log('=====================================');
    }
  }, [isLoadingData, backendVehicles]);

  const handleStartGame = useCallback(() => {
    if (!selectedRoute) {
      alert("Selecione uma rota primeiro!");
      return;
    }

    // Se há jogo ativo, apenas retomar
    if (isGameActive && activeGameId) {
      setIsPlaying(true);
      return;
    }

    // Buscar o mapa "ENTREGA EFICIENTE" que é o único jogo ativo
    let mapaParaUsar = backendMaps.find(m => m.nome === "ENTREGA EFICIENTE");

    // Fallback: se não encontrar "ENTREGA EFICIENTE", usar o primeiro mapa disponível
    if (!mapaParaUsar && backendMaps.length > 0) {
      console.warn('⚠️ Mapa "ENTREGA EFICIENTE" não encontrado, usando primeiro mapa disponível');
      mapaParaUsar = backendMaps[0];
    }

    if (!mapaParaUsar) {
      alert("Erro: Nenhum mapa disponível no backend!");
      console.error("Mapas carregados:", backendMaps);
      return;
    }

    // CORRIGIR: Mapear o veículo selecionado para o ID do backend
    const veiculoBackendId = mapVehicleToBackendId(vehicle);

    console.log('🚀 Iniciando jogo com:', {
      mapaId: mapaParaUsar.id,
      mapaNome: mapaParaUsar.nome,
      rotaSelecionada: selectedRoute.name,
      veiculoFrontend: vehicle.name,
      veiculoBackendId: veiculoBackendId
    });

    const gameData = {
      mapa: mapaParaUsar.id,
      rota: mapaParaUsar.id, // Usar o mesmo ID do mapa
      veiculo: veiculoBackendId // ✅ USAR O ID CORRETO DO BACKEND
    };

    createGameMutation.mutate(gameData);
  }, [selectedRoute, isGameActive, activeGameId, createGameMutation, backendMaps, vehicle, mapVehicleToBackendId]);

  const handleTripEnd = useCallback(() => {
    setIsPlaying(false);

    if (isGameActive && gameStartTime > 0) {
      const tempoFinal = Math.floor((Date.now() - gameStartTime) / 1000);
      if (tempoFinal > 0) {
        syncProgressMutation.mutate({
          tempo_decorrido_segundos: tempoFinal
        });
      }
    }

    setIsGameActive(false);
    setActiveGameId(null);
    stopProgressSync();

    alert('🏆 Viagem concluída!');
  }, [isGameActive, gameStartTime, syncProgressMutation, stopProgressSync]);

  const handleFuelEmpty = useCallback(() => {
    setIsPlaying(false);

    if (isGameActive && gameStartTime > 0) {
      const tempoFinal = Math.floor((Date.now() - gameStartTime) / 1000);
      if (tempoFinal > 0) {
        syncProgressMutation.mutate({
          tempo_decorrido_segundos: tempoFinal
        });
      }
    }

    setIsGameActive(false);
    setActiveGameId(null);
    stopProgressSync();

    setGameOverReason('combustível');
    setShowGameOverModal(true);
  }, [isGameActive, gameStartTime, syncProgressMutation, stopProgressSync]);

  const handleEventTriggered = useCallback(() => {
    setIsPlaying(false);
    fetchNextEventMutation.mutate();
  }, [fetchNextEventMutation]);

  // Funções auxiliares
  function MapViewControl({ route }: { route: Route | null }) {
    const map = useMapEvents({});

    useEffect(() => {
      if (route && route.pathCoordinates && route.pathCoordinates.length > 1 && (!initialMapViewSet || !isPlaying)) {
        const bounds = L.latLngBounds(route.pathCoordinates);
        map.fitBounds(bounds, { padding: [50, 50] });
        setInitialMapViewSet(true);
      } else if (!route && !initialMapViewSet) {
        const bounds = L.latLngBounds(juazeiroCoordinates, salvadorCoordinates);
        map.fitBounds(bounds, { padding: [100, 100] });
        setInitialMapViewSet(true);
      }
    }, [map, route, isPlaying]);

    return null;
  }

  // Segmentar a rota
  useEffect(() => {
    if (!selectedRoute || !selectedRoute.pathCoordinates) {
      setRenderedSegments([]);
      return;
    }

    const segments: RenderSegment[] = [];
    const totalPoints = selectedRoute.pathCoordinates.length;
    const totalDistance = selectedRoute.actualDistance || selectedRoute.distance;
    let lastIndex = 0;

    const sortedDirtSegments = (selectedRoute.dirtSegments || []).sort((a, b) => a.startKm - b.startKm);

    sortedDirtSegments.forEach(dirtSegment => {
      const startIndex = Math.floor((dirtSegment.startKm / totalDistance) * totalPoints);
      const endIndex = Math.floor((dirtSegment.endKm / totalDistance) * totalPoints);

      if (startIndex > lastIndex) {
        segments.push({
          path: selectedRoute.pathCoordinates!.slice(lastIndex, startIndex + 1),
          isDirt: false,
          style: { color: '#1e40af', weight: 6, opacity: 1 }
        });
      }

      segments.push({
        path: selectedRoute.pathCoordinates!.slice(startIndex, endIndex + 1),
        isDirt: true,
        style: { color: '#8B4513', weight: 7, opacity: 0.9, dashArray: '10, 10' }
      });

      lastIndex = endIndex;
    });

    if (lastIndex < totalPoints - 1) {
      segments.push({
        path: selectedRoute.pathCoordinates.slice(lastIndex),
        isDirt: false,
        style: { color: '#1e40af', weight: 6, opacity: 1 }
      });
    }

    if (segments.length === 0 && selectedRoute.pathCoordinates.length > 0) {
      segments.push({
        path: selectedRoute.pathCoordinates,
        isDirt: false,
        style: { color: '#1e40af', weight: 6, opacity: 1 }
      });
    }

    setRenderedSegments(segments);
  }, [selectedRoute]);

  // Funções auxiliares para ícones
  const getUnselectedRouteColor = (): string => '#94a3b8';

  const getPoiIcon = (type: 'construction' | 'danger' | 'rest' | 'gas'): L.Icon => {
    switch (type) {
      case 'construction': return constructionIcon;
      case 'danger': return dangerIcon;
      case 'rest': return restStopIcon;
      case 'gas': return gasStationIcon;
      default: return DefaultIcon;
    }
  };

  const getRiskIcon = (riskLevel: 'Baixo' | 'Médio' | 'Alto'): L.Icon => {
    switch (riskLevel) {
      case 'Baixo': return lowRiskIcon;
      case 'Médio': return mediumRiskIcon;
      case 'Alto': return highRiskIcon;
      default: return mediumRiskIcon;
    }
  };

  const handleChangeVehicle = () => {
    navigate('/select-vehicle');
  };

  const handleRefuel = (updatedVehicle: Vehicle, newBalance: number) => {
    setVehicle(updatedVehicle);
    setAvailableMoney(newBalance);
  };

  if (isLoadingData) {
    return (
      <div className="min-h-screen bg-[#200259] flex items-center justify-center">
        <div className="text-white text-center text-2xl font-['Silkscreen']">
          Carregando dados do jogo...
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col lg:flex-row h-screen p-4 font-['Silkscreen'] bg-[#200259]">
      <div className="absolute top-0 left-0 w-full flex items-center justify-between px-8 py-4 z-40">
        <button
          className="flex items-center px-6 py-2 bg-[#E3922A] text-black font-bold text-lg rounded-md shadow-lg
                   hover:bg-[#FFC06F] transition-all duration-200 border-2 border-black"
          onClick={handleChangeVehicle}
        >
          <ArrowLeft /> TROCAR VEÍCULOS
        </button>
        <h1 className="text-3xl font-bold text-[#E3922A] text-center flex-1 -ml-16">
          ROTAS DISPONÍVEIS
        </h1>
        <div className="bg-[#E3922A] text-black text-2xl font-bold px-6 py-2 rounded-md shadow-lg border-2 border-black">
          R$ {availableMoney.toFixed(2)}
        </div>
      </div>

      <div className="flex-1 w-full relative bg-gray-200 rounded-lg shadow-inner border-4 border-black mt-20">
        {selectedRoute && (
          <div className="absolute top-4 right-4 flex space-x-2 z-[1000]">
            <button
              className="px-4 py-2 bg-green-500 text-white font-bold text-md rounded-md shadow-lg hover:bg-green-600 transition-all duration-200 border-2 border-black"
              onClick={handleStartGame}
              disabled={isPlaying || !selectedRoute.pathCoordinates || selectedRoute.pathCoordinates.length < 2 || vehicle.currentFuel <= 0}
            >
              {isPlaying ? 'EM ANDAMENTO' : isGameActive ? 'CONTINUAR' : 'INICIAR'}
            </button>
            {isPlaying && (
              <div className="px-4 py-2 bg-white text-black font-['Silkscreen'] text-md rounded shadow-md border-2 border-black">
                Tempo: {Math.floor(simulatedTime / 60).toString().padStart(2, '0')}h:{Math.floor(simulatedTime % 60).toString().padStart(2, '0')}
              </div>
            )}
            <button
              className="px-4 py-2 bg-yellow-500 text-black font-bold text-md rounded-md shadow-lg hover:bg-yellow-600 transition-all duration-200 border-2 border-black"
              onClick={() => setIsPlaying(false)}
              disabled={!isPlaying}
            >
              PAUSAR
            </button>
          </div>
        )}

        <MapContainer
          center={juazeiroCoordinates}
          zoom={7}
          scrollWheelZoom={true}
          className="w-full h-full rounded-lg"
        >
          <TileLayer
            attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          />
          <MapViewControl route={selectedRoute} />

          {/* Rotas não selecionadas */}
          {routesList.map((route) => {
            if (route.routeId === selectedRoute?.routeId || !route.pathCoordinates || route.pathCoordinates.length < 2) {
              return null;
            }
            return (
              <Polyline
                key={`unselected-${route.routeId}`}
                positions={route.pathCoordinates as L.LatLngExpression[]}
                pathOptions={{ color: getUnselectedRouteColor(), weight: 3, opacity: 0.3 }}
              />
            );
          })}

          {/* Rota selecionada em segmentos */}
          {renderedSegments.map((segment, index) => (
            <Polyline
              key={`segment-${selectedRoute?.routeId}-${index}`}
              positions={segment.path}
              pathOptions={segment.style}
            >
              <Popup>
                {segment.isDirt ?
                  <span className="font-bold text-yellow-800">Trecho de Terra</span> :
                  <span className="font-bold text-blue-700">{selectedRoute?.name}</span>
                }
              </Popup>
            </Polyline>
          ))}

          {/* Marcadores de velocidade */}
          {selectedRoute?.speedLimits.map((speedLimit, index) => (
            speedLimit.coordinates && (
              <Marker
                key={`speed-${selectedRoute.routeId}-${index}`}
                position={speedLimit.coordinates}
                icon={getSpeedLimitIcon(speedLimit.value ?? 60)}
              >
                <Popup>
                  <span className="font-bold">Limite de Velocidade:</span><br />
                  {speedLimit.limit} na {speedLimit.road}
                </Popup>
              </Marker>
            )
          ))}

          {/* Outros marcadores */}
          {selectedRoute?.tollBooths.map((toll, index) =>
            <Marker key={`toll-${index}`} position={toll.coordinates as L.LatLngTuple} icon={tollIcon}>
              <Popup>{toll.location}</Popup>
            </Marker>
          )}
          {selectedRoute?.dangerZones?.map((zone, index) =>
            <Marker key={`danger-${index}`} position={zone.coordinates as L.LatLngTuple} icon={getRiskIcon(zone.riskLevel)}>
              <Popup>{zone.description}</Popup>
            </Marker>
          )}

          <Marker position={juazeiroCoordinates}>
            <Popup>Ponto de Partida: Juazeiro</Popup>
          </Marker>
          <Marker position={salvadorCoordinates}>
            <Popup>Destino: Salvador</Popup>
          </Marker>

          {/* Animação do caminhão */}
          {selectedRoute?.pathCoordinates && (
            <TruckAnimation
              routePath={selectedRoute.pathCoordinates}
              speed={(selectedRoute.actualDistance || selectedRoute.distance) / selectedRoute.estimatedTimeHours}
              playing={isPlaying}
              onTripEnd={handleTripEnd}
              onFuelEmpty={handleFuelEmpty}
              onEventTriggered={handleEventTriggered}
              vehicle={vehicle}
              routeDistance={selectedRoute.actualDistance || selectedRoute.distance}
              setCurrentFuel={(fuel) => setVehicle(prev => ({ ...prev, currentFuel: fuel }))}
              isDirtRoad={selectedRoute.dirtRoad || false}
            />
          )}
        </MapContainer>
      </div>

      {/* Painel lateral */}
      <div className="lg:w-1/4 w-full p-4 rounded-lg shadow-lg overflow-y-auto mb-4 lg:mb-0 lg:ml-4 mt-20">
        <div className="bg-[#FFC06F] p-4 rounded-lg shadow-md border-2 border-black mb-6">
          <h2 className="text-xl font-['Silkscreen'] font-bold mb-3 text-black text-center border-b-2 border-black pb-2">
            COMBUSTÍVEL
          </h2>
          <p className="font-sans text-black text-lg mb-2">
            <span className="font-bold">PREÇO DO DIESEL:</span> R$ 5,50 por litro
          </p>
          <div className="bg-black h-px my-2"></div>
          <h3 className="font-['Silkscreen'] text-lg font-bold text-black mb-2">
            VEÍCULO: {vehicle.name.toUpperCase()}
          </h3>
          <p className="font-sans text-black text-md mb-1">
            - ASFALTO: {vehicle.consumption.asphalt}KM/L
          </p>
          <p className="font-sans text-black text-md mb-3">
            - TERRA: {vehicle.consumption.dirt}KM/L
          </p>

          <button
            className="bg-[#E3922A] text-black font-bold py-2 px-4 rounded-md w-full mb-3 shadow-md border-2 border-black hover:bg-[#FFC06F]"
            onClick={() => setShowFuelModal(true)}
          >
            ABASTECER
          </button>

          <p className="font-sans text-black text-md mb-2">NÍVEL DO TANQUE</p>
          <div className="w-full bg-gray-300 rounded-full h-6 border-2 border-black">
            <div
              className="bg-green-500 h-full rounded-full flex items-center justify-center text-xs font-bold text-white"
              style={{ width: `${(vehicle.currentFuel / vehicle.maxCapacity) * 100}%` }}
            >
              {vehicle.currentFuel.toFixed(0)}/{vehicle.maxCapacity}
            </div>
          </div>
        </div>

        <h2 className="text-2xl font-['Silkscreen'] font-bold mb-4 text-white text-center border-b-2 border-white pb-2">
          ESCOLHA UMA ROTA
        </h2>

        {routesList.map((route) => (
          <div
            key={route.routeId}
            className={`p-4 mb-3 rounded-lg cursor-pointer transition-all duration-200
              ${selectedRoute?.routeId === route.routeId ? 'bg-yellow-400 border-4 border-black ring-4 ring-yellow-500' : 'bg-white border-2 border-black hover:bg-gray-200'}
              shadow-md`}
            onClick={() => handleSelectRoute(route.routeId)}
          >
            <h3 className="font-['Silkscreen'] font-bold text-2xl text-black mb-1">{route.name}</h3>
            <p className="font-sans text-black text-lg">
              <span className="font-bold">TEMPO ESTIMADO:</span> {route.estimatedTime}
            </p>
            <p className="font-sans text-black text-lg">
              <span className="font-bold">DISTÂNCIA:</span> {route.actualDistance ? `${route.actualDistance.toFixed(0)}` : route.distance} km
            </p>
            <p className="font-sans text-black text-lg flex items-center">
              <span className="font-bold">RISCO ENVOLVIDO:</span>
              <span className={`${route.safety.robberyRisk === 'Baixo' ? 'text-green-800' : 'text-red-800'} ml-1`}>
                {route.safety.robberyRisk} {route.safety.robberyRisk === 'Baixo' ? '✅' : '⚠️'}
              </span>
            </p>
          </div>
        ))}
      </div>

      {/* Modais */}
      {showEventModal && activeEvent && (
        <EventModal
          event={activeEvent}
          onRespond={(optionId) => respondToEventMutation.mutate(optionId)}
          isResponding={respondToEventMutation.isPending}
        />
      )}

      {showGameOverModal && (
        <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-[9999] p-4">
          <div className="bg-[#200259] rounded-lg shadow-2xl border-4 border-red-500 max-w-md w-full p-6">
            <h1 className="text-2xl font-['Silkscreen'] font-bold text-red-500 text-center mb-4">
              FIM DE JOGO!
            </h1>
            <p className="text-xl font-['Silkscreen'] text-white text-center mb-6">
              {gameOverReason === 'combustível' ? 'Seu combustível acabou!' : 'Viagem interrompida!'}
            </p>
            <div className="flex justify-center space-x-4">
              <button
                onClick={() => {
                  setShowGameOverModal(false);
                  navigate('/select-vehicle');
                }}
                className="px-6 py-3 bg-red-500 text-white font-bold rounded-md shadow-lg border-2 border-black hover:bg-red-600 transition-all duration-200"
              >
                VOLTAR AO INÍCIO
              </button>
            </div>
          </div>
        </div>
      )}

      {showFuelModal && (
        <FuelModal
          vehicle={vehicle}
          availableMoney={availableMoney}
          onRefuel={handleRefuel}
          onClose={() => setShowFuelModal(false)}
        />
      )}
    </div>
  );
};
</file>

<file path="src/main.tsx">
import { StrictMode } from "react";
import { BrowserRouter, Route, Routes } from "react-router-dom";
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import { HomePage } from "./pages/Home/HomePage";
import { VehicleSelectionPage } from './pages/escolherVeiculo';
import { Login } from "./pages/auth/Login/Login";
import { Cadastro } from "./pages/auth/Cadastro/Cadastro";
import { ForgotPassword } from "./pages/auth/ForgotPassword/ForgotPassword";
import { ChangePassword } from "./pages/Perfil/ChangePassword"; 
import { TutorialPage } from "./pages/Tutorial/TutorialPage";
import { PerfilPage } from "./pages/Perfil/PerfilPage";
import { AuthProvider } from "./contexts/AuthContext";
import { ProtectedRoute } from "./components/ProtectedRoute";
import { EditarPerfilPage } from "./pages/Perfil/EditarPerfil";
import { ExcluirEquipePage } from "./pages/Perfil/ExcluirEquipe";
import { MapComponent } from "./pages/mapaRota/MapComponent";
import { EditarEquipePage } from "./pages/Perfil/EditarEquipe";
import { CriarEquipePage} from "./pages/Perfil/CriarEquipe";
import { createRoot } from "react-dom/client";
import GameSelectionPage from "./pages/GameSelection/GameSelectionPage";
import { ApresentacaoDesafioPage} from "./pages/Desafio/ApresentacaoDesafio";
import { RankingPage } from "./pages/Ranking/RankingPage";
import { ChooseTeam } from "./pages/ChooseTeam/ChooseTeam";
import { PauseMenu } from "./pages/PauseMenu/PauseMenu.tsx";// Criar instância do QueryClient
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 1000 * 60 * 5, // 5 minutos
      retry: 1,
    },
  },
});

createRoot(document.getElementById("app") as HTMLElement).render(
  <StrictMode>
    <QueryClientProvider client={queryClient}>
      <BrowserRouter>
        <AuthProvider>
          <Routes>
            {/* Rotas públicas */}
            <Route path="/" element={<HomePage />} />
            <Route path="/login" element={<Login />} />
            <Route path="/cadastro" element={<Cadastro />} />
            <Route path="/forgot-password" element={<ForgotPassword />} />
            <Route path="/reset-password/:uidb64/:token" element={<ForgotPassword />} />
            <Route path="/tutorial" element={<TutorialPage />} />

            {/* Rotas protegidas */}
            <Route path="/perfil" element={
             <ProtectedRoute>
                <PerfilPage />
             </ProtectedRoute>
            } />
            <Route path="/perfil/editar" element={
             <ProtectedRoute>
                <EditarPerfilPage />
             </ProtectedRoute>
            } />
            <Route path="/perfil/excluir-equipe" element={
             <ProtectedRoute>
                <ExcluirEquipePage />
             </ProtectedRoute>
            } />
            <Route path="/perfil/editar-equipe" element={
             <ProtectedRoute>
                <EditarEquipePage />
             </ProtectedRoute>
            } />
            <Route path="/mudar-senha" element={
             <ProtectedRoute>
                <ChangePassword />
             </ProtectedRoute>
            } />
            <Route path="/ranking" element={
             <ProtectedRoute>
                <RankingPage />
             </ProtectedRoute>
            } />
            <Route path="/game" element={
             <ProtectedRoute>
                <HomePage />
             </ProtectedRoute>
            } />
            <Route path="/games" element={
             <ProtectedRoute>
                <HomePage />
             </ProtectedRoute>
            } />
            <Route path="/select-vehicle" element={
             <ProtectedRoute>
                <VehicleSelectionPage />
             </ProtectedRoute>
            } />
            <Route path="/mapa-rota" element={
             <ProtectedRoute>
                <MapComponent />
             </ProtectedRoute>
            } />
            <Route path="/mapa" element={
             <ProtectedRoute>
                <MapComponent />
             </ProtectedRoute>
            } />
            <Route path="/choose-team" element={
             <ProtectedRoute>
                <ChooseTeam />
             </ProtectedRoute>
            } />
            <Route path="/create-team" element={
              <ProtectedRoute>
                <CriarEquipePage/>
               </ProtectedRoute>
            } />
            <Route path="/desafio" element={
             <ProtectedRoute>
               <ApresentacaoDesafioPage />
              </ProtectedRoute>
            } />  
            <Route path="/game-selection" element={
             <ProtectedRoute>
               <GameSelectionPage />
             </ProtectedRoute>
            } />
            
            {/* Rota para o PauseMenu para testes */}
            <Route path="/pause-menu" element={
             <ProtectedRoute>
               <PauseMenu 
                 isVisible={true}
                 onResume={() => console.log('Resume')}
                 onGoToProfile={() => console.log('Go to Profile')}
                 onRestart={() => console.log('Restart')}
               />
             </ProtectedRoute>
            } />

          </Routes>
        </AuthProvider>
      </BrowserRouter>
      {/* DevTools apenas em desenvolvimento */}
      {import.meta.env.DEV && <ReactQueryDevtools initialIsOpen={false} />}
    </QueryClientProvider>
  </StrictMode>
);
</file>

</files>
