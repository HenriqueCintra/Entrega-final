This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
components.json
docker-compose.yml
Dockerfile
eslint.config.js
index.html
package.json
postcss.config.js
public/vite.svg
README.md
src/api/authService.ts
src/api/config.ts
src/App.css
src/App.tsx
src/assets/react.svg
src/components/ButtonHomeBack.tsx
src/components/ui/button.tsx
src/components/ui/card.tsx
src/components/ui/input.tsx
src/components/ui/separator.tsx
src/contexts/AuthContext.tsx
src/index.css
src/lib/utils.ts
src/main.tsx
src/pages/auth/Cadastro/Cadastro.tsx
src/pages/auth/ForgotPassword/ForgotPassword.tsx
src/pages/auth/Login/Login.tsx
src/pages/Home/HomePage.tsx
src/pages/Home/index.ts
src/vite-env.d.ts
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="docker-compose.yml">
services:
  frontend:
    build: .
    ports:
      - "5173:5173"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    stdin_open: true
    tty: true
    command: npm run dev -- --host 0.0.0.0
</file>

<file path="Dockerfile">
# Usa a imagem oficial do Node.js
FROM node:23-alpine3.20

# Define o diret√≥rio de trabalho dentro do container
WORKDIR /app


# Copia os arquivos de configura√ß√£o do projeto
COPY package*.json ./
COPY vite.config.ts ./

# Instala as depend√™ncias
 RUN npm install

# # Copia o restante dos arquivos do projeto
 COPY . .

# # Exp√µe a porta que o Vite usa por padr√£o
 EXPOSE 5173

# # Comando para iniciar o servidor de desenvolvimento
 CMD ["npm", "run", "dev"]
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Jogos Logisctcos</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta charset="utf-8" />
    <meta content="width=device-width, initial-scale=1" name="viewport" />
    <style>
      @import url("https://fonts.googleapis.com/css?family=Silkscreen:700,400|Signika:700");
    </style>
    <link href="./src/index.css" rel="stylesheet" />
    <link href="./src/App.css" rel="stylesheet" />
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="./src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "app",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@radix-ui/react-separator": "^1.1.4",
    "@radix-ui/react-slot": "^1.2.0",
    "@types/react-router-dom": "^5.3.3",
    "axios": "^1.9.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.506.0",
    "radix-ui": "^1.3.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-router-dom": "^7.5.3",
    "tailwind-merge": "^3.2.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@types/node": "^22.15.3",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.24.1",
    "vite": "^6.2.0"
  }
}
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="README.md">
# **Guia de Instala√ß√£o - Jogos Log√≠sticos (IFBA Juazeiro) FRONT-END**

Este guia explica como configurar e executar o projeto **Jogos Log√≠sticos** em diferentes ambientes (Windows/WSL2, Linux e macOS).

Recomenda√ß√£o: Se voc√™ usa Windowns instale o [WSL2 (ubuntu)](https://learn.microsoft.com/pt-br/windows/wsl/install)  para rodar o projeto .

---

## üìã **Pr√©-requisitos**
- **Docker** instalado ([Download Docker](https://www.docker.com/get-started))
- **Git** (para clonar o reposit√≥rio)
- **Porta 5173 liberada** (ou ajuste no `docker-compose.yml`)

---

## üöÄ **Passo a Passo para Executar o Projeto**

### **‚úîÔ∏è Windows (com WSL2 recomendado)‚úîÔ∏è**
**1. Instale [WSL2 tutorial](https://learn.microsoft.com/pt-br/windows/wsl/install).**
**2. Comando para instalar o WL2 no PowerShell (rode como admin):**
  ```bash
   wsl --install
  ```
**3. Ja vai instalar o WSL2 mas confira usando o comando (resquisito ser WSL2):**
 ```bash
  wsl --set-version 
 ```
**4. Dentro do terminal do WSL2 navegue at√©  o diretorio que voce deseja clonar o repositorio.**
**5. Clone o repositorio.**
```bash
git clone https://github.com/restic36/ifba-jogos-juazeiro-front.git
cd ifba-jogos-juazeiro-front
```
**6. Agora a magica acontece:**
```bash
docker-compose up
```
**7.Acesse o Projeto**
Ap√≥s iniciar, acesse:
üëâ [http://localhost:5173](http://localhost:5173)

---

### **No caso do Windows com Docker**
1. Clone o Reposit√≥rio**
```bash
git clone https://github.com/restic36/ifba-jogos-juazeiro-front.git
cd ifba-jogos-juazeiro-front
```

2. Execute com Docker**
```bash
docker-compose up
```
Isso ir√°:
- Construir a imagem do container
- Instalar depend√™ncias (`node_modules`)
- Iniciar o servidor Vite na porta `5173`

---

## üåê **Acessando o Projeto**
Ap√≥s iniciar, acesse:
üëâ [http://localhost:5173](http://localhost:5173)

---

## ‚öôÔ∏è **Configura√ß√µes por Sistema Operacional**


### **ü™ü Windows (com Docker)**
1. Instale [Docker Desktop](https://www.docker.com/products/docker-desktop/) e ative a integra√ß√£o WSL2.
2. No terminal (PowerShell ou WSL):
   ```bash
   docker-compose up
   ```
3. Se a porta estiver ocupada, edite `docker-compose.yml`:
   ```yaml
   ports:
     - "5174:5173"  # Mude para outra porta
   ```

### **üêß Linux / WSL2 (Ubuntu)**
1. Instale Docker:
   ```bash
   sudo apt update && sudo apt install docker.io docker-compose
   ```
2. Adicione seu usu√°rio ao grupo Docker (evita usar `sudo`):
   ```bash
   sudo usermod -aG docker $USER
   newgrp docker  # Recarrega as permiss√µes
   ```
3. Execute normalmente:
   ```bash
   docker-compose up
   ```

### **üçé macOS**
1. Instale [Docker Desktop para Mac](https://docs.docker.com/desktop/install/mac-install/).
2. Siga os mesmos passos do Linux.

---

## üõ† **Comandos √öteis**

| Comando | Descri√ß√£o |
|---------|-----------|
| `docker-compose up` | Inicia o servidor |
| `docker-compose up -d` | Roda em segundo plano |
| `docker-compose down` | Para e remove containers |
| `docker-compose logs -f` | Mostra logs em tempo real |
| `docker-compose exec frontend sh` | Acessa o terminal do container |

---

## üîç **Solu√ß√£o de Problemas Comuns**

### **‚ùå Porta 5173 ocupada**
```bash
# Encontre e mate o processo (Linux/WSL/macOS)
sudo lsof -i :5173
kill -9 <PID>

# Ou mude a porta no docker-compose.yml
```

### **‚ùå Erros de permiss√£o (Linux/WSL)**
```bash
sudo chown -R $USER:$USER .
sudo chmod -R 755 .
```

### **‚ùå Docker n√£o responde (Windows)**
- Reinicie o Docker Desktop
- Ou no PowerShell:
  ```powershell
  net stop com.docker.service
  net start com.docker.service
  ```

---

## üìú **Estrutura do Projeto**
```
ifba-jogos-juazeiro-front/
‚îú‚îÄ‚îÄ docker-compose.yml  # Configura√ß√£o do Docker
‚îú‚îÄ‚îÄ Dockerfile          # Imagem do container
‚îú‚îÄ‚îÄ init.sh             # Script de inicializa√ß√£o
‚îî‚îÄ‚îÄ app/                # C√≥digo fonte (React + Vite + Tailwind)
```

---

## ‚úÖ **Pronto!**
Agora o **Jogos Log√≠sticos** deve estar rodando no seu ambiente. Se precisar de ajuda, consulte os logs com `docker-compose logs -f`.  

üîó **Reposit√≥rio Oficial:** [github.com/restic36/ifba-jogos-juazeiro-front](https://github.com/restic36/ifba-jogos-juazeiro-front)
</file>

<file path="src/api/authService.ts">
import api from './config';

// Interface para login
interface LoginCredentials {
  username: string;
  password: string;
}

// Interface para resposta do token
interface TokenResponse {
  access: string;
  refresh: string;
}

// Interface para registro
interface RegisterData {
  username: string;
  email: string;
  password: string;
  password2: string;  // Confirma√ß√£o de senha
  nickname: string;
  first_name?: string;
  last_name?: string;
  data_nascimento?: string;
}

// Interface para solicita√ß√£o de redefini√ß√£o de senha
interface PasswordResetRequest {
  email: string;
}

// Interface para confirma√ß√£o de redefini√ß√£o de senha
interface PasswordResetConfirm {
  password: string;
  password2: string;
  token: string;
  uidb64: string;
}

export const AuthService = {
  // Login do usu√°rio
  async login(credentials: LoginCredentials): Promise<TokenResponse> {
    const response = await api.post<TokenResponse>('/api/auth/token/', credentials);

    // Armazena os tokens no localStorage
    localStorage.setItem('token', response.data.access);
    localStorage.setItem('refreshToken', response.data.refresh);

    return response.data;
  },

  // Registro de novo usu√°rio
  async register(userData: RegisterData) {
    return await api.post('/api/auth/registro/', userData);
  },

  // Logout do usu√°rio
  logout() {
    localStorage.removeItem('token');
    localStorage.removeItem('refreshToken');
  },

  // Verifica se o usu√°rio est√° autenticado
  isAuthenticated(): boolean {
    return !!localStorage.getItem('token');
  },

  // Obter perfil do usu√°rio
  async getProfile() {
    return await api.get('/api/auth/perfil/');
  },

  // Atualizar perfil do usu√°rio
  async updateProfile(userData: Partial<RegisterData>) {
    return await api.put('/api/auth/perfil/', userData);
  },

  // Solicitar redefini√ß√£o de senha
  async requestPasswordReset(data: PasswordResetRequest) {
    return await api.post('/api/auth/password-reset/', data);
  },

  // Confirmar redefini√ß√£o de senha
  async confirmPasswordReset(data: PasswordResetConfirm) {
    return await api.post('/api/auth/password-reset/confirm/', data);
  }
};

export default AuthService;
</file>

<file path="src/api/config.ts">
import axios from 'axios';

// Base URL da API - ajuste conforme seu ambiente (usando o nome do servi√ßo no Docker Compose)
const API_URL = import.meta.env.VITE_API_URL || 'http://api:8000';

// Inst√¢ncia do Axios para a API
const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor para adicionar o token JWT em todas as requisi√ß√µes autenticadas
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Interceptor para tratar respostas com erro 401 (n√£o autorizado)
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    // Se o token expirou (401), tenta renovar com refresh token
    if (error.response && error.response.status === 401) {
      const refreshToken = localStorage.getItem('refreshToken');

      if (refreshToken) {
        try {
          // Tenta obter um novo token
          const response = await axios.post(`${API_URL}/api/auth/token/refresh/`, {
            refresh: refreshToken
          });

          // Armazena os novos tokens
          localStorage.setItem('token', response.data.access);

          // Reexecuta a requisi√ß√£o original com o novo token
          const originalRequest = error.config;
          originalRequest.headers.Authorization = `Bearer ${response.data.access}`;
          return api(originalRequest);
        } catch (refreshError) {
          // Se n√£o conseguir renovar, faz logout
          localStorage.removeItem('token');
          localStorage.removeItem('refreshToken');
          window.location.href = '/login';
        }
      } else {
        // Se n√£o tem refresh token, redireciona para login
        window.location.href = '/login';
      }
    }

    return Promise.reject(error);
  }
);

export default api;
</file>

<file path="src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="src/App.tsx">
import './App.css'

function App() {

  return (
    <h1 className="text font-bold bg-#FFF text-red-500">
    Hello world!
  </h1>
     
  )
}

export default App
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/ButtonHomeBack.tsx">
import { ReactNode } from 'react';

interface ButtonHomeBackProps {
    onClick: () => void;
    children: ReactNode;  
}
/// <button onClick={() => navigate(-1)} className="w-10 h-10 bg-white rounded-md items-center justify-center  flex text-black" ><div className="justify-self-center"><ArrowLeft size={25} /></div></button>
export const ButtonHomeBack = ({ 
  onClick, 
  children
}: ButtonHomeBackProps) => {
  return (
    <button 
      onClick={onClick}
      type="button"
      className="w-10 h-10 bg-white rounded-md flex items-center justify-center text-black"
      aria-label="Voltar para p√°gina anterior"
    >
        <div className="justify-self-center"> 
            {children}
        </div>
    </button>
  );
};
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="src/components/ui/separator.tsx">
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="src/contexts/AuthContext.tsx">
import React, { createContext, useState, useEffect, useContext, ReactNode } from 'react';
import AuthService from '../api/authService';

interface User {
  id: number;
  username: string;
  email: string;
  nickname: string;
  first_name?: string;
  last_name?: string;
}

interface AuthContextType {
  user: User | null;
  loading: boolean;
  isAuthenticated: boolean;
  login: (username: string, password: string) => Promise<void>;
  logout: () => void;
  refreshUser: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType>({
  user: null,
  loading: true,
  isAuthenticated: false,
  login: async () => { },
  logout: () => { },
  refreshUser: async () => { },
});

export const useAuth = () => useContext(AuthContext);

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  // Carrega o usu√°rio quando o componente √© montado
  useEffect(() => {
    const loadUser = async () => {
      if (AuthService.isAuthenticated()) {
        try {
          await refreshUser();
        } catch (error) {
          console.error("Erro ao carregar usu√°rio:", error);
          // Se houver erro, limpa os tokens
          AuthService.logout();
        }
      }
      setLoading(false);
    };

    loadUser();
  }, []);

  const refreshUser = async () => {
    try {
      const response = await AuthService.getProfile();
      setUser(response.data);
    } catch (error) {
      console.error("Erro ao obter perfil do usu√°rio:", error);
      throw error;
    }
  };

  const login = async (username: string, password: string) => {
    await AuthService.login({ username, password });
    await refreshUser();
  };

  const logout = () => {
    AuthService.logout();
    setUser(null);
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        loading,
        isAuthenticated: !!user,
        login,
        logout,
        refreshUser,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export default AuthContext;
</file>

<file path="src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;


:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}



@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}



@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/main.tsx">
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import { BrowserRouter, Route, Routes } from "react-router-dom";
import { HomePage } from "./pages/Home/HomePage";
import { Login } from "./pages/auth/Login/Login";
import { Cadastro } from "./pages/auth/Cadastro/Cadastro";
import { ForgotPassword } from "./pages/auth/ForgotPassword/ForgotPassword";
import { AuthProvider } from "./contexts/AuthContext";

createRoot(document.getElementById("app") as HTMLElement).render(
  <StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <Routes>
          <Route path="/" element={<HomePage />} />
          <Route path="/login" element={<Login />} />
          <Route path="/cadastro" element={<Cadastro />} />
          <Route path="/forgot-password" element={<ForgotPassword />} />
          <Route path="/reset-password/:uidb64/:token" element={<ForgotPassword />} />
        </Routes>
      </AuthProvider>
    </BrowserRouter>
  </StrictMode>,
);
</file>

<file path="src/pages/auth/Cadastro/Cadastro.tsx">
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "../../../components/ui/button";
import { Card, CardContent } from "../../../components/ui/card";
import { ArrowLeft, House, AlertCircle } from 'lucide-react';
import { ButtonHomeBack } from "@/components/ButtonHomeBack";
import AuthService from "../../../api/authService";

export const Cadastro = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    username: "",
    nickname: "",
    email: "",
    data_nascimento: "",
    password: "",
    password2: "",
    first_name: "",
    last_name: ""
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { id, value } = e.target;
    setFormData(prev => ({ ...prev, [id]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Valida√ß√£o b√°sica
    if (!formData.username || !formData.nickname || !formData.email || !formData.password || !formData.password2) {
      setError("Por favor, preencha todos os campos obrigat√≥rios");
      return;
    }

    if (formData.password !== formData.password2) {
      setError("As senhas n√£o conferem");
      return;
    }

    setLoading(true);
    setError("");
    setSuccess("");

    try {
      await AuthService.register(formData);
      setSuccess("Cadastro realizado com sucesso! Redirecionando para o login...");

      // Redireciona para o login ap√≥s 2 segundos
      setTimeout(() => {
        navigate("/login");
      }, 2000);
    } catch (error: any) {
      if (error.response && error.response.data) {
        // Trata erros da API
        if (typeof error.response.data === 'object') {
          // Extrai mensagens de erro
          const errorMessages = Object.entries(error.response.data)
            .map(([key, value]) => `${key}: ${Array.isArray(value) ? value.join(", ") : value}`)
            .join("; ");
          setError(errorMessages);
        } else {
          setError("Falha ao realizar cadastro. Verifique os dados.");
        }
      } else {
        setError("Erro de conex√£o. Tente novamente mais tarde.");
      }
    } finally {
      setLoading(false);
    }
  };

  const formFields = [
    { id: "first_name", label: "NOME", type: "text" },
    { id: "nickname", label: "NICKNAME", type: "text" },
    { id: "email", label: "EMAIL", type: "email" },
    { id: "data_nascimento", label: "DATA DE NASCIMENTO", type: "date" },
    { id: "username", label: "USU√ÅRIO", type: "text" },
    { id: "password", label: "SENHA", type: "password" },
    { id: "password2", label: "CONFIRMAR SENHA", type: "password" },
  ];

  return (
    <div className="bg-white flex flex-row justify-center w-full">
      <div className="w-full min-h-screen [background:linear-gradient(180deg,rgba(32,2,89,1)_0%,rgba(121,70,213,1)_100%)] relative overflow-hidden">
        {/* Nuvens com anima√ß√£o */}
        <img
          className="w-[375px] h-[147px] absolute top-[120px] left-[157px] object-cover animate-float-right opacity-75 scale-110"
          alt="Nuvem"
          src="/nuvemleft.png"
        />
        <img
          className="w-[436px] h-[170px] absolute bottom-[30px] right-[27px] object-cover animate-float-left opacity-75 scale-110"
          alt="Nuvem"
          src="/nuvemright.png"
        />

        {/* Bot√µes de navega√ß√£o */}
        <div className="flex gap-5 absolute top-14 left-[33px]">
          <ButtonHomeBack onClick={() => navigate("/")}><ArrowLeft /></ButtonHomeBack>
          <ButtonHomeBack onClick={() => navigate("/")}><House /></ButtonHomeBack>
        </div>

        {/* Card de Cadastro */}
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
          <Card className="w-[700px] rounded-[18px] border-2 border-solid border-black bg-white">
            <CardContent className="pt-8 px-[45px]">
              <h1 className="text-center text-[32px] [font-family:'Silkscreen',Helvetica] font-bold mb-8">
                CADASTRO
              </h1>

              {/* Mensagem de sucesso */}
              {success && (
                <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4">
                  {success}
                </div>
              )}

              {/* Mensagem de erro */}
              {error && (
                <div className="text-red-500 flex items-center gap-2 mb-4">
                  <AlertCircle size={20} />
                  <span>{error}</span>
                </div>
              )}

              <form className="space-y-4" onSubmit={handleSubmit}>
                <div className="grid grid-cols-2 gap-6">
                  {formFields.map((field) => (
                    <div key={field.id} className="space-y-2">
                      <label className="block [font-family:'Silkscreen',Helvetica] font-bold text-black text-[18px]">
                        {field.label}
                      </label>
                      <input
                        id={field.id}
                        type={field.type}
                        className="w-full h-[55px] rounded-xl border-2 border-solid border-black bg-white p-3 text-black [font-family:'Silkscreen',Helvetica]"
                        value={formData[field.id as keyof typeof formData]}
                        onChange={handleChange}
                      />
                    </div>
                  ))}
                </div>

                <div className="flex flex-col justify-between items-center pt-8">
                  <Button
                    type="submit"
                    disabled={loading}
                    className="w-[374px] h-[53px] bg-[#e3922a] rounded-md [font-family:'Silkscreen',Helvetica] font-bold text-black text-[24px] hover:bg-[#e3922a] transform transition-transform duration-300 hover:scale-105"
                  >
                    {loading ? "PROCESSANDO..." : "CADASTRAR"}
                  </Button>

                  <a
                    href="/login"
                    onClick={(e) => {
                      e.preventDefault();
                      navigate("/login");
                    }}
                    className="[font-family:'Silkscreen',Helvetica] font-normal mt-4 text-[#167dd2] text-base underline"
                  >
                    J√° possui uma conta? Fa√ßa login
                  </a>
                </div>
              </form>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/pages/auth/ForgotPassword/ForgotPassword.tsx">
import { useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { Button } from "../../../components/ui/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "../../../components/ui/card";
import { Input } from "../../../components/ui/input";
import { ArrowLeft, House, AlertCircle } from 'lucide-react';
import { ButtonHomeBack } from "@/components/ButtonHomeBack";
import AuthService from "../../../api/authService";

export const ForgotPassword = () => {
  const navigate = useNavigate();
  const { uidb64, token } = useParams(); // Para reset de senha
  const [step, setStep] = useState(uidb64 && token ? 2 : 1);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  const handleEmailSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!email) {
      setError("Por favor, informe seu e-mail");
      return;
    }

    setLoading(true);
    setError("");

    try {
      await AuthService.requestPasswordReset({ email });
      setSuccess("E-mail de recupera√ß√£o enviado! Verifique sua caixa de entrada.");
      setTimeout(() => {
        if (!uidb64 && !token) {
          navigate('/login');
        }
      }, 3000);
    } catch (error: any) {
      if (error.response && error.response.data) {
        if (error.response.data.email) {
          setError(error.response.data.email.join(", "));
        } else if (error.response.data.detail) {
          setError(error.response.data.detail);
        } else {
          setError("Falha ao solicitar recupera√ß√£o de senha.");
        }
      } else {
        setError("Erro de conex√£o. Tente novamente mais tarde.");
      }
    } finally {
      setLoading(false);
    }
  };

  const handlePasswordReset = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!password || !confirmPassword) {
      setError("Por favor, preencha todos os campos");
      return;
    }

    if (password !== confirmPassword) {
      setError("As senhas n√£o conferem");
      return;
    }

    setLoading(true);
    setError("");

    try {
      await AuthService.confirmPasswordReset({
        password,
        password2: confirmPassword,
        token: token || "",
        uidb64: uidb64 || ""
      });

      setSuccess("Senha alterada com sucesso!");
      setTimeout(() => {
        navigate('/login');
      }, 2000);
    } catch (error: any) {
      if (error.response && error.response.data) {
        if (typeof error.response.data === 'object') {
          const errorMessages = Object.entries(error.response.data)
            .map(([key, value]) => `${key}: ${Array.isArray(value) ? value.join(", ") : value}`)
            .join("; ");
          setError(errorMessages);
        } else {
          setError("Falha ao redefinir senha. Verifique o link ou tente novamente.");
        }
      } else {
        setError("Erro de conex√£o. Tente novamente mais tarde.");
      }
    } finally {
      setLoading(false);
    }
  };

  const renderEmailScreen = () => (
    <Card className="w-[700px] h-auto rounded-[18px] border-2 border-solid border-black bg-white">
      <CardHeader className="pb-0">
        <CardTitle className="text-[35px] text-center [font-family:'Silkscreen',Helvetica] font-bold">
          ESQUECI A SENHA
        </CardTitle>
      </CardHeader>
      <CardContent className="pt-1 px-[45px]">
        {success && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4">
            {success}
          </div>
        )}

        {error && (
          <div className="text-red-500 flex items-center gap-2 mb-4">
            <AlertCircle size={20} />
            <span>{error}</span>
          </div>
        )}

        <form className="space-y-2" onSubmit={handleEmailSubmit}>
          <div className="space-y-2">
            <label
              htmlFor="email"
              className="block [font-family:'Silkscreen',Helvetica] font-bold text-black text-[32px]"
            >
              CONFIRME O EMAIL
            </label>
            <Input
              id="email"
              type="email"
              placeholder="teste@email.com"
              className="h-[55px] rounded-xl border border-solid border-black"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
            />
          </div>

          <div className="flex justify-end pt-4">
            <Button
              type="submit"
              disabled={loading}
              className="w-[274px] h-[53px] bg-[#e3922a] rounded-md [font-family:'Silkscreen',Helvetica] font-bold text-black text-[32px] hover:bg-[#e3922a] transform transition-transform duration-300 hover:scale-105"
            >
              {loading ? "ENVIANDO..." : "ENVIAR"}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );

  const renderNewPasswordScreen = () => (
    <Card className="w-[700px] h-auto rounded-[18px] border-2 border-solid border-black bg-white">
      <CardHeader className="pb-0">
        <CardTitle className="text-[35px] text-center [font-family:'Silkscreen',Helvetica] font-bold">
          NOVA SENHA
        </CardTitle>
      </CardHeader>
      <CardContent className="pt-1 px-[45px]">
        {success && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4">
            {success}
          </div>
        )}

        {error && (
          <div className="text-red-500 flex items-center gap-2 mb-4">
            <AlertCircle size={20} />
            <span>{error}</span>
          </div>
        )}

        <form className="space-y-2" onSubmit={handlePasswordReset}>
          <div className="space-y-2">
            <label
              htmlFor="newPassword"
              className="block [font-family:'Silkscreen',Helvetica] font-bold text-black text-[32px]"
            >
              NOVA SENHA
            </label>
            <Input
              id="newPassword"
              type="password"
              className="h-[55px] rounded-xl border border-solid border-black"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <label
              htmlFor="confirmPassword"
              className="block [font-family:'Silkscreen',Helvetica] font-bold text-black text-[32px]"
            >
              CONFIRME A SENHA
            </label>
            <Input
              id="confirmPassword"
              type="password"
              className="h-[55px] rounded-xl border border-solid border-black"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
            />
          </div>

          <div className="flex justify-end pt-4">
            <Button
              type="submit"
              disabled={loading}
              className="w-[274px] h-[53px] bg-[#e3922a] rounded-md [font-family:'Silkscreen',Helvetica] font-bold text-black text-[32px] hover:bg-[#e3922a] transform transition-transform duration-300 hover:scale-105"
            >
              {loading ? "ENVIANDO..." : "ALTERAR"}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );

  return (
    <div className="bg-white flex flex-row justify-center w-full">
      <div className="w-full min-h-screen [background:linear-gradient(180deg,rgba(32,2,89,1)_0%,rgba(121,70,213,1)_100%)] relative overflow-hidden">
        {/* Imagens de decora√ß√£o */}
        <img
          className="w-[375px] h-[147px] absolute top-[120px] left-[157px] object-cover animate-float-right"
          alt="Cloud decoration"
          src="/nuvemleft.png"
        />
        <img
          className="w-[436px] h-[170px] absolute bottom-[30px] right-[27px] object-cover animate-float-left opacity-75 scale-110"
          alt="Cloud decoration"
          src="/nuvemright.png"
        />

        {/* Bot√µes de navega√ß√£o */}
        <div className="flex gap-5 absolute top-14 left-[33px]">
          <ButtonHomeBack onClick={() => navigate("/login")}><ArrowLeft /></ButtonHomeBack>
          <ButtonHomeBack onClick={() => navigate("/")}><House /></ButtonHomeBack>
        </div>

        {/* Conte√∫do principal */}
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
          {step === 1 ? renderEmailScreen() : renderNewPasswordScreen()}
        </div>
      </div>
    </div>
  );
};

export default ForgotPassword;
</file>

<file path="src/pages/auth/Login/Login.tsx">
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "../../../components/ui/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "../../../components/ui/card";
import { Input } from "../../../components/ui/input";
import { ArrowLeft, House, AlertCircle } from 'lucide-react';
import { ButtonHomeBack } from "@/components/ButtonHomeBack";
import { useAuth } from "../../../contexts/AuthContext";

export const Login = () => {
  const navigate = useNavigate();
  const { login } = useAuth();
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const handleForgotPassword = (e: React.MouseEvent) => {
    e.preventDefault();
    navigate("/forgot-password");
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Valida√ß√£o b√°sica
    if (!username || !password) {
      setError("Por favor, preencha todos os campos");
      return;
    }

    setLoading(true);
    setError("");

    try {
      await login(username, password);
      navigate("/"); // Navega para a home ap√≥s login bem-sucedido
    } catch (error: any) {
      if (error.response && error.response.data) {
        // Trata erros da API
        if (error.response.data.detail) {
          setError(error.response.data.detail);
        } else if (typeof error.response.data === 'object') {
          // Extrai mensagens de erro
          const errorMessages = Object.values(error.response.data).flat();
          setError(errorMessages.join(", "));
        } else {
          setError("Falha ao realizar login. Verifique suas credenciais.");
        }
      } else {
        setError("Erro de conex√£o. Tente novamente mais tarde.");
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-white flex flex-row justify-center w-full">
      <div className="w-full min-h-screen [background:linear-gradient(180deg,rgba(32,2,89,1)_0%,rgba(121,70,213,1)_100%)] relative overflow-hidden">
        {/* Elementos de Nuvem */}
        <img
          className="w-[375px] h-[147px] absolute top-[120px] left-[157px] object-cover animate-float-right"
          alt="Nuvem"
          src="/nuvemleft.png"
        />
        <img
          className="w-[436px] h-[170px] absolute bottom-[30px] right-[27px] object-cover animate-float-left opacity-75 scale-110"
          alt="Nuvem"
          src="/nuvemright.png"
        />

        {/* Bot√µes de navega√ß√£o */}
        <div className="flex gap-5 absolute top-14 left-[33px]">
          <ButtonHomeBack onClick={() => navigate("/")}><ArrowLeft /></ButtonHomeBack>
          <ButtonHomeBack onClick={() => navigate("/")}><House /></ButtonHomeBack>
        </div>

        {/* Card de Login */}
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
          <Card className="w-[700px] h-auto rounded-[18px] border-2 border-solid border-black bg-white">
            <CardHeader className="pb-0">
              <CardTitle className="text-[35px] text-center [font-family:'Silkscreen',Helvetica] font-bold">
                LOGIN
              </CardTitle>
            </CardHeader>
            <CardContent className="pt-1 px-[45px]">
              <form className="space-y-2" onSubmit={handleSubmit}>
                {/* Campo de usu√°rio */}
                <div className="space-y-2">
                  <label
                    htmlFor="username"
                    className="block [font-family:'Silkscreen',Helvetica] font-bold text-black text-[32px]"
                  >
                    Usu√°rio
                  </label>
                  <Input
                    id="username"
                    type="text"
                    className="h-[55px] rounded-xl border border-solid border-black"
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                  />
                </div>

                {/* Campo de senha */}
                <div className="space-y-2">
                  <label
                    htmlFor="password"
                    className="block [font-family:'Silkscreen',Helvetica] font-bold text-black text-[32px]"
                  >
                    Senha
                  </label>
                  <Input
                    id="password"
                    type="password"
                    className="h-[55px] rounded-xl border border-solid border-black"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                  />
                </div>

                {/* Mensagem de erro */}
                {error && (
                  <div className="text-red-500 flex items-center gap-2 my-2">
                    <AlertCircle size={20} />
                    <span>{error}</span>
                  </div>
                )}

                {/* Link esqueci senha */}
                <div className="flex justify-end">
                  <a
                    href="#"
                    onClick={handleForgotPassword}
                    className="[font-family:'Silkscreen',Helvetica] font-normal text-[#167dd2] text-2xl underline"
                  >
                    esqueci a senha
                  </a>
                </div>

                {/* Bot√µes */}
                <div className="flex justify-between pt-4">
                  <Button
                    type="button"
                    onClick={() => navigate("/cadastro")}
                    className="w-[274px] h-[53px] bg-[#e3922a] rounded-md [font-family:'Silkscreen',Helvetica] font-bold text-black text-[32px] hover:bg-[#e3922a] transform transition-transform duration-300 hover:scale-105">
                    Cadastro
                  </Button>
                  <Button
                    type="submit"
                    disabled={loading}
                    className="w-[274px] h-[53px] bg-[#e3922a] rounded-md [font-family:'Silkscreen',Helvetica] font-bold text-black text-[32px] hover:bg-[#e3922a] transform transition-transform duration-300 hover:scale-105">
                    {loading ? "Carregando..." : "Login"}
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/pages/Home/HomePage.tsx">
import { ArrowRightIcon } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { Button } from "../../components/ui/button";
import { Card, CardContent } from "../../components/ui/card";
import { Separator } from "../../components/ui/separator";

export const HomePage = () => {
  const navigate = useNavigate();

  const handleLogin = () => {
    navigate("/Login");
  };
  const handleCadastro = () => {
    navigate("/Cadastro");
  };
  return (
    <div className="bg-white flex flex-row justify-center w-full ">
      <div className="bg-white py-5 [background:linear-gradient(180deg,rgba(57,189,248,1)_0%,rgba(154,102,248,1)_100%)] w-full min-h-screen relative flex flex-col items-center justify-center">
        <Card className="w-[1039px] h-[455px] relative border-[3px] border-solid border-black rounded">
          <CardContent className="p-0 flex h-full">
            {/* Left purple section */}
            <div className="w-[512px] h-full bg-[#561c86] rounded border-r-[3px] border-solid border-black flex flex-col items-center px-12 py-5">
              <h1 className="[font-family:'Silkscreen',Helvetica] font-bold text-white text-[40px] text-center mt-3">
                Jogos Logisticos
              </h1>

              <Card className="w-full h-[202px] mt-16 border-[3px] border-solid border-black flex items-center justify-center bg-[#fce9c4]">
                <CardContent className="p-0 flex items-center justify-center h-full">
                  <img
                    className="w-[45%] object-cover"
                    alt="Game logo"
                    src="/Logoifba.png"
                  />
                </CardContent>
              </Card>

              <p className="[font-family:'Silkscreen',Helvetica] font-normal text-white text-[15px] mt-1 text-center">
                Gerencie sua frota de caminh√µes, escolha
                <br />
                as melhores rotas e fa√ßa entregas com efici√™ncia.
              </p>
            </div>

            {/* Right section */}
            <div className="flex-1 flex flex-col items-center px-10">
              <h2 className="[text-shadow:2px_3px_0.6px_#000000] [-webkit-text-stroke:1px_#000000] [font-family:'Silkscreen',Helvetica] font-bold text-[#ff8c00e3] text-[40px] text-center mt-5">
                Bem-vindo!
              </h2>

              <div className="w-full mt-20">
                <Button 
                onClick={handleLogin}
                className="w-full h-[58px] bg-[#ffd700] hover:bg-[#e6c200] text-[#1c1a1a] border border-solid border-black rounded-[3px] relative">
                  <span className="[font-family:'Silkscreen',Helvetica] font-bold text-2xl absolute left-1/2 transform -translate-x-1/2">
                    Entrar
                  </span>
                  <ArrowRightIcon className="absolute right-6 w-6 h-[21px]" />
                </Button>
              </div>

              <div className="w-full mt-5 flex items-center justify-center">
                <div className="[font-family:'Signika',Helvetica] font-bold text-[#8d8c8c] text-2xl">
                  <Separator className="inline-block w-[160px] h-px bg-[#8d8c8c]" />
                  <span className="mx-2">OU</span>
                  <Separator className="inline-block w-[160px] h-px bg-[#8d8c8c]" />
                </div>
              </div>

              <div className="w-full mt-10">
                <Button
                 onClick={handleCadastro}
                className="w-full h-[58px] bg-[#16bd81] hover:bg-[#14a974] text-[#1c1a1a] border border-solid border-black rounded-[3px] relative">
                  <span className="[font-family:'Silkscreen',Helvetica] font-bold text-2xl absolute left-1/2 transform -translate-x-1/2">
                    Cadastrar
                  </span>
                  <ArrowRightIcon className="absolute right-6 w-6 h-[21px]" />
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        <footer className="mt-5 mb-10">
          <p className="[font-family:'Silkscreen',Helvetica] font-bold text-white text-[15px] text-center">
            ¬© 2025 Jogos Log√≠sticos - Todos os direitos reservados
          </p>
        </footer>
      </div>
    </div>
  );
};
</file>

<file path="src/pages/Home/index.ts">
export { HomePage } from "./HomePage";
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="tailwind.config.js">
module.exports = {
	content: [
	  "./src/**/*.{html,js,ts,jsx,tsx}",
	  "app/**/*.{ts,tsx}",
	  "components/**/*.{ts,tsx}",
	],
	theme: {
	  extend: {
		colors: {
		  border: "hsl(var(--border))",
		  input: "hsl(var(--input))",
		  ring: "hsl(var(--ring))",
		  background: "hsl(var(--background))",
		  foreground: "hsl(var(--foreground))",
		  primary: {
			DEFAULT: "hsl(var(--primary))",
			foreground: "hsl(var(--primary-foreground))",
		  },
		  secondary: {
			DEFAULT: "hsl(var(--secondary))",
			foreground: "hsl(var(--secondary-foreground))",
		  },
		  destructive: {
			DEFAULT: "hsl(var(--destructive))",
			foreground: "hsl(var(--destructive-foreground))",
		  },
		  muted: {
			DEFAULT: "hsl(var(--muted))",
			foreground: "hsl(var(--muted-foreground))",
		  },
		  accent: {
			DEFAULT: "hsl(var(--accent))",
			foreground: "hsl(var(--accent-foreground))",
		  },
		  popover: {
			DEFAULT: "hsl(var(--popover))",
			foreground: "hsl(var(--popover-foreground))",
		  },
		  card: {
			DEFAULT: "hsl(var(--card))",
			foreground: "hsl(var(--card-foreground))",
		  },
		},
		borderRadius: {
		  lg: "var(--radius)",
		  md: "calc(var(--radius) - 2px)",
		  sm: "calc(var(--radius) - 4px)",
		},
		fontFamily: {
		  sans: [
			"ui-sans-serif",
			"system-ui",
			"sans-serif",
			'"Apple Color Emoji"',
			'"Segoe UI Emoji"',
			'"Segoe UI Symbol"',
			'"Noto Color Emoji"',
		  ],
		},
		keyframes: {
			'float-right': {
			  '0%, 100%': { transform: 'translateX(0)' },
			  '50%': { transform: 'translateX(350%)' }
			},
			'float-left': {
			  '0%, 100%': { transform: 'translateX(0)' },
			  '50%': { transform: 'translateX(-350%)' }
			}
		  },
		  animation: {
			'float-right': 'float-right 150s ease-in-out infinite',
			'float-left': 'float-left 150s ease-in-out infinite'
		  },

	  },
	  container: { center: true, padding: "2rem", screens: { "2xl": "1400px" } },
	},
	plugins: [],
	darkMode: ["class"],
  }
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "composite": true,
    "allowSyntheticDefaultImports": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": false,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src')
    }
  }
})
</file>

</files>
